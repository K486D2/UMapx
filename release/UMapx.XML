<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UMapx</name>
    </assembly>
    <members>
        <member name="T:UMapx.Analysis.Nonlinear">
            <summary>
            Defines a class that implements the solution of a nonlinear equation.
            <remarks>
            This class is a solution to the problem of finding the root of a nonlinear equation of the form F(x) = 0.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.#ctor(System.Double,UMapx.Analysis.Nonlinear.Method)">
            <summary>
            Initializes a class that implements the solution of a nonlinear equation.
            </summary>
            <param name="eps">Epsilon [0, 1]</param>
            <param name="method">Method for solving a nonlinear equation</param>
        </member>
        <member name="P:UMapx.Analysis.Nonlinear.MethodType">
            <summary>
            Gets or sets the method for solving the nonlinear equation.
            </summary>
        </member>
        <member name="P:UMapx.Analysis.Nonlinear.Eps">
            <summary>
            Gets or sets the error value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.Compute(UMapx.Core.IDouble,System.Double,System.Double)">
            <summary>
            Gets the root value of a nonlinear equation.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Start of line</param>
            <param name="b">End of line</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.Compute(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            Gets the root value of a nonlinear equation.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Start of line</param>
            <param name="b">End of line</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.bisec(UMapx.Core.IDouble,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.secan(UMapx.Core.IDouble,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.falpo(UMapx.Core.IDouble,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.chord(UMapx.Core.IDouble,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.chord(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.secan(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.falpo(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Analysis.Nonlinear.Method">
            <summary>
            Method for solving a nonlinear equation.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Nonlinear.Method.Bisection">
            <summary>
            Bisection method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Nonlinear.Method.Chord">
            <summary>
            Chord method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Nonlinear.Method.Secant">
            <summary>
            Secant method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Nonlinear.Method.FalsePosition">
            <summary>
            False position method.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.Optimization">
            <summary>
            Defines a class that implements an extremum search.
            <remarks>
            This class is a solution to the problem of finding the maximum and minimum points of the function F(x).
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Optimization.#ctor(System.Double)">
            <summary>
            Initializes a class that implements an extremum search.
            </summary>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Analysis.Optimization.Eps">
            <summary>
            Gets or sets the error value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Optimization.Compute(UMapx.Core.IDouble,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the corresponding minimum of the function on the segment.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Start of line</param>
            <param name="b">End of line</param>
            <param name="max">Search maximum or minimum</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Optimization.goldenMin(UMapx.Core.IDouble,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Optimization.goldenMax(UMapx.Core.IDouble,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Analysis.Integration">
            <summary>
            Defines a class that implements numerical integration.
            <remarks>
            This class is a solution to the problem of finding the value of the integral of the function F(x) within the values of a and b.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Integration.#ctor(UMapx.Analysis.Integration.Method)">
            <summary>
            Initializes a class that implements numerical integration.
            </summary>
            <param name="method">Integration method</param>
        </member>
        <member name="P:UMapx.Analysis.Integration.MethodType">
            <summary>
            Gets or sets the integration method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Integration.Compute(UMapx.Core.IDouble,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the value of the integral of a function.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Lower limit</param>
            <param name="b">Upper limit</param>
            <param name="n">Number of splits</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Compute(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            Returns the value of the integral of a function.
            </summary>
            <param name="y">Function vector</param>
            <param name="a">Lower limit</param>
            <param name="b">Upper limit</param>
            <param name="n">Number of splits</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Compute(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            Returns the value of the integral of a function.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Lower limit</param>
            <param name="b">Upper limit</param>
            <param name="n">Number of splits</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Compute(UMapx.Core.Complex[],UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            Returns the value of the integral of a function.
            </summary>
            <param name="y">Function vector</param>
            <param name="a">Lower limit</param>
            <param name="b">Upper limit</param>
            <param name="n">Number of splits</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.rect(UMapx.Core.IDouble,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.rect(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.midp(UMapx.Core.IDouble,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.midp(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.trap(UMapx.Core.IDouble,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.trap(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.simp(UMapx.Core.IDouble,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.simp(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.romb(UMapx.Core.IDouble,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="iterations"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.rect(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.rect(UMapx.Core.Complex[],UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.midp(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.midp(UMapx.Core.Complex[],UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.trap(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.trap(UMapx.Core.Complex[],UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.simp(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.simp(UMapx.Core.Complex[],UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.romb(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="iterations"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Analysis.Integration.Method">
            <summary>
            Integration method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Integration.Method.Rectangle">
            <summary>
            Rectangle method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Integration.Method.Midpoint">
            <summary>
            Midpoint method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Integration.Method.Trapezoidal">
            <summary>
            Trapezoidal method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Integration.Method.Simpson">
            <summary>
            Simpson method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Integration.Method.Romberg">
            <summary>
            Romberg method.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.Differentation">
            <summary>
            Defines a class that implements numerical differentiation.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Differentation.#ctor(System.Int32)">
            <summary>
            Initializes a class that implements numerical differentiation.
            </summary>
            <param name="points">Number of interpolation points</param>
        </member>
        <member name="P:UMapx.Analysis.Differentation.Points">
            <summary>
            Gets or sets the number of interpolation points.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Differentation.Compute(UMapx.Core.IDouble,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the value of a derived function.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="x">Argument value</param>
            <param name="h">Step</param>
            <param name="order">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Differentation.Compute(System.Double[],System.Int32,System.Double,System.Int32)">
            <summary>
            Returns the value of a derived function.
            </summary>
            <param name="y">Function vector</param>
            <param name="index">Index of argument</param>
            <param name="h">Step</param>
            <param name="order">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Differentation.Compute(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            Returns the value of a derived function.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="x">Argument value</param>
            <param name="h">Step</param>
            <param name="order">Order</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Differentation.Compute(UMapx.Core.Complex[],System.Int32,System.Double,System.Int32)">
            <summary>
            Returns the value of a derived function.
            </summary>
            <param name="y">Function vector</param>
            <param name="index">Index of argument</param>
            <param name="h">Step</param>
            <param name="order">Order</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Differentation.GetCoefficients(System.Int32)">
            <summary>
            Returns the matrix of interpolation coefficients.
            </summary>
            <param name="points">Number of points</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Analysis.Differential">
            <summary>
            Defines a class that implements a solution to a differential equation.
            <remarks>
            This class is a solution to the Cauchy problem for the ordinary differential equation y' = F(x, y).
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Differential.#ctor(UMapx.Analysis.Differential.Method)">
            <summary>
            Initializes a class that implements the solution of a differential equation.
            </summary>
            <param name="method">Differentiation method</param>
        </member>
        <member name="P:UMapx.Analysis.Differential.MethodType">
            <summary>
            Gets or sets the differentiation method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Differential.Compute(UMapx.Core.IDoubleMesh,System.Double[],System.Double)">
            <summary>
            Returns the value of a differential equation.
            </summary>
            <param name="function">The delegate of a continuous function depending on two variables</param>
            <param name="x">Array of values argument</param>
            <param name="y0">Value</param>
            <returns>Array of function values</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.Compute(UMapx.Core.IComplexMesh,UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            Returns the value of a differential equation.
            </summary>
            <param name="function">The delegate of a continuous function depending on two variables</param>
            <param name="x">Array of values argument</param>
            <param name="y0">Value</param>
            <returns>Array of function values</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.Compute(UMapx.Core.IDoubleMesh,System.Double[],System.Double,System.Int32)">
            <summary>
            Returns the value of a differential equation calculated by the Adams-Bashfort method.
            </summary>
            <param name="function">The delegate of a continuous function depending on two variables</param>
            <param name="x">Array of values argument</param>
            <param name="y0">Value</param>
            <param name="order">Order</param>
            <returns>Array of function values</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.Compute(UMapx.Core.IComplexMesh,UMapx.Core.Complex[],UMapx.Core.Complex,System.Int32)">
            <summary>
            Returns the value of a differential equation calculated by the Adams-Bashfort method.
            </summary>
            <param name="function">The delegate of a continuous function depending on two variables</param>
            <param name="x">Array of values argument</param>
            <param name="y0">Value</param>
            <param name="order">Order</param>
            <returns>Array of function values</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.GetCoefficients(System.Int32)">
            <summary>
            Returns an array of coefficient values for the Adams-Bashfort formula.
            </summary>
            <param name="order">Order</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.euler(UMapx.Core.IDoubleMesh,System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.rungeKutta2(UMapx.Core.IDoubleMesh,System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.rungeKutta4(UMapx.Core.IDoubleMesh,System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.fehlberg(UMapx.Core.IDoubleMesh,System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.euler(UMapx.Core.IComplexMesh,UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.rungeKutta2(UMapx.Core.IComplexMesh,UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.rungeKutta4(UMapx.Core.IComplexMesh,UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.fehlberg(UMapx.Core.IComplexMesh,UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Analysis.Differential.Method">
            <summary>
            Differentiation method
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Differential.Method.Euler">
            <summary>
            Euler method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Differential.Method.RungeKutta2">
            <summary>
            The second-order Runge-Kutta method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Differential.Method.RungeKutta4">
            <summary>
            Fourth-order Runge-Kutta method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Differential.Method.Fehlberg">
            <summary>
            Felberg's method.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.Interpolation">
            <summary>
            Defines a class that implements interpolation.
            <remarks>
            This class is a solution to the problem of finding an intermediate value of the function F(x).
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.#ctor(UMapx.Analysis.Interpolation.Method)">
            <summary>
            Initializes a class that implements interpolation.
            </summary>
            <param name="method">Interpolation method</param>
        </member>
        <member name="P:UMapx.Analysis.Interpolation.MethodType">
            <summary>
            Gets or sets the interpolation method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Compute(System.Double[],System.Double[],System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            Returns the value of a function at a point.
            <remarks>
            In this case, only bilinear interpolation is used.
            </remarks>
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="z">Function matrix</param>
            <param name="xl">The value of the first argument to calculate</param>
            <param name="yl">The value of the second argument to calculate</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Compute(System.Double[],System.Double[],System.Double)">
            <summary>
            Returns the value of a function at a point.
            </summary>
            <param name="x">Array of values of the argument</param>
            <param name="y">Array of values of the function</param>
            <param name="xl">The value of the argument to calculate</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Compute(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            Returns the value of a function at a point.
            </summary>
            <param name="x">Array of values of the argument</param>
            <param name="y">Array of values of the function</param>
            <param name="xl">The value of the argument to calculate</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.linear(System.Double[],System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xl"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.bilinear(System.Double[],System.Double[],System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="xval"></param>
            <param name="yval"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.lagra(System.Double[],System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.newto(System.Double[],System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.baryc(System.Double[],System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.lagra(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.newto(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.baryc(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Analysis.Interpolation.Method">
            <summary>
            Interpolation method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Interpolation.Method.Linear">
            <summary>
            Linear method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Interpolation.Method.Lagrange">
            <summary>
            Lagrange's method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Interpolation.Method.Newton">
            <summary>
            Newton's method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Interpolation.Method.Barycentric">
            <summary>
            Barycentric method.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.Approximation">
            <summary>
            Defines the least squares approximation class.
            <remarks>
            This class is a solution to the problem of finding the function A (x) ≈ F (x), where F (x) is the original function.
            More information can be found on the website:
            http://simenergy.ru/math-analysis/digital-processing/85-ordinary_least_squares
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Approximation.#ctor(System.Int32,UMapx.Analysis.Approximation.Method)">
            <summary>
            Initializes the least squares approximation class.
            </summary>
            <param name="power">Polynomial degree</param>
            <param name="method">Approximation method</param>
        </member>
        <member name="P:UMapx.Analysis.Approximation.Power">
            <summary>
            Gets or sets the degree of the polynomial.
            </summary>
        </member>
        <member name="P:UMapx.Analysis.Approximation.MethodType">
            <summary>
            Gets or sets the approximation method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(System.Double[],System.Double[])">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <param name="cf">Approximation coefficients</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(System.Double[],System.Double[],System.Double[]@,System.Double@)">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <param name="cf">Approximation coefficients</param>
            <param name="error">Error</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(System.Double[],System.Double[],System.Double[]@,System.Double@,System.String@)">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <param name="cf">Approximation coefficients</param>
            <param name="error">Error</param>
            <param name="equation">Equation</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex[]@)">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <param name="cf">Approximation coefficients</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex[]@,UMapx.Core.Complex@)">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <param name="cf">Approximation coefficients</param>
            <param name="error">Error</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex[]@,UMapx.Core.Complex@,System.String@)">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <param name="cf">Approximation coefficients</param>
            <param name="error">Error</param>
            <param name="equation">Equation</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.poly(System.Double[],System.Double[],System.Int32,System.Double[]@,System.Double@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.poly(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Int32,UMapx.Core.Complex[]@,UMapx.Core.Complex@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.logc(System.Double[],System.Double[],System.Int32,System.Double[]@,System.Double@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.logc(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Int32,UMapx.Core.Complex[]@,UMapx.Core.Complex@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.expn(System.Double[],System.Double[],System.Int32,System.Double[]@,System.Double@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.expn(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Int32,UMapx.Core.Complex[]@,UMapx.Core.Complex@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.powr(System.Double[],System.Double[],System.Int32,System.Double[]@,System.Double@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.powr(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Int32,UMapx.Core.Complex[]@,UMapx.Core.Complex@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Analysis.Approximation.Method">
            <summary>
            Approximation method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Approximation.Method.Polynomial">
            <summary>
            Polynomial approximation.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Approximation.Method.Logarithmic">
            <summary>
            Logarithmic approximation.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Approximation.Method.Exponential">
            <summary>
            Exponential approximation.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Approximation.Method.Power">
            <summary>
            Power approximation.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.LeastSquaresOptions">
            <summary>
            Defines a class that implements the least squares method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Polynomial(System.Double,System.Double[])">
            <summary>
            Returns the polynomial value.
            </summary>
            <param name="x">Argument</param>
            <param name="c">Approximation coefficients</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Polynomial(System.Double[],System.Double[])">
            <summary>
            Returns an array of polynomial values.
            </summary>
            <param name="x">Argument</param>
            <param name="c">Approximation coefficients</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Coefficients(System.Double[],System.Double[],System.Int32)">
            <summary>
            Returns an array of polynomial values.
            </summary>
            <param name="x">Argument</param>
            <param name="y">Function</param>
            <param name="iterations">Number of iterations</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.SummaryPow(System.Double[],System.Double)">
            <summary>
            Returns the value of the expression: s += v(i) ^ pow.
            </summary>
            <param name="v">Array</param>
            <param name="pow">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.SummaryPow(System.Double[],System.Double[],System.Double,System.Double)">
            <summary>
            Returns the value of the expression: s += {x(i) ^ powx} * {y(i) ^ powy}.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <param name="powx">Power of x</param>
            <param name="powy">Power of y</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Error(System.Double[],System.Double[])">
            <summary>
            Returns the approximation error of the function.
            </summary>
            <param name="a">Approximation</param>
            <param name="b">Function</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Equation(System.Double[])">
            <summary>
            Returns the equation of a polynomial represented as a string.
            </summary>
            <param name="p">Polynomial coefficients</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Equation(System.Double[],System.String)">
            <summary>
            Returns the equation of a polynomial represented as a string.
            </summary>
            <param name="p">Polynomial coefficients</param>
            <param name="function">Function</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Polynomial(UMapx.Core.Complex,UMapx.Core.Complex[])">
            <summary>
            Returns the polynomial value.
            </summary>
            <param name="x">Argument</param>
            <param name="c">Approximation coefficients</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Polynomial(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns an array of polynomial values.
            </summary>
            <param name="x">Argument</param>
            <param name="c">Approximation coefficients</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Coefficients(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Int32)">
            <summary>
            Returns an array of polynomial values.
            </summary>
            <param name="x">Argument</param>
            <param name="y">Function</param>
            <param name="iterations">Number of iterations</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.SummaryPow(UMapx.Core.Complex[],System.Double)">
            <summary>
            Returns the value of the expression: s += v(i) ^ pow.
            </summary>
            <param name="v">Array</param>
            <param name="pow">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.SummaryPow(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Double,System.Double)">
            <summary>
            Returns the value of the expression: s += {x(i) ^ powx} * {y(i) ^ powy}.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <param name="powx">Power of x</param>
            <param name="powy">Power of y</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Error(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the approximation error of the function.
            </summary>
            <param name="a">Approximation</param>
            <param name="b">Function</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Equation(UMapx.Core.Complex[])">
            <summary>
            Returns the equation of a polynomial represented as a string.
            </summary>
            <param name="p">Polynomial coefficients</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Equation(UMapx.Core.Complex[],System.String)">
            <summary>
            Returns the equation of a polynomial represented as a string.
            </summary>
            <param name="p">Polynomial coefficients</param>
            <param name="function">Function</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="T:UMapx.Analysis.Roots">
            <summary>
            Defines a class for solving equations using the spectral decomposition of a matrix.
            <remarks>
            More information can be found on the website:
            https://www.mathworks.com/help/matlab/ref/roots.html
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Roots.#ctor(System.Double)">
            <summary>
            Initializes a class of equations using the spectral decomposition of a matrix.
            </summary>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Analysis.Roots.Eps">
            <summary>
            Gets or sets an error [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Roots.Compute(System.Double[])">
            <summary>
            Returns a column vector corresponding to the numerical solution of the polynomial: p(1)*x^n + ... + p(n)*x + p(n+1) = 0.
            </summary>
            <param name="polynomial">Polynomial</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Roots.Compute(UMapx.Core.Complex[])">
            <summary>
            Returns a column vector of polynomial coefficients: p(1)*x^n + ... + p(n)*x + p(n+1) = 0.
            </summary>
            <param name="roots">Roots</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Colorspace.LAB">
            <summary>
            Defines a color model CIE Lab.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.LAB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure CIE Lab.
            </summary>
            <param name="l">Component L [0, 100]</param>
            <param name="a">Component a [-127, 127]</param>
            <param name="b">Component b [-127, 127]</param>
        </member>
        <member name="P:UMapx.Colorspace.LAB.L">
            <summary>
            Defines a component of the model [0, 100].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.LAB.A">
            <summary>
            Defines a component of the model [-127, 127].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.LAB.B">
            <summary>
            Defines a component of the model [-127, 127].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.LAB.op_Equality(UMapx.Colorspace.LAB,UMapx.Colorspace.LAB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">CIE Lab structure</param>
            <param name="item2">CIE Lab structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.op_Inequality(UMapx.Colorspace.LAB,UMapx.Colorspace.LAB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">CIE Lab structure</param>
            <param name="item2">CIE Lab structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.ToXYZ(System.Double,System.Double,System.Double)">
            <summary>
            Converts a color model CIE Lab in model CIE XYZ.
            </summary>
            <param name="l">Component L</param>
            <param name="a">Component a</param>
            <param name="b">Component b</param>
            <returns>CIE XYZ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.ToXYZ(UMapx.Colorspace.LAB)">
            <summary>
            Converts a color model CIE Lab in model CIE XYZ.
            </summary>
            <param name="lab">CIE Lab structure</param>
            <returns>CIE XYZ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.ToLAB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model CIE Lab.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>CIE Lab structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.ToLAB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model CIE Lab.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>CIE Lab structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.LAB.ToRGB">
            <summary>
            Converts a color model CIE Lab in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.XYZ">
            <summary>
            Defines a color model CIE XYZ.
            </summary>
        </member>
        <member name="F:UMapx.Colorspace.XYZ.White">
            <summary>
            Returns white color.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure CIE XYZ.
            </summary>
            <param name="x">Component X [0, 1]</param>
            <param name="y">Component Y [0, 1]</param>
            <param name="z">Component Z [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.XYZ.X">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.XYZ.Y">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.XYZ.Z">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.op_Equality(UMapx.Colorspace.XYZ,UMapx.Colorspace.XYZ)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">CIE XYZ structure</param>
            <param name="item2">CIE XYZ structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.op_Inequality(UMapx.Colorspace.XYZ,UMapx.Colorspace.XYZ)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">CIE XYZ structure</param>
            <param name="item2">CIE XYZ structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.ToLAB(System.Double,System.Double,System.Double)">
            <summary>
            Converts a color model CIE XYZ in model CIE Lab.
            </summary>
            <param name="x">Component X</param>
            <param name="y">Component Y</param>
            <param name="z">Component Z</param>
            <returns>CIE Lab structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.ToLAB(UMapx.Colorspace.XYZ)">
            <summary>
            Converts a color model CIE XYZ in model CIE Lab.
            </summary>
            <param name="xyz">CIE XYZ structure</param>
            <returns>CIE Lab structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model CIE XYZ.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>CIE XYZ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model CIE XYZ.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>CIE XYZ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.Fxyz(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:UMapx.Colorspace.XYZ.ToRGB">
            <summary>
            Converts a color model CIE XYZ in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.CMYK">
            <summary>
            Defines a color model СMYK.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure CMYK.
            </summary>
            <param name="c">Cyan [0, 1]</param>
            <param name="m">Magenta [0, 1]</param>
            <param name="y">Yellow [0, 1]</param>
            <param name="k">Keycolor [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.Cyan">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.Magenta">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.Yellow">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.Keycolor">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.op_Equality(UMapx.Colorspace.CMYK,UMapx.Colorspace.CMYK)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">CMYK structure</param>
            <param name="item2">CMYK structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.op_Inequality(UMapx.Colorspace.CMYK,UMapx.Colorspace.CMYK)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">CMYK structure</param>
            <param name="item2">CMYK structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model CMYK.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>CMYK structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model HSB.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>CMYK structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.ToRGB">
            <summary>
            Converts a color model CMYK in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.HSB">
            <summary>
            Defines a color model HSB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.HSB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure HSB.
            </summary>
            <param name="h">Hue [0, 359]</param>
            <param name="s">Saturation [0, 1]</param>
            <param name="b">Brightness [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.HSB.Hue">
            <summary>
            Defines a component of the color model [0, 359].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.HSB.Saturation">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.HSB.Brightness">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.HSB.op_Equality(UMapx.Colorspace.HSB,UMapx.Colorspace.HSB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">HSB structure</param>
            <param name="item2">HSB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.op_Inequality(UMapx.Colorspace.HSB,UMapx.Colorspace.HSB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">HSB structure</param>
            <param name="item2">HSB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model HSB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>HSB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model HSB.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>HSB structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.HSB.ToRGB">
            <summary>
            Converts a color model HSB in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.HSL">
            <summary>
            Defines a color model HSL.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.HSL.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure HSL.
            </summary>
            <param name="h">Hue [0, 360]</param>
            <param name="s">Saturation [0, 1]</param>
            <param name="l">Lightness [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.HSL.Hue">
            <summary>
            Defines a component of the color model [0, 360].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.HSL.Saturation">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.HSL.Lightness">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.HSL.op_Equality(UMapx.Colorspace.HSL,UMapx.Colorspace.HSL)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">HSL structure</param>
            <param name="item2">HSL structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.op_Inequality(UMapx.Colorspace.HSL,UMapx.Colorspace.HSL)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">HSL structure</param>
            <param name="item2">HSL structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model HSL.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>HSL structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model HSL.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>HSL structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.HSL.ToRGB">
            <summary>
            Converts a color model HSL in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.AHSL">
            <summary>
            Defines a color model AHSL.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure HSL.
            </summary>
            <param name="h">Hue [0, 360]</param>
            <param name="s">Saturation [0, 255]</param>
            <param name="l">Lightness [-100, 100]</param>
        </member>
        <member name="P:UMapx.Colorspace.AHSL.Hue">
            <summary>
            Defines a component of the color model [0, 359].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.AHSL.Saturation">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.AHSL.Lightness">
            <summary>
            Defines a component of the color model [-100, 100].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.op_Equality(UMapx.Colorspace.AHSL,UMapx.Colorspace.AHSL)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">HSL structure</param>
            <param name="item2">HSL structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.op_Inequality(UMapx.Colorspace.AHSL,UMapx.Colorspace.AHSL)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">HSL structure</param>
            <param name="item2">HSL structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model AHSL.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>HSL structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model AHSL.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>HSL structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.AHSL.ToRGB">
            <summary>
            Converts a color model AHSL in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.RGB">
            <summary>
            Defines a color model RGB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RGB.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the structure RGB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
        </member>
        <member name="M:UMapx.Colorspace.RGB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure RGB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Red">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Green">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Blue">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RGB.op_Equality(UMapx.Colorspace.RGB,UMapx.Colorspace.RGB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">RGB structure</param>
            <param name="item2">RGB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.op_Inequality(UMapx.Colorspace.RGB,UMapx.Colorspace.RGB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">RGB structure</param>
            <param name="item2">RGB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.op_Implicit(UMapx.Colorspace.RGB)~System.Drawing.Color">
            <summary>
            Defines an explicit conversion RGB в System.Drawing.Color.
            </summary>
            <param name="value">RGB structure</param>
            <returns>Color in terms of red, green and blue</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.op_Implicit(System.Drawing.Color)~UMapx.Colorspace.RGB">
            <summary>
            Defines an explicit conversion RGB в System.Drawing.Color.
            </summary>
            <param name="value">Color in terms of red, green and blue</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.GetIntFromHex(System.String)">
            <summary>
            Gets the int equivalent for a hexadecimal value.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RGB.FromHEX(System.String)">
            <summary>
            Converts a color model HEX in model RGB.
            </summary>
            <param name="hexColor">HEX</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.ToHEX(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model HEX.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.ToHEX(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model HEX.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Average(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the average brightness value.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Average(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the average brightness value.
            </summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Average(UMapx.Colorspace.RGB)">
            <summary>
            Calculates the average brightness value.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Average(UMapx.Colorspace.sRGB)">
            <summary>
            Calculates the average brightness value.
            </summary>
            <param name="rgb">sRGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.PAL(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the brightness value in the standard (PAL/NTC).
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.PAL(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the brightness value in the standard (PAL/NTC).
            </summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.PAL(UMapx.Colorspace.RGB)">
            <summary>
            Calculates the brightness value in the standard (PAL/NTC).
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.PAL(UMapx.Colorspace.sRGB)">
            <summary>
            Calculates the brightness value in the standard (PAL/NTC).
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.HDTV(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the brightness value in the standard HDTV.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.HDTV(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the brightness value in the standard HDTV.
            </summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.HDTV(UMapx.Colorspace.RGB)">
            <summary>
            Calculates the brightness value in the standard HDTV.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.HDTV(UMapx.Colorspace.sRGB)">
            <summary>
            Calculates the brightness value in the standard HDTV.
            </summary>
            <param name="rgb">sRGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.RYY(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the brightness value in the standard RYY.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.RYY(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the brightness value in the standard RYY.
            </summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.RYY(UMapx.Colorspace.RGB)">
            <summary>
            Calculates the brightness value in the standard RYY.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.RYY(UMapx.Colorspace.sRGB)">
            <summary>
            Calculates the brightness value in the standard RYY.
            </summary>
            <param name="rgb">sRGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Temp2RGB(System.Double)">
            <summary>
            Converts temperature T (in kelvins) to color in terms of red, green, and blue channels.
            </summary>
            <param name="temperature">Temperature [1000K, 10000K]</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Saturation(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Corrects color saturation.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <param name="s">Saturation</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Saturation(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Corrects color saturation.
            </summary>
            <param name="red">Red </param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <param name="s">Saturation</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Saturation(UMapx.Colorspace.RGB,System.Double)">
            <summary>
            Corrects color saturation.
            </summary>
            <param name="rgb">RGB structure</param>
            <param name="s">Saturation</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Saturation(UMapx.Colorspace.sRGB,System.Double)">
            <summary>
            Corrects color saturation.
            </summary>
            <param name="rgb">sRGB structure</param>
            <param name="s">Saturation</param>
            <returns>RGB structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.RGB.ToRGB">
            <summary>
            Returns the color model RGB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RGB.SchemeFromHue(System.Double,System.UInt32)">
            <summary>
            Generates a color scheme.
            </summary>
            <param name="hue">Hue [0, 360]</param>
            <param name="length">Length</param>
            <returns>Color scheme</returns>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Cool">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Hot">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Copper">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.HSB">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Jet">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Pink">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Autumn">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Spring">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Summer">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Winter">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="T:UMapx.Colorspace.RYB">
            <summary>
            Defines a color model RYB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RYB.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the structure RYB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="yellow">Yellow [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
        </member>
        <member name="M:UMapx.Colorspace.RYB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure RYB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="yellow">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
        </member>
        <member name="P:UMapx.Colorspace.RYB.Red">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RYB.Yellow">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RYB.Blue">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RYB.op_Equality(UMapx.Colorspace.RYB,UMapx.Colorspace.RYB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">RYB structure</param>
            <param name="item2">RYB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.op_Inequality(UMapx.Colorspace.RYB,UMapx.Colorspace.RYB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">RYB structure</param>
            <param name="item2">RYB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model RYB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>RYB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model RYB.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>RYB structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.RYB.ToRGB">
            <summary>
            Converts a color model RYB in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.sRGB">
            <summary>
            Defines a color model sRGB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure sRGB.
            </summary>
            <param name="red">Red [0, 1]</param>
            <param name="green">Green [0, 1]</param>
            <param name="blue">Blue [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.sRGB.Red">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.sRGB.Green">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.sRGB.Blue">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.op_Equality(UMapx.Colorspace.sRGB,UMapx.Colorspace.sRGB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">sRGB structure</param>
            <param name="item2">sRGB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.op_Inequality(UMapx.Colorspace.sRGB,UMapx.Colorspace.sRGB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">sRGB structure</param>
            <param name="item2">sRGB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model sRGB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>sRGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model sRGB.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>sRGB structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.sRGB.ToRGB">
            <summary>
            Converts a color model sRGB in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YUV">
            <summary>
            Defines a color model YUV.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YUV.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure YUV.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="u">U [-0.436, 0.436]</param>
            <param name="v">V [-0.614, 0.614]</param>
        </member>
        <member name="P:UMapx.Colorspace.YUV.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YUV.U">
            <summary>
            Defines a component of the color model [-0.436, 0.436].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YUV.V">
            <summary>
            Defines a component of the color model [-0.614, 0.614].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YUV.op_Equality(UMapx.Colorspace.YUV,UMapx.Colorspace.YUV)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YUV structure</param>
            <param name="item2">YUV structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.op_Inequality(UMapx.Colorspace.YUV,UMapx.Colorspace.YUV)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YUV structure</param>
            <param name="item2">YUV structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model YUV.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YUV structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model YUV.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YUV structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YUV.ToRGB">
            <summary>
            Converts a color model YUV in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YIQ">
            <summary>
            Defines a color model YIQ.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure YIQ.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="i">I [-0.5957, 0.5957]</param>
            <param name="q">Q [-0.5226, 0.5226]</param>
        </member>
        <member name="P:UMapx.Colorspace.YIQ.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YIQ.I">
            <summary>
            Defines a component of the color model [-0.5957, 0.5957].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YIQ.Q">
            <summary>
            Defines a component of the color model [-0.5226, 0.5226].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.op_Equality(UMapx.Colorspace.YIQ,UMapx.Colorspace.YIQ)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YIQ structure</param>
            <param name="item2">YIQ structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.op_Inequality(UMapx.Colorspace.YIQ,UMapx.Colorspace.YIQ)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YIQ structure</param>
            <param name="item2">YIQ structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model YIQ.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YIQ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model YIQ.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YIQ structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YIQ.ToRGB">
            <summary>
            Converts a color model YIQ in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YCbCr">
            <summary>
            Defines a color model YCbCr.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure YCbCr.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="cb">Cb [-1, 1]</param>
            <param name="cr">Cr [-1, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.YCbCr.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YCbCr.Cb">
            <summary>
            Defines a component of the color model [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YCbCr.Cr">
            <summary>
            Defines a component of the color model [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.op_Equality(UMapx.Colorspace.YCbCr,UMapx.Colorspace.YCbCr)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YCbCr structure</param>
            <param name="item2">YCbCr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.op_Inequality(UMapx.Colorspace.YCbCr,UMapx.Colorspace.YCbCr)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YCbCr structure</param>
            <param name="item2">YCbCr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model YCbCr.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YCbCr structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model YCbCr.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YCbCr structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YCbCr.ToRGB">
            <summary>
            Converts a color model YCbCr in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YDbDr">
            <summary>
            Defines a color model YDbDr.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure YDbDr.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="db">Db [-1.333, 1.333]</param>
            <param name="dr">Dr [-1.333, 1.333]</param>
        </member>
        <member name="P:UMapx.Colorspace.YDbDr.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YDbDr.Db">
            <summary>
            Defines a component of the color model [-1.333, 1.333].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YDbDr.Dr">
            <summary>
            Defines a component of the color model [-1.333, 1.333].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.op_Equality(UMapx.Colorspace.YDbDr,UMapx.Colorspace.YDbDr)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YDbDr structure</param>
            <param name="item2">YDbDr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.op_Inequality(UMapx.Colorspace.YDbDr,UMapx.Colorspace.YDbDr)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YDbDr structure</param>
            <param name="item2">YDbDr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model YDbDr.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YDbDr structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model YDbDr.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YDbDr structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YDbDr.ToRGB">
            <summary>
            Converts a color model YDbDr in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YCgCo">
            <summary>
            Defines a color model YCgCo.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure YDbDr.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="cg">Cg [-0.5, 0.5]</param>
            <param name="co">Co [-0.5, 0.5]</param>
        </member>
        <member name="P:UMapx.Colorspace.YCgCo.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YCgCo.Cg">
            <summary>
            Defines a component of the color model [-0.5, 0.5].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YCgCo.Co">
            <summary>
            Defines a component of the color model [-0.5, 0.5].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.op_Equality(UMapx.Colorspace.YCgCo,UMapx.Colorspace.YCgCo)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YCgCo structure</param>
            <param name="item2">YCgCo structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.op_Inequality(UMapx.Colorspace.YCgCo,UMapx.Colorspace.YCgCo)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YCgCo structure</param>
            <param name="item2">YCgCo structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model YCgCo.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YCgCo structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model YCgCo.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YCgCo structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YCgCo.ToRGB">
            <summary>
            Converts a color model YCgCo in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YPbPr">
            <summary>
            Defines a color model YPbPr.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure YPbPr.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="pb">Pb [-0.5, 0.5]</param>
            <param name="pr">Pr [-0.5, 0.5]</param>
        </member>
        <member name="P:UMapx.Colorspace.YPbPr.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YPbPr.Pb">
            <summary>
            Defines a component of the color model [-0.5, 0.5].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YPbPr.Pr">
            <summary>
            Defines a component of the color model [-0.5, 0.5].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.op_Equality(UMapx.Colorspace.YPbPr,UMapx.Colorspace.YPbPr)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YPbPr structure</param>
            <param name="item2">YPbPr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.op_Inequality(UMapx.Colorspace.YPbPr,UMapx.Colorspace.YPbPr)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YPbPr structure</param>
            <param name="item2">YPbPr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model YPbPr.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YPbPr structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model YPbPr.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YPbPr structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YPbPr.ToRGB">
            <summary>
            Converts a color model YPbPr in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.Unknown">
            <summary>
            Defines an unknown color model.
            This color model can play the role of any color space.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure.
            </summary>
            <param name="x">Component X</param>
            <param name="y">Component Y</param>
            <param name="z">Component Z</param>
        </member>
        <member name="P:UMapx.Colorspace.Unknown.X">
            <summary>
            Defines the component of the color model.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.Unknown.Y">
            <summary>
            Defines the component of the color model.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.Unknown.Z">
            <summary>
            Defines the component of the color model.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Equality(UMapx.Colorspace.Unknown,UMapx.Colorspace.Unknown)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">Unknown structure</param>
            <param name="item2">Unknown structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Inequality(UMapx.Colorspace.Unknown,UMapx.Colorspace.Unknown)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">Unknown structure</param>
            <param name="item2">Unknown structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.AHSL)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.AHSL">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.LAB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.LAB">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.XYZ)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.XYZ">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.CMYK)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.CMYK">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.HSB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.HSB">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.HSL)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.HSL">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.RGB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.RGB">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.RYB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.RYB">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.sRGB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.sRGB">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YCbCr)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YCbCr">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YCgCo)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YCgCo">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YDbDr)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YDbDr">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YIQ)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YIQ">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YPbPr)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YPbPr">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YUV)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YUV">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(System.Drawing.Color)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~System.Drawing.Color">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.Unknown.ToRGB">
            <summary>
            Returns the color model RGB.
            </summary>
        </member>
        <member name="T:UMapx.Colorspace.IColorSpace">
            <summary>
            Defines the color space interface.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.IColorSpace.ToRGB">
            <summary>
            Returns the color model RGB.
            </summary>
        </member>
        <member name="T:UMapx.Core.Maths">
            <summary>
            Uses to implement basic algebraic, trigonometric and hyperbolic operations.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.E">
            <summary>
            Exponent.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Pi">
            <summary>
            Pi.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Phi">
            <summary>
            Phi (golden number).
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Tau">
            <summary>
            Double pi.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Gamma">
            <summary>
            Euler-Mascheroni constant.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Sqrt2">
            <summary>
            Square root of number 2.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.G">
            <summary>
            Catalan's constant.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.A">
            <summary>
            Apery's constant.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.I">
            <summary>   
            Imaginary one.
            </summary>
        </member>
        <member name="M:UMapx.Core.Maths.Byte(System.Double)">
            <summary>
            Converts a value to a Byte type.
            </summary>
            <param name="x">Value</param>
            <returns>Byte</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Byte(System.Int32)">
            <summary>
            Converts a value to a Byte type.
            </summary>
            <param name="x">Value</param>
            <returns>Byte</returns>
        </member>
        <member name="M:UMapx.Core.Maths.sByte(System.Double)">
            <summary>
            Converts a value to a Byte type.
            </summary>
            <param name="x">Value</param>
            <returns>Byte</returns>
        </member>
        <member name="M:UMapx.Core.Maths.sByte(System.Int32)">
            <summary>
            Converts a value to a Byte type.
            </summary>
            <param name="x">Value</param>
            <returns>Byte</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Double(System.Double)">
            <summary>
            Converts a value to a type Double.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsRange(System.Double,System.Double,System.Double)">
            <summary>
            Checks if value is in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if value is in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Range(System.Double,System.Double,System.Double)">
            <summary>
            Checks if value is in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Range(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if value is in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsSingular(System.Double)">
            <summary>
            Checks a number for an exception.
            </summary>
            <param name="a">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsSingular(UMapx.Core.Complex)">
            <summary>
            Checks a number for an exception.
            </summary>
            <param name="a">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsSquare(System.Double)">
            <summary>
            Checks if a number is a full square.
            </summary>
            <param name="n">Integer number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsPower(System.Double,System.Double)">
            <summary>
            Checks whether a number is a power of another number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsInteger(System.Double)">
            <summary>
            Checks whether a number is an integer.
            </summary>
            <param name="a">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsEven(System.Double)">
            <summary>
            Checks whether a number is even.
            </summary>
            <param name="a">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsNotEven(System.Double)">
            <summary>
            Checks whether a number is odd.
            </summary>
            <param name="a">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pow(System.Double)">
            <summary>
            Returns the number raised to the second power.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pow(System.Double,System.Double)">
            <summary>
            Returns the number raised to the power.
            </summary>
            <param name="a">Number</param>
            <param name="b">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Exp(System.Double)">
            <summary>
            Returns the exponent raised to the power.
            </summary>
            <param name="a">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log(System.Double)">
            <summary>
            Returns the natural logarithm of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log10(System.Double)">
            <summary>
            Returns the decimal logarithm of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log2(System.Double)">
            <summary>
            Returns the binary logarithm of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log(System.Double,System.Double)">
            <summary>
            Returns the logarithm of a number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Base</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sqrt(System.Double)">
            <summary>
            Returns the square root of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sqrt(System.Double,System.Double)">
            <summary>
            Returns the root of a number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Abs(System.Double)">
            <summary>
            Returns the modulus of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Max(System.Double,System.Double)">
            <summary>
            Returns the largest of two numbers.
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Max(System.Double,System.Double,System.Double)">
            <summary>
            Returns the largest of three numbers.
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <param name="c">Third number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Min(System.Double,System.Double)">
            <summary>
            Returns the smallest of two numbers.
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Min(System.Double,System.Double,System.Double)">
            <summary>
            Returns the smallest of three numbers.
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <param name="c">Third number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sign(System.Double)">
            <summary>
            Returns the sign of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Floor(System.Double)">
            <summary>
            Returns the rounded number down.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ceil(System.Double)">
            <summary>
            Returns the rounded number up.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Round(System.Double)">
            <summary>
            Returns the rounded number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Round(System.Double,System.Int32)">
            <summary>
            Returns the rounded number.
            </summary>
            <param name="a">Number</param>
            <param name="dig">Digits</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Fix(System.Double)">
            <summary>
            Returns number with the fractional part discarded.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Abs(UMapx.Core.Complex)">
            <summary>
            Returns the modulus of a complex number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Angle(UMapx.Core.Complex)">
            <summary>
            Returns the angle of a complex number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log(UMapx.Core.Complex)">
            <summary>
            Returns the natural logarithm of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log10(UMapx.Core.Complex)">
            <summary>
            Returns the decimal logarithm of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log2(UMapx.Core.Complex)">
            <summary>
            Returns the binary logarithm of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log(UMapx.Core.Complex,System.Double)">
            <summary>
            Returns the logarithm of a number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Base</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Exp(UMapx.Core.Complex)">
            <summary>
            Returns the exponent raised to a complex degree.
            </summary>
            <param name="a">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pow(System.Double,UMapx.Core.Complex)">
            <summary>
            Returns the number raised to a complex power.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pow(UMapx.Core.Complex,System.Double)">
            <summary>
            Returns the number raised to the power.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sqrt(UMapx.Core.Complex)">
            <summary>
            Returns the square root of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sqrt(UMapx.Core.Complex,System.Double)">
            <summary>
            Returns the root of a number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.FromPolar(System.Double,System.Double)">
            <summary>
            Returns complex number.
            </summary>
            <param name="abs">Module</param>
            <param name="angle">Angle</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Round(UMapx.Core.Complex)">
            <summary>
            Returns the rounded number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Round(UMapx.Core.Complex,System.Int32)">
            <summary>
            Returns the rounded number.
            </summary>
            <param name="a">Complex number</param>
            <param name="dig">Digits</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Fix(UMapx.Core.Complex)">
            <summary>
            Returns number with the fractional part discarded.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cos(System.Double)">
            <summary>
            Returns the cosine of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sin(System.Double)">
            <summary>
            Returns the sine of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Tg(System.Double)">
            <summary>
            Returns the tangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ctg(System.Double)">
            <summary>
            Returns the cotangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sec(System.Double)">
            <summary>
            Returns the secant of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cosc(System.Double)">
            <summary>
            Returns the cosecant of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asin(System.Double)">
            <summary>
            Returns the arcsine of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acos(System.Double)">
            <summary>
            Returns the arccosine of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Atg(System.Double)">
            <summary>
            Returns the arctangent of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Actg(System.Double)">
            <summary>
            Returns the arccotangent of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asec(System.Double)">
            <summary>
            Returns the arcsecance of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acosc(System.Double)">
            <summary>
            Returns the arccosecant of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cos(UMapx.Core.Complex)">
            <summary>
            Returns the cosine of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sin(UMapx.Core.Complex)">
            <summary>
            Returns the sine of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Tg(UMapx.Core.Complex)">
            <summary>
            Returns the tangent of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ctg(UMapx.Core.Complex)">
            <summary>
            Returns the cotangent of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sec(UMapx.Core.Complex)">
            <summary>
            Returns the secant of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cosc(UMapx.Core.Complex)">
            <summary>
            Returns the cosecant of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acos(UMapx.Core.Complex)">
            <summary>
            Returns the arccosine of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asin(UMapx.Core.Complex)">
            <summary>
            Returns the arcsine of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Atg(UMapx.Core.Complex)">
            <summary>
            Returns the arctangent of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Actg(UMapx.Core.Complex)">
            <summary>
            Returns the arccotangent of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asec(UMapx.Core.Complex)">
            <summary>
            Returns the arcsecance of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acosc(UMapx.Core.Complex)">
            <summary>
            Returns the arccosecant of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sh(System.Double)">
            <summary>
            Returns the hyperbolic sine of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ch(System.Double)">
            <summary>
            Returns the hyperbolic cosine of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Th(System.Double)">
            <summary>
            Returns the hyperbolic tangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cth(System.Double)">
            <summary>
            Returns the hyperbolic cotangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sch(System.Double)">
            <summary>
            Returns the hyperbolic secant of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Csch(System.Double)">
            <summary>
            Returns the hyperbolic cosecant of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ash(System.Double)">
            <summary>
            Returns the hyperbolic arcsine of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ach(System.Double)">
            <summary>
            Returns the hyperbolic arccosine of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ath(System.Double)">
            <summary>
            Returns the hyperbolic arctangent of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acth(System.Double)">
            <summary>
            Returns the hyperbolic arccotangent of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asch(System.Double)">
            <summary>
            Returns the hyperbolic arcsecance of a number.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acsch(System.Double)">
            <summary>
            Returns the hyperbolic arccosecant of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sh(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic sine of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ch(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic cosine of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Th(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic tangent of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cth(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic cotangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sch(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic secant of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Csch(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic cosecant of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ash(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic arcsine of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ach(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic arccosine of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ath(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic arctangent of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acth(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic arccotangent of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asch(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic arcsecance of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acsch(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic arccosecant of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsPrime(System.Int32)">
            <summary>
            Checks if number is prime.
            <remarks>
            This method is based on enumerating all the divisors.
            </remarks>
            </summary>
            <param name="p">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsPrime(System.Int64)">
            <summary>
            Checks if number is prime.
            <remarks>
            This method is based on enumerating all the divisors.
            </remarks>
            </summary>
            <param name="p">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Coprime(System.Int32,System.Int32)">
            <summary>
            Returns coprime number.
            </summary>
            <param name="a">Integer number</param>
            <param name="increment">Increment</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Coprime(System.Int64,System.Int64)">
            <summary>
            Returns coprime number.
            </summary>
            <param name="a">Integer number</param>
            <param name="increment">Increment</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Mod(System.Int32,System.Int32)">
            <summary>
            Returns the remainder of dividing one number by another.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Mod(System.Int64,System.Int64)">
            <summary>
            Returns the remainder of dividing one number by another.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Mod(System.Double,System.Double)">
            <summary>
            Returns the remainder of dividing one number by another.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.ModPow(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the result of raising the number "a" to the power of "x" modulo p.
            </summary>
            <param name="a">Number</param>
            <param name="x">Power</param>
            <param name="p">Modulo</param>
            <param name="modified">Use modified algorithm or not</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.ModPow(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Returns the result of raising the number "a" to the power of "x" modulo p.
            </summary>
            <param name="a">Number</param>
            <param name="x">Power</param>
            <param name="p">Modulo</param>
            <param name="modified">Use modified algorithm or not</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.leftmodexp(System.Int64,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Maths.rightmodexp(System.Int64,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Maths.ModInv(System.Int32,System.Int32)">
            <summary>
            Returns the inverse number modulo.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.ModInv(System.Int64,System.Int64)">
            <summary>
            Returns the inverse number modulo.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Euclidean(System.Int32,System.Int32)">
            <summary>
            Implements a generalized Euclidean algorithm.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Euclidean(System.Int64,System.Int64)">
            <summary>
            Implements a generalized Euclidean algorithm.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Gcd(System.Int32,System.Int32)">
            <summary>
            Returns the value of the greatest common divisor of two numbers.
            </summary>
            <param name="a">Integer number</param>
            <param name="b">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Gcd(System.Int64,System.Int64)">
            <summary>
            Returns the value of the greatest common divisor of two numbers.
            </summary>
            <param name="a">Integer number</param>
            <param name="b">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Lcm(System.Int32,System.Int32)">
            <summary>
            Returns the value of the least common multiple of two numbers.
            </summary>
            <param name="a">Integer number</param>
            <param name="b">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Lcm(System.Int64,System.Int64)">
            <summary>
            Returns the value of the least common multiple of two numbers.
            </summary>
            <param name="a">Integer number</param>
            <param name="b">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Itf(System.Int32,System.Boolean)">
            <summary>
            Returns an array of factors that number consists of.
            </summary>
            <param name="n">Integer number</param>
            <param name="onlyPrimes">Only prime factors or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Itf(System.Int64,System.Boolean)">
            <summary>
            Returns an array of factors that number consists of.
            </summary>
            <param name="n">Integer number</param>
            <param name="onlyPrimes">Only prime factors or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pollard(System.Int32)">
            <summary>
            Returns the P0-divider.
            </summary>
            <param name="n">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pollard(System.Int64)">
            <summary>
            Returns the P0-divider.
            </summary>
            <param name="n">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Etf(System.Int32)">
            <summary>
            Returns the value of the Euler function.
            </summary>
            <param name="n">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Etf(System.Int64)">
            <summary>
            Returns the value of the Euler function.
            </summary>
            <param name="n">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sieve(System.Int32)">
            <summary>
            Implements a sieve for finding prime numbers.
            <remarks>
            Recursive implementation of a memory-optimized segmented sieve of Eratosthenes. 
            The operational complexity of the O(N* logN) algorithm.The memory complexity is O(Δ), where Δ = sqrt(N).
            </remarks>
            </summary>
            <param name="limit">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Radical(System.Int32)">
            <summary>
            Returns the radical of an integer.
            </summary>
            <param name="n">Number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Radical(System.Int64)">
            <summary>
            Returns the radical of an integer.
            </summary>
            <param name="n">Number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Decimal2Base(System.Int64,System.Int32)">
            <summary>
            Returns a vector representing the decimal number in the given number system.
            <remarks>
            Example: 10[10] = {1,0,1,0}[2].
            </remarks>
            </summary>
            <param name="x">Byte</param>
            <param name="newbase">Base</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Base2Decimal(System.Int32[],System.Int32)">
            <summary>
            Returns the decimal Number represented in decimal notation.
            <remarks>
            Example: {1,0,1,0}[2] = 10[10].
            </remarks>
            </summary>
            <param name="x">Array</param>
            <param name="thisbase">Base</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Vector2Numeral(System.Int32[])">
            <summary>
            Returns a number that interprets the specified vector in decimal.
            <remarks>
            Example: {1,0,1,0}[2] = 1010[10].
            </remarks>
            </summary>
            <param name="x">Array</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Numeral2Vector(System.Int64)">
            <summary>
            Returns a vector representing the decomposition of a decimal number into components.
            <remarks>
            Example: 1010[10] = {1,0,1,0}[2]
            </remarks>
            </summary>
            <param name="x">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.NumLength(System.Int64,System.Int32)">
            <summary>
            Returns the value of the digit capacity of a number in the given number system.
            </summary>
            <param name="x">Byte</param>
            <param name="numbase">Base</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Hypotenuse(System.Double,System.Double)">
            <summary>
            Returns the value of the hypotenuse.
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cubic(System.Double,System.Double,System.Double)">
            <summary>
            Implements the solution of a cubic equation of the form:
            x^3 + a*x^2 + b*x + c = 0.
            </summary>
            <param name="a">Coefficient "a"</param>
            <param name="b">Coefficient "b"</param>
            <param name="c">Coefficient "c"</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Quadratic(System.Double,System.Double,System.Double)">
            <summary>
            Implements a solution to a quadratic equation of the form: 
            a*x^2 + b*x + c = 0.
            </summary>
            <param name="a">Coefficient "a"</param>
            <param name="b">Coefficient "b"</param>
            <param name="c">Coefficient "c"</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.BiQuadratic(System.Double,System.Double,System.Double)">
            <summary>
            Implements the solution of a biquadratic equation of the form:
            a*x^4 + b*x^2 + c = 0.
            </summary>
            <param name="a">Coefficient "a"</param>
            <param name="b">Coefficient "b"</param>
            <param name="c">Coefficient "c"</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Rotation(System.Double,System.Double)">
            <summary>
            Implements the construction of the Givens rotation matrix for a pair of real numbers.
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Rotation(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            Implements the construction of the Givens rotation matrix for a pair of real numbers.
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Normalize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Normalizes a variable relative to the {min, max} range.
            </summary>
            <param name="x">Value</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Normalize(System.Double,System.Double,System.Double)">
            <summary>
            Normalizes a variable relative to the {min, max} range.
            </summary>
            <param name="x">Value</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Core.Distance">
            <summary>
            Uses to calculate distances.
            </summary>
        </member>
        <member name="M:UMapx.Core.Distance.Euclidean(System.Double[],System.Double[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Chebyshev(System.Double[],System.Double[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Manhattan(System.Double[],System.Double[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Angular(System.Double[],System.Double[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.BrayCurtis(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Canberra(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Dice(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Hellinger(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Jaccard(System.Double[],System.Double[])">
            <summary>
            Returns distance value".
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Kulczynski(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Minkowski(System.Double[],System.Double[],System.Double)">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <param name="order">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.RusselRao(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.SokalMichener(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.SokalSneath(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Yule(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.SquareEuclidian(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Core.Binary">
            <summary>
            Uses for binary serialization of objects.
            </summary>
        </member>
        <member name="M:UMapx.Core.Binary.Save(System.IO.Stream,System.Object)">
            <summary>
            Save data from the file.
            </summary>
            <param name="stream">Stream</param>
            <param name="o">Object</param>
        </member>
        <member name="M:UMapx.Core.Binary.Save(System.String,System.Object)">
            <summary>
            Save data from the file.
            </summary>
            <param name="fileName">File name</param>
            <param name="o">Object</param>
        </member>
        <member name="M:UMapx.Core.Binary.Load(System.IO.Stream)">
            <summary>
            Load data from the file.
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="M:UMapx.Core.Binary.Load(System.String)">
            <summary>
            Load data from the file.
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="T:UMapx.Core.Xml">
            <summary>
            Uses for Xml serialization of objects.
            </summary>
        </member>
        <member name="M:UMapx.Core.Xml.Save(System.IO.Stream,System.Object)">
            <summary>
            Save data from the file.
            </summary>
            <param name="stream">Stream</param>
            <param name="o">Object</param>
        </member>
        <member name="M:UMapx.Core.Xml.Save(System.String,System.Object)">
            <summary>
            Save data from the file.
            </summary>
            <param name="fileName">File name</param>
            <param name="o">Object</param>
        </member>
        <member name="M:UMapx.Core.Xml.Load(System.IO.Stream,System.Type)">
            <summary>
            Load data from the file.
            </summary>
            <param name="stream">Stream</param>
            <param name="type">Type</param>
        </member>
        <member name="M:UMapx.Core.Xml.Load(System.String,System.Type)">
            <summary>
            Load data from the file.
            </summary>
            <param name="fileName">File name</param>
            <param name="type">Type</param>
        </member>
        <member name="T:UMapx.Core.Special">
            <summary>
            Uses to implement special mathematical functions.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Special_functions
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.LogMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.LogMin">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.sqrtPI">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Core.Special.Ci(System.Double)">
            <summary>
            Returns the value of the integral cosine.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Si(System.Double)">
            <summary>
            Returns the value of the integral sine.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Ei(System.Double)">
            <summary>
            Returns the value of an integral exponential function.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Li(System.Double)">
            <summary>
            Returns the value of the integral logarithm.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Fresnelc(System.Double)">
            <summary>
            Returns the value of the Fresnel integral C (x).
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Fresnels(System.Double)">
            <summary>
            Returns the value of the Fresnel integral S(x).
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.H(System.Double,System.Int32)">
            <summary>
            Returns the value of the Struve function.
            </summary>
            <param name="x">Number</param>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.L(System.Double,System.Int32)">
            <summary>
            Returns the value of the modified Struve function.
            </summary>
            <param name="x">Number</param>
            <param name="v">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Beta(System.Double,System.Double)">
            <summary>
            Returns the value of the beta function: B(a, b) = Г(a) * Г(b) / Г(ab).
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Beta(System.Int32,System.Int32)">
            <summary>
            Returns the value of the beta function: B(m, n) = (m - 1)! * (n - 1)! / (m + n - 1)!.
            </summary>
            <param name="m">Integer number</param>
            <param name="n">Integer number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Beta(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of an incomplete beta function: Bx(a, b).
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.BetaDerivative(System.Double,System.Double)">
            <summary>
            Returns the value of a derivative beta function: B'(a, b).
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.BetaIncomplete(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of a regularized incomplete beta function: Ix(a, b).
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Incbcf(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Special.Incbd(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Special.Series(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="F:UMapx.Core.Special.GammaMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.Px">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.Qx">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Core.Special.Gamma(System.Double)">
            <summary>
            Returns the value of the Euler Gamma function: Г(z).
            </summary>
            <param name="z">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaLog(System.Double)">
            <summary>
            Returns the value of the natural logarithm of the Euler Gamma function: ln[Г(z)].
            </summary>
            <param name="z">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.DiGamma(System.Double)">
            <summary>
            Returns the value of the Digamma function: ψ(z).
            </summary>
            <param name="z">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.TriGamma(System.Double)">
            <summary>
            Returns the value of the Trigamma function: ψ1(z).
            </summary>
            <param name="z">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gamma(System.Double,System.UInt32)">
            <summary>
            Returns the value of the degree of the Euler Gamma function: Г(z)^p.
            </summary>
            <param name="z">Number</param>
            <param name="p">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaQ(System.Double,System.Double)">
            <summary>
            Returns the value of the incomplete upper Gamma function: Q(s, x) = Γ(s, x) / Γ(s).
            </summary>
            <param name="s">Number</param>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaP(System.Double,System.Double)">
            <summary>
            Returns the value of an incomplete lower Gamma function: P(s, x) = γ(s, x) / Γ(s).
            </summary>
            <param name="s">Number</param>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaIncomplete(System.Double,System.Double)">
            <summary>
            Returns the value of an incomplete Gamma function: γ(s, x).
            </summary>
            <param name="s">Number</param>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaIncomplete(System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the value of an incomplete Gamma function: γ(s, x).
            </summary>
            <param name="s">Number</param>
            <param name="x">Number</param>
            <param name="complemented">Additional function or not</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Polynomials(System.Double,System.Double[],System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="coef"></param>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Special.Stirling(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaLogLanczos(System.Double)">
            <summary>
            
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(System.Double)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(System.Double,System.Boolean)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="inverse">Reverse function or not</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfi(System.Double)">
            <summary>
            Returns the value of the imaginary error function.
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="a">The lower boundary of the normalization</param>
            <param name="b">The upper limit of the normalization</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(System.Double,UMapx.Core.RangeDouble)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="range">A pair of fractional numbers</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfc(System.Double)">
            <summary>
            Returns the value of the Laplace integral (an additional error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfc(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of the Laplace integral (an additional error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="a">The lower boundary of the normalization</param>
            <param name="b">The upper limit of the normalization</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfc(System.Double,UMapx.Core.RangeDouble)">
            <summary>
            Returns the value of the Laplace integral (an additional error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="range">A pair of fractional numbers</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Q(System.Double,System.Boolean)">
            <summary>
            Returns the value of a Q function.
            </summary>
            <param name="x">Argument</param>
            <param name="inverse">Inverse function or not</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.J0(System.Double)">
            <summary>
            Returns the value of the Bessel function of the first kind at a = 0.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.J1(System.Double)">
            <summary>
            Returns the value of the Bessel function of the first kind at a = 1.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.J(System.Double,System.Int32)">
            <summary>
            Returns the value of a Bessel function of the first kind.
            </summary>
            <param name="x">Number</param>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Y0(System.Double)">
            <summary>
            Returns the value of the Bessel function of the second kind at a = 0.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Y1(System.Double)">
            <summary>
            Returns the value of the Bessel function of the second kind at a = 1.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Y(System.Double,System.Int32)">
            <summary>
            Returns the value of a Bessel function of the second kind.
            </summary>
            <param name="x">Number</param>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.I0(System.Double)">
            <summary>
            Returns the value of the modified Bessel function of the first kind at a = 0.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.I1(System.Double)">
            <summary>
            Returns the value of the modified Bessel function of the first kind at a = 1.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.I(System.Double,System.Int32)">
            <summary>
            Returns the value of the modified Bessel function of the first kind.
            </summary>
            <param name="x">Number</param>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.K0(System.Double)">
            <summary>
            Returns the value of the modified Bessel function of the second kind at a = 0.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.K1(System.Double)">
            <summary>
            Returns the value of the modified Bessel function of the second kind at a = 1.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.K(System.Double,System.Int32)">
            <summary>
            Returns the value of the modified Bessel function of the second kind.
            </summary>
            <param name="x">Number</param>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Owen(System.Double,System.Double)">
            <summary>
            Returns the value of the Owen T function.
            </summary>
            <param name="h">First argument</param>
            <param name="a">Second argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.owenhaah(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of the Owen T function.
            </summary>
            <param name="h">First argument</param>
            <param name="a">Second argument</param>
            <param name="ah">h * a</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="F:UMapx.Core.Special.arange">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.coefT">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.hrange">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.meth">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.ord">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.pts">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.select">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.wts">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Core.Special.Agd(System.Double)">
            <summary>
            Returns the value of the inverse Guderman function.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gd(System.Double)">
            <summary>
            Returns the value of the Guderman function.
            </summary>
            <param name="x">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Cas(System.Double)">
            <summary>
            Returns the value of the function Cas(x).
            </summary>
            <param name="theta">Theta</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Sinc(System.Double)">
            <summary>
            Returns the value of the normalized cardinal sine function: f(x) = sin(πx) / (πx).
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Sinc(System.Double,System.Double)">
            <summary>
            Returns the value of the cardinal sine function with the parameter: f(x, a) = sin(ax) / (ax).
            </summary>
            <param name="x">Number</param>
            <param name="a">Parameter</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Binomial(System.Double,System.Double)">
            <summary>
            Returns the value of binomial coefficients: C(n, k) = n! / k! / (n-k)! для k > 0.
            </summary>
            <param name="n">Number</param>
            <param name="k">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.LogBinomial(System.Double,System.Double)">
            <summary>
            Returns the natural logarithm of binomial coefficients: log(C(n, k)) = log(n!) - log(k!) - log(n-k!).
            </summary>
            <param name="n">Number</param>
            <param name="k">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.LogFactorial(System.Double)">
            <summary>
            Returns the natural logarithm of the factorial of a number log(n!).
            </summary>
            <param name="n">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Factorial(System.Double)">
            <summary>
            Returns the factorial of a number.
            </summary>
            <param name="n">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.FactorialDown(System.Double,System.Double)">
            <summary>
            Returns the decreasing factorial of a number.
            </summary>
            <param name="n">Number</param>
            <param name="k">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.FactorialUp(System.Double,System.Double)">
            <summary>
            Returns the increasing factorial of a number (Pohhammer symbol).
            </summary>
            <param name="n">Number</param>
            <param name="k">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Fibonacci(System.Int32)">
            <summary>
            Returns the value of the Fibonacci number.
            </summary>
            <param name="n">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Lucas(System.Int32)">
            <summary>
            Returns the value of the Luca number.
            </summary>
            <param name="n">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Bernoulli(System.Int32)">
            <summary>
            Returns the Bernoulli number.
            </summary>
            <param name="n">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Bernoulli(System.Int32,System.Double)">
            <summary>
            Returns the value of the Bernoulli polynomial.
            </summary>
            <param name="n">Order</param>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Euler(System.Int32)">
            <summary>
            Returns the Euler number.
            </summary>
            <param name="n">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Euler(System.Int32,System.Double)">
            <summary>
            Returns the value of the Euler polynomial.
            </summary>
            <param name="n">Order</param>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Harm(System.Int32)">
            <summary>
            Returns the harmonic number.
            </summary>
            <param name="n">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Harm(System.Int32,System.Double)">
            <summary>
            Returns the harmonic number.
            </summary>
            <param name="n">Order</param>
            <param name="m">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.ChebyshevT(System.Double,System.Int32)">
            <summary>
            Returns the value of the Chebyshev polynomial of the first kind.
            </summary>
            <param name="x">Argument</param>
            <param name="n">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.ChebyshevU(System.Double,System.Int32)">
            <summary>
            Returns the value of the Chebyshev polynomial of the second kind.
            </summary>
            <param name="x">Argument</param>
            <param name="n">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Abel(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the value of the Abel polynomial.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Power</param>
            <param name="n">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Laguerre(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the value of the Laguerre polynomial.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Power</param>
            <param name="k">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Legendre(System.Double,System.Int32)">
            <summary>
            Returns the value of the Legendre polynomial of the first kind.
            </summary>
            <param name="x">Argument</param>
            <param name="m">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Hermite(System.Double,System.Int32)">
            <summary>
            Returns the value of the Hermite polynomial.
            </summary>
            <param name="x">Argument</param>
            <param name="m">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gegenbauer(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the value of the Gegenbauer polynomial.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Power</param>
            <param name="n">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Mahler(System.Double,System.Double)">
            <summary>
            Returns the value of the Mahler polynomial.
            </summary>
            <param name="x">Number</param>
            <param name="t">Parameter</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gompertz(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the value of the Gompertz function.
            </summary>
            <param name="t">Argument</param>
            <param name="a">Upper asymptote</param>
            <param name="b">Growth parameter</param>
            <param name="c">Growth rate</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Heaviside(System.Double,System.Double)">
            <summary>
            Returns the value of the Heaviside delta function.
            </summary>
            <param name="x">Argument</param>
            <param name="k">Smoothing factor</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Logistic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Lower asymptote</param>
            <param name="k">Upper asymptote</param>
            <param name="b">Growth rate</param>
            <param name="v">Affect</param>
            <param name="q">Central moment</param>
            <param name="c">Offset</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Logistic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Lower asymptote</param>
            <param name="k">Upper asymptote</param>
            <param name="b">Growth rate</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Logistic(System.Double)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Dirac(System.Double,System.Double)">
            <summary>
            Returns the value of the Dirac delta function.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Coefficient</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Dawson(System.Double,System.Boolean)">
            <summary>
            Returns the value of the D- / D + Dawson function.
            </summary>
            <param name="x">Argument</param>
            <param name="positive">D- или D+</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Hypergeom(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of a hypergeometric function.
            <remarks>
            This version of the hypergeometric function is found in the Russian literature and is indicated: F(a,b,c,z).
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hypergeometric_function
            </remarks>
            </summary>
            <param name="a">Parameter</param>
            <param name="b">Parameter</param>
            <param name="c">Parameter</param>
            <param name="z">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Hypergeom(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of a hypergeometric function.
            <remarks>
            The hypergeometric function can be used in several variations:
            F(a,b,z); F(a,~,z); F(~,b,z); F(~,~,z).
            Instead of the “~” sign, use the double.NaN value.
            More information can be found on the website:
            https://www.mathworks.com/help/symbolic/hypergeom.html#bt1nkmw-2
            </remarks>
            </summary>
            <param name="a">Parameter</param>
            <param name="b">Parameter</param>
            <param name="z">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gerf(System.Double,System.Int32)">
            <summary>
            Returns the value of the generalized error function.
            </summary>
            <param name="x">Argument (0, +inf)</param>
            <param name="n">Order [0, +inf)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gerf(System.Double)">
            <summary>
            Returns the value of the generalized error function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Rademacher(System.Double,System.Int32)">
            <summary>
            Returns the value of the Radamecher function.
            </summary>
            <param name="t">Argument [0, 1]</param>
            <param name="n">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erlang(System.Double,System.Int32,System.Double)">
            <summary>
            Returns the value of the Erlang C-function.
            </summary>
            <param name="y">Firset parameter</param>
            <param name="v">Second parameter</param>
            <param name="t">Time parameter</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erlang(System.Double,System.Int32)">
            <summary>
            Returns the value of the Erlang B-function.
            </summary>
            <param name="y">Firset parameter</param>
            <param name="v">Second parameter</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.LambertW(System.Double,System.Boolean)">
            <summary>
            Returns the value of the Lambert W-function.
            </summary>
            <param name="x">Argument [-1/e,+inf)</param>
            <param name="branch">Function branch</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Ssqrt(System.Double,System.Boolean)">
            <summary>
            Returns the value of the square super-root.
            </summary>
            <param name="x">Argument [1,+inf)</param>
            <param name="branch">Function branch</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Minkowski(System.Double)">
            <summary>
            Returns the value of the Minkowski function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="F:UMapx.Core.Special.A027641">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.A000142">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.A122045">
            <summary>
            
            </summary>
        </member>
        <member name="T:UMapx.Core.Kernel">
            <summary>
            Uses to work with kernel functions.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Kernel_(statistics)
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Core.Kernel.Bicubic(System.Double)">
            <summary>
            Returns the value of a bicubic function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Gaussian(System.Double,System.Double)">
            <summary>
            Returns the value of a Gaussian function.
            </summary>
            <param name="x">Argument</param>
            <param name="sigma">Standard deviation (0, +inf)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Gaussian(System.Double)">
            <summary>
            Returns the value of a Gaussian function σ = 1.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Lanczos(System.Double,System.Double)">
            <summary>
            Returns the value of the Lanczos function.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Parameter</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Lanczos(System.Double)">
            <summary>
            Returns the value of the Lanczos function, with a = 1.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Uniform(System.Double)">
            <summary>
            Returns the value of a uniform function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Triangular(System.Double)">
            <summary>
            Returns the value of a triangular function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Trapezoid(System.Double)">
            <summary>
            Returns the value of the trapezoid function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Epanechnikov(System.Double)">
            <summary>
            Returns the value of the Epanechnikov function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Quartic(System.Double)">
            <summary>
            Returns the value of a Q function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Triweight(System.Double)">
            <summary>
            Returns the value of a T-function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Tricube(System.Double)">
            <summary>
            Returns the value of a tricubic function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Cosine(System.Double)">
            <summary>
            Returns the value of the cosine function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Logistic(System.Double)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Sigmoid(System.Double)">
            <summary>
            Returns the value of a sigmoid function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Silverman(System.Double)">
            <summary>
            Returns the value of the Silverman function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Core.IDouble">
            <summary>
            Defines the delegate of a continuous function that depends on a single argument.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Core.IComplex">
            <summary>
            Defines the delegate of a continuous function that depends on a single argument.
            </summary>
            <param name="x">Argument</param>
            <returns>Complex number</returns>
        </member>
        <member name="T:UMapx.Core.IDoubleMesh">
            <summary>
            Defines the delegate of a continuous function that depends on two arguments.
            </summary>
            <param name="x">First argument</param>
            <param name="y">Second argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Core.IComplexMesh">
            <summary>
            Defines the delegate of a continuous function that depends on two arguments.
            </summary>
            <param name="x">First argument</param>
            <param name="y">Second argument</param>
            <returns>Complex number</returns>
        </member>
        <member name="T:UMapx.Core.Matrice">
            <summary>
            Uses to implement standard algebraic operations on matrices and vectors.
            </summary>
        </member>
        <member name="M:UMapx.Core.Matrice.IsEquals(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Checks the equality of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsEquals(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Checks the equality of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsVector(System.Double[0:,0:])">
            <summary>
            Checks if the matrix is a vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSquare(System.Double[0:,0:])">
            <summary>
            Checks if the matrix is square.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsPositive(System.Double[0:,0:])">
            <summary>
            Checks if the matrix is positive.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSymmetric(System.Double[0:,0:])">
            <summary>
            Checks if the matrix is symmetric.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSkewSymmetric(System.Double[0:,0:])">
            <summary>
            Checks if the matrix is skew-symmetric.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsDiagonal(System.Double[0:,0:])">
            <summary>
            Checks if the matrix is diagonal.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsVector(UMapx.Core.Complex[0:,0:])">
            <summary>
            Checks if the matrix is a vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSquare(UMapx.Core.Complex[0:,0:])">
            <summary>
            Checks if the matrix is square.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSymmetric(UMapx.Core.Complex[0:,0:])">
            <summary>
            Checks if the matrix is symmetric (Hermitian).
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSkewSymmetric(UMapx.Core.Complex[0:,0:])">
            <summary>
            Checks if the matrix is skew-symmetric (anti-Hermitian).
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsDiagonal(UMapx.Core.Complex[0:,0:])">
            <summary>
            Checks if the matrix is diagonal.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Invert(System.Double[0:,0:])">
            <summary>
            Implements the matrix inversion operation.
            </summary>
            <param name="m">Square matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Transponate(System.Double[0:,0:])">
            <summary>
            Implements the transpose of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Invert(UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements the matrix inversion operation.
            </summary>
            <param name="m">Square matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Transponate(UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements the transpose of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conjugate(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the complex conjugate matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hermitian(UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements the Hermitian-conjugation operation of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Trace(System.Double[0:,0:])">
            <summary>
            Returns the trace value of a square matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Det(System.Double[0:,0:])">
            <summary>
            Returns the value of the matrix determinant.
            </summary>
            <param name="m">Matrix</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(System.Double[0:,0:],System.Double)">
            <summary>
            Returns the P-norm of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="p">Parameter p</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(System.Double[0:,0:])">
            <summary>
            Returns the norm of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Round(System.Double[0:,0:],System.Int32,System.MidpointRounding)">
            <summary>
            Selects the integer part of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="digits">Digits</param>
            <param name="mode">Midpoint rounding</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Permutation(System.Double[0:,0:])">
            <summary>
            Implements the construction of a square permutation matrix.
            </summary>
            <param name="m">Square matrix</param>
            <returns>Square matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Trace(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the trace value of a square matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Det(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the value of the matrix determinant.
            </summary>
            <param name="m">Matrix</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Returns the P-norm of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="p">Parameter p</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the norm of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Round(UMapx.Core.Complex[0:,0:],System.Int32,System.MidpointRounding)">
            <summary>
            Selects the integer part of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="digits">Digits</param>
            <param name="mode">Midpoint rounding</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Kronecker(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the Kronecker matrix product.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Kronecker(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the Kronecker matrix product.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Kronecker(UMapx.Core.Complex[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the Kronecker matrix product.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Kronecker(System.Double[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the Kronecker matrix product.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the sum of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the sum of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the sum of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the sum of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[0:,0:],System.Double)">
            <summary>
            Returns the sum of a matrix and a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex)">
            <summary>
            Returns the sum of a matrix and a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Returns the sum of a matrix and a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[0:,0:],UMapx.Core.Complex)">
            <summary>
            Returns the sum of a matrix and a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double,System.Double[0:,0:])">
            <summary>
            Returns the sum of a number and a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex,UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the sum of a number and a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex,System.Double[0:,0:])">
            <summary>
            Returns the sum of a number and a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double,UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the sum of a number and a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[0:,0:],System.Double[0:,0:])">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[0:,0:],System.Double)">
            <summary>
            Subtracts a number from the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex)">
            <summary>
            Subtracts a number from the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Subtracts a number from the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[0:,0:],UMapx.Core.Complex)">
            <summary>
            Subtracts a number from the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double,System.Double[0:,0:])">
            <summary>
            Subtracts a matrix from a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex,UMapx.Core.Complex[0:,0:])">
            <summary>
            Subtracts a matrix from a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex,System.Double[0:,0:])">
            <summary>
            Subtracts a matrix from a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double,UMapx.Core.Complex[0:,0:])">
            <summary>
            Subtracts a matrix from a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[0:,0:],System.Double[0:,0:])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[0:,0:],System.Double)">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex)">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[0:,0:],UMapx.Core.Complex)">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double,System.Double[0:,0:])">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex,UMapx.Core.Complex[0:,0:])">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex,System.Double[0:,0:])">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double,UMapx.Core.Complex[0:,0:])">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Divides a matrix by a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Divides a matrix by a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[0:,0:],System.Double[0:,0:])">
            <summary>
            Divides a matrix by a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Divides a matrix by a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[0:,0:],System.Double)">
            <summary>
            Divides all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex)">
            <summary>
            Divides all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Divides all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[0:,0:],UMapx.Core.Complex)">
            <summary>
            Divides all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double,System.Double[0:,0:])">
            <summary>
            Divides number into matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex,UMapx.Core.Complex[0:,0:])">
            <summary>
            Divides number into matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex,System.Double[0:,0:])">
            <summary>
            Divides number into matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double,UMapx.Core.Complex[0:,0:])">
            <summary>
            Divides number into matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Raises all matrix elements to a power.
            </summary>
            <param name="m">Matrix</param>
            <param name="pow">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double[0:,0:],UMapx.Core.Complex)">
            <summary>
            Raises all matrix elements to a power.
            </summary>
            <param name="m">Matrix</param>
            <param name="pow">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double[0:,0:],System.Double)">
            <summary>
            Raises all matrix elements to a power.
            </summary>
            <param name="m">Matrix</param>
            <param name="pow">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double,System.Double[0:,0:])">
            <summary>
            Raises the number to the power of the matrix.
            </summary>
            <param name="a">Number</param>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(UMapx.Core.Complex,System.Double[0:,0:])">
            <summary>
            Raises the number to the power of the matrix.
            </summary>
            <param name="a">Number</param>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double,UMapx.Core.Complex[0:,0:])">
            <summary>
            Raises the number to the power of the matrix.
            </summary>
            <param name="a">Number</param>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Log(System.Double[0:,0:],System.Double)">
            <summary>
            Logarithms all elements of the matrix at the base.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Exp(System.Double[0:,0:])">
            <summary>
            Takes an exponent from all matrix values.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Log(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Logarithms all elements of the matrix at the base.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Exp(UMapx.Core.Complex[0:,0:])">
            <summary>
            Takes an exponent from all matrix values.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Negate(System.Double[0:,0:])">
            <summary>
            Negates all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Negate(UMapx.Core.Complex[0:,0:])">
            <summary>
            Negates all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToComplex(System.Double[0:,0:])">
            <summary>
            Returns a complex matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToByte(System.Double[0:,0:])">
            <summary>
            Returns a matrix whose values belong to the interval [0, 255].
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToDouble(System.Double[0:,0:])">
            <summary>
            Returns a matrix whose values belong to the interval [0, 1].
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Abs(System.Double[0:,0:])">
            <summary>
            Takes a module for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Abs(UMapx.Core.Complex[0:,0:])">
            <summary>
            Takes a module for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(UMapx.Core.Complex[0:,0:])">
            <summary>
            Takes an angle for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Real(UMapx.Core.Complex[0:,0:])">
            <summary>
            Takes the real part for all elements of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Imag(UMapx.Core.Complex[0:,0:])">
            <summary>
            Takes the imaginary part for all elements of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sort(System.Double[0:,0:])">
            <summary>
            Sorts the matrix.
            </summary>
            <param name="m">Matrix</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Sum(System.Double[0:,0:])">
            <summary>
            Returns the vector of matrix sums.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sum(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the vector of matrix sums.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[0:,0:])">
            <summary>
            Returns the matrix product vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the matrix product vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[0:,0:])">
            <summary>
            Returns the matrix divide vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the matrix divide vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Double[0:,0:])">
            <summary>
            Returns the maximum matrix vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Double[0:,0:])">
            <summary>
            Returns the minimum matrix vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Morph(System.Double[0:,0:],System.Int32)">
            <summary>
            Returns the matrix vector corresponding to the specified threshold value.
            </summary>
            <param name="m">Matrix</param>
            <param name="threshold">Threshold</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Double[0:,0:])">
            <summary>
            Returns the vector of means of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the vector of means of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(System.Double[0:,0:])">
            <summary>
            Returns the vector of variances of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the vector of variances of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the vector of variances of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the vector of variances of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(System.Double[0:,0:])">
            <summary>
            Returns the standard deviation vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the standard deviation vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the standard deviation vector of the matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the standard deviation vector of the matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cov(System.Double[0:,0:])">
            <summary>
            Returns the covariance matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cov(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the covariance matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Entropy(System.Double[0:,0:])">
            <summary>
            Returns the entropy vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Implements a scalar product of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements a scalar product of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[0:,0:],System.Double[0:,0:])">
            <summary>
            Implements a scalar product of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements a scalar product of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Double[0:,0:],System.Double[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex[0:,0:],System.Double[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Double[0:,0:],UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Double[0:,0:],System.Double[],UMapx.Core.Direction,System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Double[0:,0:],UMapx.Core.Complex[],UMapx.Core.Direction,System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex[0:,0:],System.Double[],UMapx.Core.Direction,System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[],UMapx.Core.Direction,System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the matrix result of morphological minimum.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the matrix result of morphological maximum.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Morph(System.Double[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the matrix result of morphology.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
            <param name="threshold">Threshold</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the result matrix of local averaging.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the result matrix of local averaging.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.IsEquals(System.Double[],System.Double[])">
            <summary>
            Checks the equality of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsEquals(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Checks the equality of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsPositive(System.Double[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="v">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsCollinear(System.Double[],System.Double[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsCollinear(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsCollinear(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsCollinear(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(System.Double[],System.Double)">
            <summary>
            Returns the P-norm of the vector.
            </summary>
            <param name="a">Array</param>
            <param name="p">Parameter p</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(System.Double[])">
            <summary>
            Returns the norm of the vector.
            </summary>
            <param name="a">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(UMapx.Core.Complex[],System.Double)">
            <summary>
            Returns the P-norm of the vector.
            </summary>
            <param name="a">Array</param>
            <param name="p">Parameter p</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(UMapx.Core.Complex[])">
            <summary>
            Returns the norm of the vector.
            </summary>
            <param name="a">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Round(System.Double[],System.Int32,System.MidpointRounding)">
            <summary>
            Selects the integer part of the matrix.
            </summary>
            <param name="m">Array</param>
            <param name="digits">Digits</param>
            <param name="mode">Midpoint rounding</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Round(UMapx.Core.Complex[],System.Int32,System.MidpointRounding)">
            <summary>
            Selects the integer part of the matrix.
            </summary>
            <param name="m">Array</param>
            <param name="digits">Digits</param>
            <param name="mode">Midpoint rounding</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(System.Double[],System.Double[])">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Proj(System.Double[],System.Double[])">
            <summary>
            Returns the projection of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Proj(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Returns the projection of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Proj(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Returns the projection of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Proj(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the projection of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cosines(System.Double[])">
            <summary>
            Returns the direction cosines of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cosines(UMapx.Core.Complex[])">
            <summary>
            Returns the direction cosines of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[],System.Double[])">
            <summary>
            Returns the sum of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the sum of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Returns the sum of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Returns the sum of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[],System.Double)">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[],System.Double)">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[],UMapx.Core.Complex)">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double,System.Double[])">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex,UMapx.Core.Complex[])">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double,UMapx.Core.Complex[])">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex,System.Double[])">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Subtracts one vector from another.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[],System.Double[])">
            <summary>
            Subtracts one vector from another.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Subtracts one vector from another.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Subtracts one vector from another.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[],System.Double)">
            <summary>
            Subtracts a number from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            Subtracts a number from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[],System.Double)">
            <summary>
            Subtracts a number from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[],UMapx.Core.Complex)">
            <summary>
            Subtracts a number from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double,System.Double[])">
            <summary>
            Subtracts a vector from a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex,UMapx.Core.Complex[])">
            <summary>
            Subtracts a vector from a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex,System.Double[])">
            <summary>
            Subtracts a vector from a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double,UMapx.Core.Complex[])">
            <summary>
            Subtracts a vector from a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[],System.Double[])">
            <summary>
            Implements element-wise product of vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Implements element-wise product of vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Implements element-wise product of vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Implements element-wise product of vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[],System.Double)">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[],UMapx.Core.Complex)">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[],System.Double)">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double,System.Double[])">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex,UMapx.Core.Complex[])">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex,System.Double[])">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double,UMapx.Core.Complex[])">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[],System.Double[])">
            <summary>
            Divides a vector by a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Divides a vector by a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Divides a vector by a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Divides a vector by a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[],System.Double)">
            <summary>
            Divides a vector by a number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[],UMapx.Core.Complex)">
            <summary>
            Divides a vector by a number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[],System.Double)">
            <summary>
            Divides a vector by a number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            Divides a vector by a number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double,System.Double[])">
            <summary>
            Divides a number by a vector.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex,UMapx.Core.Complex[])">
            <summary>
            Divides a number by a vector.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double,UMapx.Core.Complex[])">
            <summary>
            Divides a number by a vector.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex,System.Double[])">
            <summary>
            Divides a number by a vector.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double[],System.Double)">
            <summary>
            Raises the elements of a vector to a power.
            </summary>
            <param name="v">Array</param>
            <param name="power">Power</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(UMapx.Core.Complex[],System.Double)">
            <summary>
            Raises the elements of a vector to a power.
            </summary>
            <param name="v">Array</param>
            <param name="power">Power</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double[],UMapx.Core.Complex)">
            <summary>
            Raises the elements of a vector to a power.
            </summary>
            <param name="v">Array</param>
            <param name="power">Power</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double,System.Double[])">
            <summary>
            Raises the number to the power of the vector.
            </summary>
            <param name="a">Number</param>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(UMapx.Core.Complex,System.Double[])">
            <summary>
            Raises the number to the power of the vector.
            </summary>
            <param name="a">Number</param>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double,UMapx.Core.Complex[])">
            <summary>
            Raises the number to the power of the vector.
            </summary>
            <param name="a">Number</param>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Log(System.Double[],System.Double)">
            <summary>
            Logarithms the elements of the vector base.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Log(UMapx.Core.Complex[],System.Double)">
            <summary>
            Logarithms the elements of the vector base.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Exp(System.Double[])">
            <summary>
            Takes an exponent from all vector values.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Exp(UMapx.Core.Complex[])">
            <summary>
            Takes an exponent from all vector values.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToDouble(System.Double[])">
            <summary>
            Returns a vector whose values belong to the interval [0, 1].
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToByte(System.Double[])">
            <summary>
            Returns a vector whose values belong to the interval [0, 255].
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Abs(System.Double[])">
            <summary>
            Returns the module of the elements of the vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Negate(System.Double[])">
            <summary>
            Negates all elements of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Negate(UMapx.Core.Complex[])">
            <summary>
            Negates all elements of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToComplex(System.Double[])">
            <summary>
            Returns a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Abs(UMapx.Core.Complex[])">
            <summary>
            Returns the module of elements of a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(UMapx.Core.Complex[])">
            <summary>
            Returns the angle of the elements of a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Real(UMapx.Core.Complex[])">
            <summary>
            Returns the real part of the elements of a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Imag(UMapx.Core.Complex[])">
            <summary>
            Returns the imaginary part of the elements of a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conjugate(UMapx.Core.Complex[])">
            <summary>
            Returns a complex conjugate vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cov(System.Double[])">
            <summary>
            Returns the covariance value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cov(UMapx.Core.Complex[])">
            <summary>
            Returns the covariance value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sum(System.Double[])">
            <summary>
            Returns the total value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sum(UMapx.Core.Complex[])">
            <summary>
            Returns the total value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[])">
            <summary>
            Returns the total product of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[])">
            <summary>
            Returns the total product of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[])">
            <summary>
            Returns the common quotient of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[])">
            <summary>
            Returns the common quotient of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Entropy(System.Double[])">
            <summary>
            Returns the entropy of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Double[])">
            <summary>
            Returns the average value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex[])">
            <summary>
            Returns the average value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(System.Double[])">
            <summary>
            Returns the variance value.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(UMapx.Core.Complex[])">
            <summary>
            Returns the variance value.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(System.Double[],System.Double[])">
            <summary>
            Returns the variance value.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the variance value.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(System.Double[])">
            <summary>
            Returns the standard deviation.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(UMapx.Core.Complex[])">
            <summary>
            Returns the standard deviation.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(System.Double[],System.Double[])">
            <summary>
            Returns the standard deviation.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the standard deviation.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mode(System.Double[])">
            <summary>
            Returns the value of the vector mode.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mode(UMapx.Core.Complex[])">
            <summary>
            Returns the value of the vector mode.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extremum(System.Double[])">
            <summary>
            Returns the minimum and maximum values of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Double[])">
            <summary>
            Gets the value of the minimum element of the vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Double[])">
            <summary>
            Gets the value of the maximum element of the vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Morph(System.Double[],System.Int32)">
            <summary>
            Gets the value of the vector element corresponding to the threshold value.
            </summary>
            <param name="v">Array</param>
            <param name="threshold">Threshold</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sort(System.Double[])">
            <summary>
            Sorts the vector.
            </summary>
            <param name="v">Array</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Sort(System.Double[],System.Int32,System.Int32)">
            <summary>
            Sorts the vector.
            </summary>
            <param name="v">Array</param>
            <param name="r">Start</param>
            <param name="l">End</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[0:,0:],System.Double[],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: A * diag(v).
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: A * diag(v).
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[0:,0:],System.Double[],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: A * diag(v).
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[0:,0:],UMapx.Core.Complex[],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: A * diag(v).
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[],System.Double[0:,0:],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: diag(v) * A.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[],UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: diag(v) * A.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[],System.Double[0:,0:],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: diag(v) * A.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[],UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: diag(v) * A.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[],System.Double[])">
            <summary>
            Implements a scalar product of vectors of the form: a * b'.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Implements a scalar product of vectors of the form: a * b'.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Implements a scalar product of vectors of the form: a * b'.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Implements a scalar product of vectors of the form: a * b'.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[],System.Double[0:,0:])">
            <summary>
            Implements scalar multiplication of a vector by a matrix.
            </summary>
            <param name="v">Array</param>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[],UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements scalar multiplication of a vector by a matrix.
            </summary>
            <param name="v">Array</param>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[],UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements scalar multiplication of a vector by a matrix.
            </summary>
            <param name="v">Array</param>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[],System.Double[0:,0:])">
            <summary>
            Implements scalar multiplication of a vector by a matrix.
            </summary>
            <param name="v">Array</param>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dotp(System.Double[],System.Double[])">
            <summary>
            Implements a scalar product of vectors of the form: a' * b, 
            where ' is the transpose sign.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dotp(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Implements a scalar product of vectors of the form: a' * b, 
            where ' is the transpose sign.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dotp(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Implements a scalar product of vectors of the form: a' * b, 
            where ' is the transpose sign.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dotp(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Implements a scalar product of vectors of the form: a' * b, 
            where ' is the transpose sign.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Double[],System.Double[],System.Boolean)">
            <summary>
            Implements discrete convolution of vectors.
            </summary>
            <param name="v">Array</param>
            <param name="u">Array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Boolean)">
            <summary>
            Implements discrete convolution of vectors.
            </summary>
            <param name="v">Array</param>
            <param name="u">Array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex[],System.Double[],System.Boolean)">
            <summary>
            Implements discrete convolution of vectors.
            </summary>
            <param name="v">Array</param>
            <param name="u">Array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Double[],UMapx.Core.Complex[],System.Boolean)">
            <summary>
            Implements discrete convolution of vectors.
            </summary>
            <param name="v">Array</param>
            <param name="u">Array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Double[],System.Int32)">
            <summary>
            Returns the vector result of morphology maximum.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Double[],System.Int32)">
            <summary>
            Returns the vector result of morphology minimum.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Morph(System.Double[],System.Int32,System.Int32)">
            <summary>
            Returns the vector result of morphology.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
            <param name="threshold">Threshold</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Double[],System.Int32)">
            <summary>
            Returns the result vector of local averaging.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Returns the result vector of local averaging.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.GetCol(System.Double[0:,0:],System.Int32)">
            <summary>
            Returns the matrix column vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="r">Column number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.SetCol(System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
            Specifies the matrix column vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Array</param>
            <param name="r">Column number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GetRow(System.Double[0:,0:],System.Int32)">
            <summary>
            Returns the row vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="r">Row number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.SetRow(System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
            Specifies the row vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Array</param>
            <param name="r">Row number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GetCol(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            Returns the matrix column vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="r">Column number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.SetCol(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[],System.Int32)">
            <summary>
            Specifies the matrix column vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Array</param>
            <param name="r">Column number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GetRow(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            Returns the row vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="r">Row number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.SetRow(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[],System.Int32)">
            <summary>
            Specifies the row vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Array</param>
            <param name="r">Row number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Shift(UMapx.Core.Complex[0:,0:],System.Int32,System.Int32)">
            <summary>
            Implements block matrix rearrangement.
            </summary>
            <param name="a">Matrix</param>
            <param name="m">The number of positions to which a shift in height occurs</param>
            <param name="l">The number of positions by which the shift occurs in width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Shift(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Implements block matrix rearrangement.
            </summary>
            <param name="a">Matrix</param>
            <param name="m">The number of positions to which a shift in height occurs</param>
            <param name="l">The number of positions by which the shift occurs in width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Shift(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Implements a shift of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="l">Number of positions to shift</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Shift(System.Double[],System.Int32)">
            <summary>
            Implements a shift of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="l">Number of positions to shift</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Flip(System.Double[0:,0:],UMapx.Core.Direction)">
            <summary>
            Flips matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="direction">Processing direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Flip(UMapx.Core.Complex[0:,0:],UMapx.Core.Direction)">
            <summary>
            Flips matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="direction">Processing direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Flip(System.Double[])">
            <summary>
            Flips vector elements.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Flip(UMapx.Core.Complex[])">
            <summary>
            Flips vector elements.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(System.Double[],System.Double[])">
            <summary>
            Implements vector merging.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Implements vector merging.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Implements vector merging.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Implements vector merging.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cut(System.Double[],System.Int32,System.Int32)">
            <summary>
            Returns the specified part of the vector.
            </summary>
            <param name="a">Array</param>
            <param name="start">Starting position</param>
            <param name="length">Vector length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cut(UMapx.Core.Complex[],System.Int32,System.Int32)">
            <summary>
            Returns the specified part of the vector.
            </summary>
            <param name="a">Array</param>
            <param name="start">Starting position</param>
            <param name="length">Vector length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cut(System.Double[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops the matrix to the specified size.
            </summary>
            <param name="m">Matrix</param>
            <param name="y">Starting position in height</param>
            <param name="x">Starting position in width</param>
            <param name="height">Height</param>
            <param name="width">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cut(UMapx.Core.Complex[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops the matrix to the specified size.
            </summary>
            <param name="m">Matrix</param>
            <param name="y">Starting position in height</param>
            <param name="x">Starting position in width</param>
            <param name="height">Height</param>
            <param name="width">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Reshape(System.Double[],System.Int32)">
            <summary>
            Returns a matrix formed from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="height">Height</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Reshape(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Returns a matrix formed from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="height">Height</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Reshape(System.Double[0:,0:],System.Int32)">
            <summary>
            Returns a vector formed from a matrix.
            </summary>
            <param name="a">Matrix</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Reshape(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            Returns a vector formed from a matrix.
            </summary>
            <param name="a">Matrix</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diag(System.Double[])">
            <summary>
            Implements the reduction of a vector to a diagonal matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diag(UMapx.Core.Complex[])">
            <summary>
            Implements the reduction of a vector to a diagonal matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diag(System.Double[0:,0:])">
            <summary>
            Returns a vector whose elements lie on the diagonal of the matrix.
            </summary>
            <param name="a">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diag(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns a vector whose elements lie on the diagonal of the matrix.
            </summary>
            <param name="a">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Swap(System.Double[0:,0:],System.Int32,System.Int32,UMapx.Core.Direction)">
            <summary>
            Implements a permutation of the vectors of the matrix.
            </summary>
            <param name="a">Matrix</param>
            <param name="i">First row or column</param>
            <param name="j">Second row or column</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Swap(UMapx.Core.Complex[0:,0:],System.Int32,System.Int32,UMapx.Core.Direction)">
            <summary>
            Implements a permutation of the vectors of the matrix.
            </summary>
            <param name="a">Matrix</param>
            <param name="i">First row or column</param>
            <param name="j">Second row or column</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Swap(System.Double[],System.Int32,System.Int32)">
            <summary>
            Implements a permutation of the elements of the vector.
            </summary>
            <param name="v">Array</param>
            <param name="i">First element position</param>
            <param name="j">Second element position</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Swap(UMapx.Core.Complex[],System.Int32,System.Int32)">
            <summary>
            Implements a permutation of the elements of the vector.
            </summary>
            <param name="v">Array</param>
            <param name="i">First element position</param>
            <param name="j">Second element position</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Remove(System.Double[0:,0:],System.Int32,System.Int32,UMapx.Core.Direction)">
            <summary>
            Implements the removal of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="i">First row or column</param>
            <param name="length">Length</param>
            <param name="direction">Processing direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Remove(UMapx.Core.Complex[0:,0:],System.Int32,System.Int32,UMapx.Core.Direction)">
            <summary>
            Implements the removal of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="i">First row or column</param>
            <param name="length">Length</param>
            <param name="direction">Processing direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Remove(System.Double[],System.Int32,System.Int32)">
            <summary>
            Implements the removal of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="i">Number of element</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Remove(UMapx.Core.Complex[],System.Int32,System.Int32)">
            <summary>
            Implements the removal of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="i">Number of element</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Minor(System.Double[0:,0:],System.Int32)">
            <summary>
            Implements the operation of taking the minor of the matrix.
            </summary>
            <param name="m">Square matrix</param>
            <param name="n">Row and column number</param>
            <returns>Square matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Minor(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            Implements the operation of taking the minor of the matrix.
            </summary>
            <param name="m">Square matrix</param>
            <param name="n">Row and column number</param>
            <returns>Square matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diff(System.Double[0:,0:],System.Int32,UMapx.Core.Direction,System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="n">Order</param>
            <param name="direction">Processing direction</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.DiffVertical(System.Double[0:,0:],System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.DiffHorizontal(System.Double[0:,0:],System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diff(UMapx.Core.Complex[0:,0:],System.Int32,UMapx.Core.Direction,System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="n">Order</param>
            <param name="direction">Processing direction</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.DiffVertical(UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.DiffHorizontal(UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diff(System.Double[],System.Int32,System.Boolean)">
            <summary>
            Returns the difference of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="n">Order</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diff(UMapx.Core.Complex[],System.Int32,System.Boolean)">
            <summary>
            Returns the difference of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="n">Order</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extend(System.Double[],System.Int32)">
            <summary>
            Extends the vector to the specified length.
            </summary>
            <param name="v">Array</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extend(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Extends the matrix to the specified size.
            </summary>
            <param name="m">Matrix</param>
            <param name="height">Height</param>
            <param name="width">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ExtendVertical(System.Double[0:,0:],System.Int32)">
            <summary>
            extend vertical.
            </summary>
            <param name="m"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ExtendHorizontal(System.Double[0:,0:],System.Int32)">
            <summary>
            extend horizontal.
            </summary>
            <param name="m"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extend(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Extends the vector to the specified length.
            </summary>
            <param name="v">Array</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extend(UMapx.Core.Complex[0:,0:],System.Int32,System.Int32)">
            <summary>
            Extends the matrix to the specified size.
            </summary>
            <param name="m">Matrix</param>
            <param name="height">Height</param>
            <param name="width">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ExtendVertical(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            extend vertical.
            </summary>
            <param name="m"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ExtendHorizontal(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            extend horizontal.
            </summary>
            <param name="m"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Double,System.Double,System.Double)">
            <summary>
            Returns an array of function values.
            </summary>
            <param name="min">Minimum</param>
            <param name="max">Maximum</param>
            <param name="step">Step</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Double[],UMapx.Core.IDouble)">
            <summary>
            Returns an array of function values.
            </summary>
            <param name="v">Array</param>
            <param name="function">Continuous function delegate</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(UMapx.Core.Complex[],UMapx.Core.IComplex)">
            <summary>
            Returns an array of function values.
            </summary>
            <param name="v">Array</param>
            <param name="function">Continuous function delegate</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Double[],System.Double[],UMapx.Core.IDoubleMesh)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Double[],UMapx.Core.Complex[],UMapx.Core.IComplexMesh)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(UMapx.Core.Complex[],System.Double[],UMapx.Core.IComplexMesh)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.IComplexMesh)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Double[0:,0:],UMapx.Core.IDouble)">
            <summary>
            Returns an array of function values.
            </summary>
            <param name="m">Matrix</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(UMapx.Core.Complex[0:,0:],UMapx.Core.IComplex)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="m">Matrix</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.One(System.Int32)">
            <summary>
            Implements the construction of a vector of ones.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Zero(System.Int32)">
            <summary>
            Implements the construction of a vector of zeros.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Householder(System.Double[])">
            <summary>
            Returns the Householder vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Companion(System.Double[])">
            <summary>
            Implements the construction of the companion matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Vander(System.Double[])">
            <summary>
            Implements the construction of the Vandermond matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hankeli(System.Double[])">
            <summary>
            Implements the construction of an incomplete Hankel matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hankel(System.Double[])">
            <summary>
            Implements the construction of the Hankel matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Toeplitz(System.Double[])">
            <summary>
            Implements the construction of the Toeplitz matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cauchy(System.Double[],System.Double[])">
            <summary>
            Implements the construction of the Cauchy matrix.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Circulant(System.Double[])">
            <summary>
            Implements the construction of a circulant matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Symmetric(System.Double[])">
            <summary>
            Implements the construction of a symmetric matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Companion(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of the companion matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Vander(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of the Vandermond matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hankeli(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of an incomplete Hankel matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hankel(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of the Hankel matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Toeplitz(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of the Toeplitz matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cauchy(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Implements the construction of the Cauchy matrix.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Circulant(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of a circulant matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Symmetric(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of a symmetric matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Zero(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a zero matrix.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Eye(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a eye matrix.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.One(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of ones.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Exchange(System.Int32)">
            <summary>
            Implements the construction of the exchange matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Lehmer(System.Int32)">
            <summary>
            Implements the construction of the Lehmer matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Redheffer(System.Int32)">
            <summary>
            Implements the construction of the Redheffer matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hilbert(System.Int32)">
            <summary>
            Implements the construction of a Hilbert matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Circulant(System.Int32)">
            <summary>
            Implements the construction of a cyclic matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Symmetric(System.Int32)">
            <summary>
            Implements the construction of a symmetric matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GCD(System.Int32)">
            <summary>
            Implements the construction of a matrix of GCD.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Stirling(System.Int32,System.Boolean)">
            <summary>
            Implements the construction of the Stirling matrix of the first or second kind.
            </summary>
            <param name="n">Dimension</param>
            <param name="second">Second kind or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Magic(System.Int32)">
            <summary>
            Implements the construction of a magic square.
            </summary>
            <param name="n">Size (odd number)</param>
            <returns>Matrix</returns>
        </member>
        <member name="F:UMapx.Core.Matrice.rnd">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Core.Matrice.Rand(System.Int32)">
            <summary>
            Implements the construction of a vector of random numbers, the values of which are distributed according to a uniform distribution.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randc(System.Int32)">
            <summary>
            Implements the construction of a vector of random numbers, the values of which are distributed according to a uniform distribution.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rand(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of random numbers, the values of which are distributed according to a uniform distribution.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randc(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of random numbers, the values of which are distributed according to a uniform distribution.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randi(System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randic(System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randi(System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="n">Dimension</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randic(System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="n">Dimension</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randi(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randi(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randic(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randic(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Parse(System.Double[0:,0:],System.String)">
            <summary>
            Parses the original string into a matrix of double numbers.
            <remarks>
            Example: "[1, 2, 3; 4, 5, 6; 7, 8, 9]";
            </remarks>
            </summary>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.TryParse(System.String,System.Double[0:,0:]@)">
            <summary>
            Tries to parse the original row into a matrix of double numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Parse(UMapx.Core.Complex[0:,0:],System.String)">
            <summary>
            Parses the original string into a matrix of complex numbers.
            </summary>
            <remarks>
            Example: "[1 + 2i, 2 + 4i; 3 + 6i, 4 + 8i]";
            </remarks>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.TryParse(System.String,UMapx.Core.Complex[0:,0:]@)">
            <summary>
            Tries to parse the original row into a matrix of complex numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Parse(System.Double[],System.String)">
            <summary>
            Parses the original string into a vector of double numbers.
            <remarks>
            Example: "[1, 2, 3, 4]";
            </remarks>
            </summary>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.TryParse(System.String,System.Double[]@)">
            <summary>
            Tries to parse the original row into a matrix of double numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Parse(UMapx.Core.Complex[],System.String)">
            <summary>
            Parses the original string into a vector of complex numbers.
            <remarks>
            Example: "[1 + 2i, 2 + 0.3i, 3 + i, 4 - 11i]";
            </remarks>
            </summary>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.TryParse(System.String,UMapx.Core.Complex[]@)">
            <summary>
            Tries to parse the original row into a matrix of complex numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Solve(System.Double[0:,0:])">
            <summary>
            Returns a vector corresponding to the solution of a system of linear algebraic equations: Ax = b.
            </summary>
            <param name="A">Extended matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Solve(System.Double[0:,0:],System.Double[])">
            <summary>
            Returns a vector corresponding to the solution of a system of linear algebraic equations: Ax = b.
            </summary>
            <param name="A">Square matrix</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Solve(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns a vector corresponding to the solution of a system of linear algebraic equations: Ax = b.
            </summary>
            <param name="A">Extended matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Solve(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[])">
            <summary>
            Returns a vector corresponding to the solution of a system of linear algebraic equations: Ax = b.
            </summary>
            <param name="A">Square matrix</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Core.LinealgOptions">
            <summary>
            Defines the class of optimizations of matrix operations.
            </summary>
        </member>
        <member name="F:UMapx.Core.LinealgOptions.exception">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Determinant(System.Double*,System.Int32)">
            <summary>
            Iterative calculation of the determinant.
            </summary>
            <param name="element">"Element</param>
            <param name="n">Radius</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Determinant(UMapx.Core.Complex*,System.Int32)">
            <summary>
            Iterative calculation of the determinant.
            </summary>
            <param name="element">"Element</param>
            <param name="n">Radius</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Mul(System.Single[][],System.Single[][])">
            <summary>
            Implements the multiplication of matrices presented in the form of jagged arrays.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Mul(UMapx.Core.LinealgOptions.Complex32[][],UMapx.Core.LinealgOptions.Complex32[][])">
            <summary>
            Implements the multiplication of matrices presented in the form of jagged arrays.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Mul(UMapx.Core.LinealgOptions.Complex32[][],System.Single[][])">
            <summary>
            Implements the multiplication of matrices presented in the form of jagged arrays.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Mul(System.Single[][],UMapx.Core.LinealgOptions.Complex32[][])">
            <summary>
            Implements the multiplication of matrices presented in the form of jagged arrays.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Conv(System.Single[][],System.Single[][],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Conv(UMapx.Core.LinealgOptions.Complex32[][],UMapx.Core.LinealgOptions.Complex32[][],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Conv(System.Single[][],UMapx.Core.LinealgOptions.Complex32[][],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Conv(UMapx.Core.LinealgOptions.Complex32[][],System.Single[][],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvHorizontal(System.Single[][],System.Single[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvVertical(System.Single[][],System.Single[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvHorizontal(System.Single[][],UMapx.Core.LinealgOptions.Complex32[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvVertical(System.Single[][],UMapx.Core.LinealgOptions.Complex32[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvHorizontal(UMapx.Core.LinealgOptions.Complex32[][],UMapx.Core.LinealgOptions.Complex32[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvVertical(UMapx.Core.LinealgOptions.Complex32[][],UMapx.Core.LinealgOptions.Complex32[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvHorizontal(UMapx.Core.LinealgOptions.Complex32[][],System.Single[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvVertical(UMapx.Core.LinealgOptions.Complex32[][],System.Single[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphHorizontal(System.Single[][],System.Int32,System.Int32)">
            <summary>
            Implements discrete morphology of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r1">Size</param>
            <param name="threshold">Threshold</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphVertical(System.Single[][],System.Int32,System.Int32)">
            <summary>
            Implements discrete morphology of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r0">Size</param>
            <param name="threshold">Threshold</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MinHorizontal(System.Single[][],System.Int32)">
            <summary>
            Implements discrete morphology minimum of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r1">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MinVertical(System.Single[][],System.Int32)">
            <summary>
            Implements discrete morphology minimum of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r0">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MaxHorizontal(System.Single[][],System.Int32)">
            <summary>
            Implements discrete morphology maximum of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r1">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MaxVertical(System.Single[][],System.Int32)">
            <summary>
            Implements discrete morphology maximum of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r0">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanHorizontal(System.Single[][],System.Int32)">
            <summary>
            Implements local average of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r1">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanVertical(System.Single[][],System.Int32)">
            <summary>
            Implements local average of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r0">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanHorizontal(UMapx.Core.LinealgOptions.Complex32[][],System.Int32)">
            <summary>
            Implements local average of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r1">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanVertical(UMapx.Core.LinealgOptions.Complex32[][],System.Int32)">
            <summary>
            Implements local average of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r0">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ToJagged(System.Double[0:,0:])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Matrix</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.FromJagged(System.Single[][])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ToJagged(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Matrix</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.FromJagged(UMapx.Core.LinealgOptions.Complex32[][])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ToJagged(System.Double[])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.FromJagged(System.Single[])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ToJagged(UMapx.Core.Complex[])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.FromJagged(UMapx.Core.LinealgOptions.Complex32[])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Core.LinealgOptions.Complex32">
            <summary>
            Complex (32 bit).
            </summary>
        </member>
        <member name="F:UMapx.Core.LinealgOptions.Complex32.Real">
            <summary>
            Real part.
            </summary>
        </member>
        <member name="F:UMapx.Core.LinealgOptions.Complex32.Imag">
            <summary>
            Imaginary part.
            </summary>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.#ctor(System.Single,System.Single)">
            <summary>
            Complex (32 bit).
            </summary>
            <param name="re">Real part of the complex number</param>
            <param name="im">Imaginary part of a complex number</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the given value of type Complex32.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Equality(UMapx.Core.LinealgOptions.Complex32,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Checks if two objects of type Complex are equal to each other.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Inequality(UMapx.Core.LinealgOptions.Complex32,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Checks if two objects of type Complex are not equal to each other.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Addition(UMapx.Core.LinealgOptions.Complex32,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            The sum of two complex numbers.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Addition(UMapx.Core.LinealgOptions.Complex32,System.Single)">
            <summary>
            The sum of a complex number and a real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Addition(System.Single,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            The sum of a complex number and a real number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Subtraction(UMapx.Core.LinealgOptions.Complex32,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            The difference of two complex numbers.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Subtraction(UMapx.Core.LinealgOptions.Complex32,System.Single)">
            <summary>
            The difference between a complex number and a real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Subtraction(System.Single,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            The difference between a complex number and a real number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_UnaryNegation(UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Inverts complex number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Multiply(UMapx.Core.LinealgOptions.Complex32,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Multiplies one complex number by another.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Multiply(System.Single,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Multiplies real number by complex number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Multiply(UMapx.Core.LinealgOptions.Complex32,System.Single)">
            <summary>
            Multiplies complex number by real number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Division(UMapx.Core.LinealgOptions.Complex32,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Divides one complex number by another.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Division(UMapx.Core.LinealgOptions.Complex32,System.Single)">
            <summary>
            Divides complex number by real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Division(System.Single,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Divides real number by complex number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Whittle_Mul(System.Single[],System.Single[][],System.Single[],System.Int32,System.Int32)">
            <summary>
            Implements matrix multiplication using modified Whittle optimization.
            </summary>
            <param name="iRowA">Row of A</param>
            <param name="B">Matrix B</param>
            <param name="iRowC">Row of C</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Whittle_Mul(UMapx.Core.LinealgOptions.Complex32[],UMapx.Core.LinealgOptions.Complex32[][],UMapx.Core.LinealgOptions.Complex32[],System.Int32,System.Int32)">
            <summary>
            Implements matrix multiplication using modified Whittle optimization.
            </summary>
            <param name="iRowA">Row of A</param>
            <param name="B">Matrix B</param>
            <param name="iRowC">Row of C</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Whittle_Mul(UMapx.Core.LinealgOptions.Complex32[],System.Single[][],UMapx.Core.LinealgOptions.Complex32[],System.Int32,System.Int32)">
            <summary>
            Implements matrix multiplication using modified Whittle optimization.
            </summary>
            <param name="iRowA">Row of A</param>
            <param name="B">Matrix B</param>
            <param name="iRowC">Row of C</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Whittle_Mul(System.Single[],UMapx.Core.LinealgOptions.Complex32[][],UMapx.Core.LinealgOptions.Complex32[],System.Int32,System.Int32)">
            <summary>
            Implements matrix multiplication using modified Whittle optimization.
            </summary>
            <param name="iRowA">Row of A</param>
            <param name="B">Matrix B</param>
            <param name="iRowC">Row of C</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
        </member>
        <member name="T:UMapx.Core.Jagged">
            <summary>
            Uses to work with gear arrays.
            </summary>
        </member>
        <member name="M:UMapx.Core.Jagged.ToJagged(System.Double[0:,0:])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Matrix</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.FromJagged(System.Double[][])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.ToJagged(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Matrix</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.FromJagged(UMapx.Core.Complex[][])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="F:UMapx.Core.Jagged.rnd">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Core.Jagged.Rand(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of random numbers, the values of which are distributed according to a uniform distribution.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randc(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of random numbers, the values of which are distributed according to a uniform distribution.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randi(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randi(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randic(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randic(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Zero(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a zero matrix.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.One(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of ones.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Eye(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a eye matrix.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Parse(System.Double[][],System.String)">
            <summary>
            Parses the original string into a matrix of double numbers.
            <remarks>
            Example: "[1, 2, 3; 4, 5, 6; 7, 8, 9]";
            </remarks>
            </summary>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.TryParse(System.String,System.Double[][]@)">
            <summary>
            Tries to parse the original row into a matrix of double numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Parse(UMapx.Core.Complex[][],System.String)">
            <summary>
            Parses the original string into a matrix of complex numbers.
            </summary>
            <remarks>
            Example: "[1 + 2i, 2 + 4i; 3 + 6i, 4 + 8i]";
            </remarks>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.TryParse(System.String,UMapx.Core.Complex[][]@)">
            <summary>
            Tries to parse the original row into a matrix of complex numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Negate(System.Double[][])">
            <summary>
            Negates all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Negate(UMapx.Core.Complex[][])">
            <summary>
            Negates all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.ToComplex(System.Double[][])">
            <summary>
            Returns a complex matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.ToByte(System.Double[][])">
            <summary>
            Returns a matrix whose values belong to the interval [0, 255].
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.ToDouble(System.Double[][])">
            <summary>
            Returns a matrix whose values belong to the interval [0, 1].
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Abs(System.Double[][])">
            <summary>
            Takes a module for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Abs(UMapx.Core.Complex[][])">
            <summary>
            Takes a module for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Angle(UMapx.Core.Complex[][])">
            <summary>
            Takes an angle for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Real(UMapx.Core.Complex[][])">
            <summary>
            Takes the real part for all elements of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Imag(UMapx.Core.Complex[][])">
            <summary>
            Takes the imaginary part for all elements of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Core.Direction">
            <summary>
            Defines the direction of processing.
            </summary>
        </member>
        <member name="F:UMapx.Core.Direction.Horizontal">
            <summary>
            Horizontal direction.
            </summary>
        </member>
        <member name="F:UMapx.Core.Direction.Vertical">
            <summary>
            Vertical direction.
            </summary>
        </member>
        <member name="F:UMapx.Core.Direction.Both">
            <summary>
            Both direction.
            </summary>
        </member>
        <member name="T:UMapx.Core.Complex">
            <summary>
            Defines a complex number.
            </summary>
        </member>
        <member name="F:UMapx.Core.Complex.Real">
            <summary>
            The real part of the complex number.
            </summary>
        </member>
        <member name="F:UMapx.Core.Complex.Imag">
            <summary>
            The imaginary part of a complex number.
            </summary>
        </member>
        <member name="M:UMapx.Core.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the complex number.
            </summary>
            <param name="re">Real part of the complex number</param>
            <param name="im">Imaginary part of a complex number</param>
        </member>
        <member name="P:UMapx.Core.Complex.Abs">
            <summary>
            Gets the value of the module.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex.Angle">
            <summary>
            Gets the value of the phase.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex.I">
            <summary>
            Returns the imaginary one.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex.One">
            <summary>
            Returns the real one.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex.Zero">
            <summary>
            Returns the complex zero.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex.Conjugate">
            <summary>
            Returns the complex conjugate number.
            </summary>
        </member>
        <member name="M:UMapx.Core.Complex.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the given value of type Complex.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Complex.ToString">
            <summary>
            Converts complex number to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Complex.ToString(System.String)">
            <summary>
            Converts complex number to its corresponding string representation.
            </summary>
            <param name="format">Format string</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Equality(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            Checks if two complex numbers are equal.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Inequality(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            Checks if two complex numbers are not equal.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Addition(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            The sum of two complex numbers.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Addition(UMapx.Core.Complex,System.Double)">
            <summary>
            The sum of a complex number and a real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Addition(System.Double,UMapx.Core.Complex)">
            <summary>
            The sum of a complex number and a real number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Subtraction(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            The difference of two complex numbers.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Subtraction(UMapx.Core.Complex,System.Double)">
            <summary>
            The difference between a complex number and a real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Subtraction(System.Double,UMapx.Core.Complex)">
            <summary>
            The difference between a complex number and a real number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_UnaryNegation(UMapx.Core.Complex)">
            <summary>
            Inverts complex number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Multiply(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            Multiplies one complex number by another.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Multiply(System.Double,UMapx.Core.Complex)">
            <summary>
            Multiplies real number by complex number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Multiply(UMapx.Core.Complex,System.Double)">
            <summary>
            Multiplies complex number by real number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Division(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            Divides one complex number by another.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Division(UMapx.Core.Complex,System.Double)">
            <summary>
            Divides complex number by real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Division(System.Double,UMapx.Core.Complex)">
            <summary>
            Divides real number by complex number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Double)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Single)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Int64)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.UInt64)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Int16)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.UInt16)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Int32)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.UInt32)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Byte)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.SByte)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Decimal)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.Parse(System.String)">
            <summary>
            Parses the string to complex number.
            <remarks>
            Example: "1 + 2i", "0.321 + 11i", ".1i".
            </remarks>
            </summary>
            <param name="s">Input string</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Complex.TryParse(System.String,UMapx.Core.Complex@)">
            <summary>
            Tries to parse the string to complex number.
            </summary>
            <param name="complex">Input string</param>
            <param name="result">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Complex.System#ICloneable#Clone">
            <summary>
            Creates a copy of a complex number.
            </summary>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.Clone">
            <summary>
            Creates a copy of a complex number.
            </summary>
            <returns>Complex number</returns>
        </member>
        <member name="T:UMapx.Core.Quaternion">
            <summary>
            Defines a quaternion.
            <remarks>
            A quaternion is a system of hypercomplex numbers that forms a four-dimensional vector space over a field of real numbers.
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Core.Quaternion.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="F:UMapx.Core.Quaternion.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="F:UMapx.Core.Quaternion.Z">
            <summary>
            Z coordinate.
            </summary>
        </member>
        <member name="F:UMapx.Core.Quaternion.W">
            <summary>
            W coordinate.
            </summary>
        </member>
        <member name="M:UMapx.Core.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a quaternion based on the given coordinates.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
            <param name="z">Coordinate Z</param>
            <param name="w">Coordinate W</param>
        </member>
        <member name="P:UMapx.Core.Quaternion.Identity">
            <summary>
            Gets a quaternion that represents a lack of rotation.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion.IsIdentity">
            <summary>
            Gets a value indicating whether the current instance is a single Quaternion.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion.Abs">
            <summary>
            Returns the value of the quaternion module.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion.SquaredAbs">
            <summary>
            Calculates the quaternion modulus squared.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion.Normalize">
            <summary>
            Divides each coordinate of the specified quaternion by its length.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion.Conjugate">
            <summary>
            Returns the conjugate object of the specified quaternion.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion.Inverse">
            <summary>
            Returns the inverse object of the quaternion.
            </summary>
        </member>
        <member name="M:UMapx.Core.Quaternion.FromYPR(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new quaternion based on a given value of nutation, precession, and proper rotation.
            </summary>
            <param name="yaw">The nutation angle around the Y axis in radians</param>
            <param name="pitch">The precession angle around the X axis in radians</param>
            <param name="roll">The angle of rotation around the Z axis in radians</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Dot(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Computes the scalar product of two quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Slerp(UMapx.Core.Quaternion,UMapx.Core.Quaternion,System.Double)">
            <summary>
            Performs interpolation between two quaternions using spherical linear interpolation.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <param name="amount">Relative weight of the second quaternion in interpolation</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Lerp(UMapx.Core.Quaternion,UMapx.Core.Quaternion,System.Double)">
            <summary>
            Performs linear interpolation between two quaternions based on a value indicating the weighting of the second quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <param name="amount">Relative weight of the second quaternion in interpolation</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Concatenate(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Concatenates two quaternions.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_UnaryNegation(UMapx.Core.Quaternion)">
            <summary>
            Reverses the sign of each quaternion coordinate.
            </summary>
            <param name="q">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Addition(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Adds each element in one quaternion with the corresponding element in the second quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Subtraction(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Subtracts each element in the second quaternion from the corresponding element in the first quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Multiply(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Returns the quaternion resulting from the multiplication of two quaternions.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Multiply(UMapx.Core.Quaternion,System.Double)">
            <summary>
            Returns the quaternion obtained by scaling all the coordinates of the specified quaternion by a scalar factor.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Factor</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Division(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Divides one quaternion into a second quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Division(UMapx.Core.Quaternion,System.Double)">
            <summary>
            Returns the quaternion obtained by scaling all the coordinates of the specified quaternion by a scalar factor.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Factor</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Equality(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Checks if two quaternions are equal.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Inequality(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Checks if two quaternions are not equal.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type quaternion.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.ToString">
            <summary>
            Converts quaternion to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.ToString(System.String)">
            <summary>
            Converts quaternion to its corresponding string representation.
            </summary>
            <param name="format">Format string</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.System#ICloneable#Clone">
            <summary>
            Creates a copy of quaternion.
            </summary>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Clone">
            <summary>
            Creates a copy of quaternion.
            </summary>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Parse(System.String)">
            <summary>
            Parses the string to quaternion.
            </summary>
            <remarks>
            Example: "[1, -2; 3.2, -.13]";
            The dimension of the vector must be 4.
            </remarks>
            <param name="s">Input string</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.TryParse(System.String,UMapx.Core.Quaternion@)">
            <summary>
            Tries to parse the string into Quaternion.
            </summary>
            <param name="quaternion">Input string</param>
            <param name="result">Quaternion</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:UMapx.Core.StringOptions">
            <summary>
            Defines a class of string operations.
            </summary>
        </member>
        <member name="P:UMapx.Core.StringOptions.C">
            <summary>
            Complex number format.
            </summary>
        </member>
        <member name="P:UMapx.Core.StringOptions.Q">
            <summary>
            Quaternion format.
            </summary>
        </member>
        <member name="M:UMapx.Core.StringOptions.Disp(System.Double[],System.String,System.String[])">
            <summary>
            The function of converting an array of numbers to a string.
            </summary>
            <param name="v">Array</param>
            <param name="format">Format string</param>
            <param name="symbol">String array</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.StringOptions.Disp(System.Double,System.String,System.Boolean,System.String)">
            <summary>
            The function of converting number to a string
            </summary>
            <param name="v">Number</param>
            <param name="format">Format string</param>
            <param name="s">First in a row or not</param>
            <param name="symbol">Symbol</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.StringOptions.Matpar(System.String)">
            <summary>
            Defines a general method for casting the original row to the matrix form.
            </summary>
            <param name="s">Input string</param>
            <returns>String array</returns>
        </member>
        <member name="M:UMapx.Core.StringOptions.Compar(System.String)">
            <summary>
            Translates the original string to complex number.
            <remarks>
            Example: "1 + 2i", "0.321 + 11i", ".1i".
            </remarks>
            </summary>
            <param name="s">Input string</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="T:UMapx.Core.RangeDouble">
            <summary>
            Defines a pair of double numbers representing a line segment.
            </summary>
        </member>
        <member name="M:UMapx.Core.RangeDouble.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a pair of double numbers representing a line segment.
            </summary>
            <param name="min">Lower bound of the segment</param>
            <param name="max">Upper bound of the segment</param>
        </member>
        <member name="P:UMapx.Core.RangeDouble.Min">
            <summary>
            Gets or sets the lower bound of the line segment.
            </summary>
        </member>
        <member name="P:UMapx.Core.RangeDouble.Max">
            <summary>
            Gets or sets the upper bound of the line segment.
            </summary>
        </member>
        <member name="M:UMapx.Core.RangeDouble.IsOnRange(System.Double)">
            <summary>
            Checks if the value is in the specified interval.
            </summary>
            <param name="x">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.ToString">
            <summary>
            Converts RangeDouble to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type RangeDouble.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.op_Equality(UMapx.Core.RangeDouble,UMapx.Core.RangeDouble)">
            <summary>
            Checks if two RangeDouble objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.op_Inequality(UMapx.Core.RangeDouble,UMapx.Core.RangeDouble)">
            <summary>
            Checks if two RangeDouble objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.System#ICloneable#Clone">
            <summary>
            Creates a copy of RangeDouble.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.Clone">
            <summary>
            Creates a copy of RangeDouble.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.RangeInt">
            <summary>
            Defines a pair of integer numbers representing a line segment.
            </summary>
        </member>
        <member name="M:UMapx.Core.RangeInt.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a pair of integer numbers representing a line segment.
            </summary>
            <param name="min">Lower bound of the segment</param>
            <param name="max">Upper bound of the segment</param>
        </member>
        <member name="P:UMapx.Core.RangeInt.Min">
            <summary>
            Gets or sets the lower bound of the line segment.
            </summary>
        </member>
        <member name="P:UMapx.Core.RangeInt.Max">
            <summary>
            Gets or sets the upper bound of the line segment.
            </summary>
        </member>
        <member name="M:UMapx.Core.RangeInt.IsOnRange(System.Int32)">
            <summary>
            Checks if the value is in the specified interval.
            </summary>
            <param name="x">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.ToString">
            <summary>
            Converts RangeInt to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type RangeInt.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.op_Equality(UMapx.Core.RangeInt,UMapx.Core.RangeInt)">
            <summary>
            Checks if two RangeDouble objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.op_Inequality(UMapx.Core.RangeInt,UMapx.Core.RangeInt)">
            <summary>
            Checks if two RangeDouble objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.System#ICloneable#Clone">
            <summary>
            Creates a copy of RangeInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.Clone">
            <summary>
            Creates a copy of RangeInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.PointDouble">
            <summary>
            Defines a pair of double numbers representing an ordered pair of X and Y coordinates.
            </summary>
        </member>
        <member name="M:UMapx.Core.PointDouble.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a pair of double numbers representing an ordered pair of X and Y coordinates.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
        </member>
        <member name="P:UMapx.Core.PointDouble.X">
            <summary>
            Gets or sets the coordinate X.
            </summary>
        </member>
        <member name="P:UMapx.Core.PointDouble.Y">
            <summary>
            Gets or sets the coordinate Y.
            </summary>
        </member>
        <member name="M:UMapx.Core.PointDouble.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.PointDouble.ToString">
            <summary>
            Converts a PointDouble to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.PointDouble.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type PointDouble.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointDouble.op_Equality(UMapx.Core.PointDouble,UMapx.Core.PointDouble)">
            <summary>
            Checks if two PointDouble objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointDouble.op_Inequality(UMapx.Core.PointDouble,UMapx.Core.PointDouble)">
            <summary>
            Checks if two PointDouble objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointDouble.System#ICloneable#Clone">
            <summary>
            Creates a copy of PointDouble.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.PointDouble.Clone">
            <summary>
            Creates a copy of PointDouble.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.PointInt">
            <summary>
            Defines a pair of integer numbers representing an ordered pair of X and Y coordinates.
            </summary>
        </member>
        <member name="M:UMapx.Core.PointInt.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a pair of integer numbers representing an ordered pair of X and Y coordinates.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
        </member>
        <member name="P:UMapx.Core.PointInt.X">
            <summary>
            Gets or sets the coordinate X.
            </summary>
        </member>
        <member name="P:UMapx.Core.PointInt.Y">
            <summary>
            Gets or sets the coordinate Y.
            </summary>
        </member>
        <member name="M:UMapx.Core.PointInt.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.ToString">
            <summary>
            Converts a PointInt to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type PointInt.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.op_Equality(UMapx.Core.PointInt,UMapx.Core.PointInt)">
            <summary>
            Checks if two PointDouble objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.op_Inequality(UMapx.Core.PointInt,UMapx.Core.PointInt)">
            <summary>
            Checks if two PointDouble objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.System#ICloneable#Clone">
            <summary>
            Creates a copy of PointInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.Clone">
            <summary>
            Creates a copy of PointInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.SizeDouble">
            <summary>
            Defines a pair of double numbers representing an ordered pair of width and height.
            </summary>
        </member>
        <member name="M:UMapx.Core.SizeDouble.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a pair of double numbers representing an ordered pair of width and height.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="P:UMapx.Core.SizeDouble.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:UMapx.Core.SizeDouble.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="M:UMapx.Core.SizeDouble.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.SizeDouble.ToString">
            <summary>
            Converts a SizeDouble to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.SizeDouble.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type SizeDouble.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeDouble.op_Equality(UMapx.Core.SizeDouble,UMapx.Core.SizeDouble)">
            <summary>
            Checks if two SizeDouble objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeDouble.op_Inequality(UMapx.Core.SizeDouble,UMapx.Core.SizeDouble)">
            <summary>
            Checks if two SizeDouble objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeDouble.System#ICloneable#Clone">
            <summary>
            Creates a copy of SizeDouble.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.SizeDouble.Clone">
            <summary>
            Creates a copy of SizeDouble.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.SizeInt">
            <summary>
            Defines a pair of integer numbers representing an ordered pair of width and height.
            </summary>
        </member>
        <member name="M:UMapx.Core.SizeInt.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a pair of integer numbers representing an ordered pair of width and height.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="P:UMapx.Core.SizeInt.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:UMapx.Core.SizeInt.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="M:UMapx.Core.SizeInt.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.ToString">
            <summary>
            Converts a SizeInt to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type SizeInt.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.op_Equality(UMapx.Core.SizeInt,UMapx.Core.SizeInt)">
            <summary>
            Checks if two SizeInt objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.op_Inequality(UMapx.Core.SizeInt,UMapx.Core.SizeInt)">
            <summary>
            Checks if two SizeInt objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.System#ICloneable#Clone">
            <summary>
            Creates a copy of SizeInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.Clone">
            <summary>
            Creates a copy of SizeInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Decomposition.Hessenberg">
            <summary>
            Defines decomposition with a cast to Hessenberg form.
            <remarks>
            This is a representation of a square matrix in the form of a product of three matrices: A = P * H * P', where H is the Hessenberg form and P is the unitary matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hessenberg_matrix
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Hessenberg.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes decomposition to a Hessenberg form.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Hessenberg.P">
            <summary>
            Gets the unitary matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Hessenberg.H">
            <summary>
            Gets the Hessenberg form.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Hessenberg.orthes(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="A"></param>
        </member>
        <member name="T:UMapx.Decomposition.GEVD">
            <summary>
            Defines generalized eigenvalue decomposition.
            <remarks>
            It is the task of finding a vector of values of V such that the representation: A * V = B * V * D.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix#Generalized_eigenvalue_problem
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.#ctor(System.Double[0:,0:],System.Double[0:,0:],System.Double)">
            <summary>
            Initializes generalized eigenvalue decomposition.
            </summary>
            <param name="a">Matrix A</param>
            <param name="b">Matrix B</param>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.Alpha">
            <summary>
            Returns vector α.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.Beta">
            <summary>
            Returns vector β.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.Eigenvalues">
            <summary>
            Returns a vector of eigenvalues.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.D">
            <summary>
            Returns an eigenvalue matrix D.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.V">
            <summary>
            Returns a matrix of values V.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.IsSingular">
            <summary>
            Checks whether one of the matrices is singular or not.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.qzhes(System.Int32,System.Double[][],System.Double[][],System.Boolean,System.Double[][])">
             <summary>
               Adaptation of the original Fortran QZHES routine from EISPACK.
             </summary>
             <remarks>
               This subroutine is the first step of the qz algorithm
               for solving generalized matrix eigenvalue problems,
               Siam J. Numer. anal. 10, 241-256(1973) by Moler and Stewart.
            
               This subroutine accepts a pair of real general matrices and
               reduces one of them to upper Hessenberg form and the other
               to upper triangular form using orthogonal transformations.
               it is usually followed by  qzit,  qzval  and, possibly,  qzvec.
               
               For the full documentation, please check the original function.
             </remarks>
             <param name="n"></param>
             <param name="a"></param>
             <param name="b"></param>
             <param name="matz"></param>
             <param name="z"></param>
             <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.qzit(System.Int32,System.Double[][],System.Double[][],System.Double,System.Boolean,System.Double[][],System.Int32@)">
            <summary>
              Adaptation of the original Fortran QZIT routine from EISPACK.
            </summary>
            <remarks>
              This subroutine is the second step of the qz algorithm
              for solving generalized matrix eigenvalue problems,
              Siam J. Numer. anal. 10, 241-256(1973) by Moler and Stewart,
              as modified in technical note nasa tn d-7305(1973) by ward.
              
              This subroutine accepts a pair of real matrices, one of them
              in upper Hessenberg form and the other in upper triangular form.
              it reduces the Hessenberg matrix to quasi-triangular form using
              orthogonal transformations while maintaining the triangular form
              of the other matrix.  it is usually preceded by  qzhes  and
              followed by  qzval  and, possibly,  qzvec.
              
              For the full documentation, please check the original function.
            </remarks>
            <param name="n"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps1"></param>
            <param name="matz"></param>
            <param name="z"></param>
            <param name="ierr"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.qzval(System.Int32,System.Double[][],System.Double[][],System.Double[],System.Double[],System.Double[],System.Boolean,System.Double[][])">
            <summary>
              Adaptation of the original Fortran QZVAL routine from EISPACK.
            </summary>
            <remarks>
              This subroutine is the third step of the qz algorithm
              for solving generalized matrix eigenvalue problems,
              Siam J. Numer. anal. 10, 241-256(1973) by Moler and Stewart.
              
              This subroutine accepts a pair of real matrices, one of them
              in quasi-triangular form and the other in upper triangular form.
              it reduces the quasi-triangular matrix further, so that any
              remaining 2-by-2 blocks correspond to pairs of complex
              Eigenvalues, and returns quantities whose ratios give the
              generalized eigenvalues.  it is usually preceded by  qzhes
              and  qzit  and may be followed by  qzvec.
              
              For the full documentation, please check the original function.
            </remarks>
            <param name="n"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="alfr"></param>
            <param name="alfi"></param>
            <param name="beta"></param>
            <param name="matz"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.qzvec(System.Int32,System.Double[][],System.Double[][],System.Double[],System.Double[],System.Double[],System.Double[][])">
            <summary>
              Adaptation of the original Fortran QZVEC routine from EISPACK.
            </summary>
            <remarks>
              This subroutine is the optional fourth step of the qz algorithm
              for solving generalized matrix eigenvalue problems,
              Siam J. Numer. anal. 10, 241-256(1973) by Moler and Stewart.
              
              This subroutine accepts a pair of real matrices, one of them in
              quasi-triangular form (in which each 2-by-2 block corresponds to
              a pair of complex eigenvalues) and the other in upper triangular
              form.  It computes the eigenvectors of the triangular problem and
              transforms the results back to the original coordinate system.
              it is usually preceded by  qzhes,  qzit, and  qzval.
              
              For the full documentation, please check the original function.
            </remarks>
            <param name="n"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="alfr"></param>
            <param name="alfi"></param>
            <param name="beta"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.Epsilon(System.Double)">
            <summary>
              Estimates unit round-off in quantities of size x.
            </summary>
            <remarks>
              This is a port of the epslon function from EISPACK.
            </remarks>
            
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.Sign(System.Double,System.Double)">
            <summary>
              Returns <paramref name="a"/> with the sign of <paramref name="b"/>. 
            </summary>
            
            <remarks>
              This is a port of the sign transfer function from EISPACK,
              and is is equivalent to C++'s std::copysign function.
            </remarks>
            
            <returns>If B > 0 then the result is ABS(A), else it is -ABS(A).</returns>
            
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="T:UMapx.Decomposition.EVD">
            <summary>
            Defines eigenvalue decomposition.
            <remarks>
            The eigenvalue decomposition is the representation of the square matrix A in the form of the product of three matrices A = V * D * inv (V), where V is the matrix of spectral vectors and D is the diagonal (generally complex) matrix of eigenvalues.
            The matrix A can also be represented as the product of three matrices: A = V * R * inv (V), where R is a real almost diagonal eigenvalue matrix.
            Not all matrices can be represented in this form, but only those that have a complete set of eigenvectors.
            Eigenvalue decomposition can be used to find the eigenvalues ​​and eigenvectors of the matrix, solve linear systems of equations, invert the matrix, find the determinant of the matrix, and calculate the analytic functions of the matrices.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.#ctor(System.Double[0:,0:],System.Double)">
            <summary>
            Initializes eigenvalue decomposition.
            </summary>
            <param name="A">Square matrix</param>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Decomposition.EVD.V">
            <summary>
            Gets eigenvectors.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.EVD.D">
            <summary>
            Gets eigenvalues.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.EVD.R">
            <summary>
            Gets the real diagonal eigenvalue matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.EVD.H">
            <summary>
            Gets the Hessenberg form.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.tred2">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.tql2">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.orthes">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.hqr2">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.cdiv(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="xr"></param>
            <param name="xi"></param>
            <param name="yr"></param>
            <param name="yi"></param>
            <param name="cdivr"></param>
            <param name="cdivi"></param>
        </member>
        <member name="T:UMapx.Decomposition.LDU">
            <summary>
            Defines LDU decomposition.
            <remarks>
            This is the representation of a square matrix A as the product of three matrices: A = L * D * U, where L is the lower triangular matrix, D is the diagonal matrix, and U is the upper triangular matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/LU_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.LDU.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes LDU decomposition.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.LDU.L">
            <summary>
            Gets the lower triangular matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LDU.U">
            <summary>
            Gets the upper triangular matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LDU.D">
            <summary>
            Gets the vector of diagonal elements.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.Diagonal">
            <summary>
            Defines diagonal decomposition.
            <remarks>
            This is a representation of the square matrix A as the product of two matrices: A = B * D, where B is the Square matrix and D is the diagonal matrix.
            This decomposition is used to highlight diagonal matrices in other decompositions (for example, LDU-, LDL-decompositions).
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Diagonal.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes diagonal decomposition.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Diagonal.B">
            <summary>
            Gets the square matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Diagonal.D">
            <summary>
            Gets the vector of diagonal elements.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.LU">
            <summary>
            Defines LU decomposition.
            <remarks>
            This is a representation of the square matrix A as the product of two matrices: A = L * U, where L is the lower triangular matrix, U is the upper triangular matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/LU_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.LU.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes LU decomposition.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.LU.L">
            <summary>
            Gets the lower triangular matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LU.U">
            <summary>
            Gets the upper triangular matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.LU.ludecomp(System.Double[][])">
            <summary>
            
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:UMapx.Decomposition.Cholesky">
            <summary>
            Defines Cholesky decomposition.
            <remarks>
            This is a representation of a symmetric positive definite square matrix in the form of a product: A = L * L ', where L is a lower triangular matrix with strictly positive elements on the diagonal.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cholesky_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Cholesky.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes Cholesky decomposition.
            </summary>
            <param name="A">Square symmetric positive definite matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Cholesky.L">
            <summary>
            Gets the lower triangular matrix L.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Cholesky.U">
            <summary>
            Gets the upper triangular matrix U.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Cholesky.chol(System.Double[][])">
            <summary>
            
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:UMapx.Decomposition.UDL">
            <summary>
            Defines UDL decomposition.
            <remarks>
            This is the representation of a symmetric square matrix as the product of three matrices: A = U * D * L, where U is the upper triangular matrix, D is the diagonal matrix, and L is the lower triangular matrix.
            This decomposition is a specific form of Cholesky decomposition.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.UDL.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes UDL decomposition.
            </summary>
            <param name="A">Square symmetric matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.UDL.U">
            <summary>
            Returns the top triangular matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.UDL.D">
            <summary>
            Returns the diagonal matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.UDL.L">
            <summary>
            Returns the lower triangular matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.UDL.udldecomp(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:UMapx.Decomposition.LDL">
            <summary>
            Defines LDL decomposition.
            <remarks>
            This is a representation of a symmetric positive definite square matrix in the form of a product of three matrices: A = L * D * L ', where L is a lower triangular matrix with strictly positive elements on the diagonal,
            and D is the diagonal matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cholesky_decomposition#LDL_decomposition_2
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.LDL.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes LDL decomposition.
            </summary>
            <param name="A">Square symmetric positive definite matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.LDL.L">
            <summary>
            Gets the lower triangular matrix L.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LDL.U">
            <summary>
            Gets the upper triangular matrix U.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LDL.D">
            <summary>
            Gets the diagonal matrix.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.SVD">
            <summary>
            Defines singular value decomposition.
            <remarks>
            This is a representation of a rectangular matrix A in the form of the product of three matrices A = U * S * V ', where U are left vectors, V are right vectors, and S are singular values.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Singular_value_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.SVD.#ctor(System.Double[0:,0:],System.Int32)">
            <summary>
            Initializes singular value decomposition.
            </summary>
            <param name="A">Matrix</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="P:UMapx.Decomposition.SVD.U">
            <summary>
            Gets the left vectors.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.SVD.S">
            <summary>
            Gets singular values.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.SVD.V">
            <summary>
            Gets the right vectors.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.SVD.P">
            <summary>
            Gets the pseudoinverse matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.SVD.svdcmp(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="A"></param>
        </member>
        <member name="M:UMapx.Decomposition.SVD.Sign(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Decomposition.Polar">
            <summary>
            Defines polar decomposition.
            <remarks>
            This is a representation of a rectangular matrix A in the form of a product of two matrices: A = U * P, where U is a unitary matrix, P is a positive definite matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Polar_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Polar.#ctor(System.Double[0:,0:],System.Int32)">
            <summary>
            Initializes polar decomposition.
            </summary>
            <param name="A">Matrix</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="P:UMapx.Decomposition.Polar.U">
            <summary>
            Gets the unitary matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Polar.P">
            <summary>
            Gets a positive definite matrix.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.NMF">
            <summary>
            Defines non-negative matrix factorization.
            <remarks>
            This is a representation of a rectangular matrix A as the product of two matrices: A = W * H.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Non-negative_matrix_factorization
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.NMF.#ctor(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Initializes non-negative matrix factorization.
            </summary>
            <param name="A">Non-negative matrix</param>
            <param name="r">The dimension of new matrices</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="P:UMapx.Decomposition.NMF.W">
            <summary>
            Gets the left matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.NMF.H">
            <summary>
            Gets the right matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.NMF.nnmf(System.Double[0:,0:],System.Int32)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="iterations"></param>
        </member>
        <member name="T:UMapx.Decomposition.QR">
            <summary>
            Defines QR decomposition.
            <remarks>
            This is a matrix representation in the form of a product of two matrices: A = Q * R, where Q is a unitary (or orthogonal) matrix, and R is an upper triangular matrix.
            QR decomposition is the basis of one of the search methods for eigenvectors and matrix numbers - the QR algorithm.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/QR_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.QR.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes QR decomposition.
            </summary>
            <param name="A">Matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.QR.H">
            <summary>
            Returns a matrix containing Householder reflection vectors.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.QR.R">
            <summary>
            Returns the upper triangular matrix R.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.QR.Q">
            <summary>
            Returns the orthogonal matrix Q.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.QR.qrdecomp(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="A"></param>
        </member>
        <member name="T:UMapx.Decomposition.RQ">
            <summary>
            Defines RQ decomposition.
            <remarks>
            This is a matrix representation in the form of a product of two matrices: A = R * Q, where Q is a unitary (or orthogonal) matrix, and R is an upper triangular matrix.
            RQ decomposition is one of the modifications of the QR algorithm.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/QR_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.RQ.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes RQ decomposition.
            </summary>
            <param name="A">Matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.RQ.R">
            <summary>
            Returns the lower triangular matrix R.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.RQ.Q">
            <summary>
            Returns the orthogonal matrix Q.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.QL">
            <summary>
            Defines the QL decomposition of a square matrix.
            <remarks>
            This is a representation of a matrix in the form of a product of two matrices: A = Q * L, where Q is a unitary (or orthogonal) matrix and L is a lower triangular matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/QR_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.QL.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes the QL decomposition of a square matrix.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.QL.L">
            <summary>
            Returns the lower triangular matrix L.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.QL.Q">
            <summary>
            Returns the orthogonal matrix Q.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.LQ">
            <summary>
            Defines LQ decomposition.
            <remarks>
            This is the representation of a matrix in the form of a product of two matrices: A = L * Q, where Q is a unitary (or orthogonal) matrix, and L is a lower triangular matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/QR_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.LQ.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes LQ decomposition.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.LQ.L">
            <summary>
            Returns the lower triangular matrix L.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LQ.Q">
            <summary>
            Returns the orthogonal matrix Q.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.GramSchmidt">
            <summary>
            Defines the Gram-Schmidt orthogonalization process.
            <remarks>
            In mathematics, in particular linear algebra and numerical analysis, the Gram-Schmidt process is a method of orthonormalizing a set of vectors
            in the space of internal works. This procedure is actively used for orthogonalization of bases.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.GramSchmidt.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes the Gram-Schmidt orthogonalization process.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.GramSchmidt.Q">
            <summary>
            Gets the orthogonal matrix Q.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.GramSchmidt.Proj(System.Double[],System.Double[])">
            <summary>
            Returns the projection of horizontal vectors.
            proj[e, a]' = (e * a') / (e * e') .* e
            </summary>
            <param name="e">Array</param>
            <param name="a">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Decomposition.GramSchmidt.Proj(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the projection of horizontal vectors.
            proj[e, a]' = (e * a') / (e * e') .* e
            </summary>
            <param name="e">Array</param>
            <param name="a">Array</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Decomposition.Householder">
            <summary>
            Defines Householder transformation.
            <remarks>
            This is a linear transformation H (u) of the vector space V, which describes its mapping with respect to the hyperplane,
            which passes through the origin. It was proposed in 1958 by the American mathematician Elston Scott Householder. Widely used in linear algebra for QR decomposition of a matrix.
            In addition, the Householder transform is actively used for orthogonalization of bases; ultimately, the Householder matrix has the following properties:
            H = H', H' * H = I; det(H) = -1.
            In this class, two types of the Householder transform are implemented: reduction to a three-diagonal matrix and construction of the Householder matrix from a given vector.
            In the first case, the original Square matrix is defined as: A = H * T * H '.
            More information can be found on the website: 
            https://en.wikipedia.org/wiki/Householder_transformation
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Householder.#ctor(System.Double[])">
            <summary>
            Initializes Householder transformation.
            </summary>
            <param name="v">Array</param>
        </member>
        <member name="M:UMapx.Decomposition.Householder.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes Householder transformation.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Householder.H">
            <summary>
            Returns the Householder matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Householder.T">
            <summary>
            Gets the diagonal matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Householder.hmatx(System.Double[])">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:UMapx.Decomposition.Householder.tred2(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:UMapx.Decomposition.Power">
            <summary>
            Defines power iteration.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Power_iteration
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Power.#ctor(System.Double[0:,0:],System.Int32)">
            <summary>
            Initializes power iteration.
            </summary>
            <param name="A">Matrix</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="P:UMapx.Decomposition.Power.V">
            <summary>
            Returns a vector of eigenvalues.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Power.J">
            <summary>
            Returns the diagonalized matrix of eigenvalues.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.Arnoldi">
            <summary>
            Defines Arnoldi transform.
            <remarks>
            This transformation is used to reduce the square matrix to the Hessenberg form.
            The matrix A is represented as the product of three matrices: A = Q * H * Q', where H is the upper Hessenberg triangular matrix, Q is the orthogonal matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Arnoldi_iteration
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Arnoldi.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes Arnoldi transformation.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Arnoldi.Q">
            <summary>
            Returns the orthogonal matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Arnoldi.H">
            <summary>
            Returns the upper triangular Hessenberg matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Arnoldi.arnoldi(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="n"></param>
            <param name="m"></param>
        </member>
        <member name="T:UMapx.Decomposition.Lanczos">
            <summary>
            Defines Lanczos transform.
            <remarks>
            This transformation is used to represent the symmetric matrix A as a product
            of three matrices: A = Q * T * Q', where T is a tridiagonal matrix, and Q is an orthogonal matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Lanczos_algorithm
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Lanczos.#ctor(System.Double[0:,0:],System.Boolean)">
            <summary>
            Initializes Lanczos transformation.
            </summary>
            <param name="A">Symmetric matrix</param>
            <param name="full">Full reorthogonalization or not</param>
        </member>
        <member name="P:UMapx.Decomposition.Lanczos.Q">
            <summary>
            Returns the orthogonal matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Lanczos.T">
            <summary>
            Returns a tridiagonal matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Lanczos.lanczos(System.Double[0:,0:],System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="n"></param>
            <param name="full"></param>
        </member>
        <member name="T:UMapx.Distribution.Gaussian">
            <summary>
            Defines the Gaussian distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Normal_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gaussian.#ctor">
            <summary>
            Initializes the Gaussian distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gaussian.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Gaussian distribution.
            </summary>
            <param name="sigma">Standard deviation</param>
            <param name="mu">Mathematical expectation</param>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Sigma">
            <summary>
            Gets or sets the standard deviation.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Mu">
            <summary>
            Gets or sets the mathematical expectation.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gaussian.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Gaussian.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.LogGaussian">
            <summary>
            Defines the logarithmic Gaussian distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Log-normal_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogGaussian.#ctor">
            <summary>
            Initializes the logarithmic Gaussian distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogGaussian.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the logarithmic Gaussian distribution.
            </summary>
            <param name="sigma">Standard deviation</param>
            <param name="mu">Mathematical expectation</param>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Sigma">
            <summary>
            Gets or sets the standard deviation.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Mu">
            <summary>
            Gets or sets the value of the mathematical expectation.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogGaussian.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.LogGaussian.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Wigner">
            <summary>
            Defines the Wiener semicircular distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wigner_semicircle_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Wigner.#ctor(System.Double)">
            <summary>
            Initializes the Wiener semicircular distribution.
            </summary>
            <param name="r">Radius</param>
        </member>
        <member name="P:UMapx.Distribution.Wigner.R">
            <summary>
            Gets or sets the radius value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Wigner.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Wigner.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Rayleigh">
            <summary>
            Defines the logarithmic distribution of Rayleigh.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Rayleigh_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Rayleigh.#ctor">
            <summary>
            Initializes the Rayleigh logarithmic distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Rayleigh.#ctor(System.Double)">
            <summary>
            Initializes the Rayleigh logarithmic distribution.
            </summary>
            <param name="sigma">Scale parameter</param>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Sigma">
            <summary>
            Gets or sets the value of the scale parameter.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Rayleigh.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Rayleigh.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Exponential">
            <summary>
            Defines the exponential distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Exponential_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Exponential.#ctor">
            <summary>
            Initializes an exponential distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Exponential.#ctor(System.Double)">
            <summary>
            Initializes an exponential distribution.
            </summary>
            <param name="lambda">Intensity parameter (0, + inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Lambda">
            <summary>
            Gets or sets the value of the intensity parameter (0, + inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Exponential.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Exponential.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Cauchy">
            <summary>
            Defines the Cauchy distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cauchy_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Cauchy.#ctor">
            <summary>
            Initializes the Cauchy distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Cauchy.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Cauchy distribution.
            </summary>
            <param name="gamma">Scale factor (0, + inf)</param>
            <param name="x0">Shift coefficient</param>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Gamma">
            <summary>
            Gets or sets the value of the scale factor (0, + inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.X0">
            <summary>
            Gets or sets the value of the shift coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Cauchy.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Cauchy.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Weibull">
            <summary>
            Defines the Weibull distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Weibull_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Weibull.#ctor">
            <summary>
            Initializes the Weibull distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Weibull.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Weibull distribution.
            </summary>
            <param name="lambda">Scale factor (0, + inf)</param>
            <param name="k">Shape factor (0, + inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Lambda">
            <summary>
            Gets or sets the value of the scale factor (0, + inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.K">
            <summary>
            Gets or sets the value of the form factor (0, + inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Weibull.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Weibull.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Laplace">
            <summary>
            Defines the Laplace distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Laplace_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Laplace.#ctor">
            <summary>
            Initializes the Laplace distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Laplace.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Laplace distribution.
            </summary>
            <param name="alfa">Scale factor (0, + inf)</param>
            <param name="beta">Shift coefficient</param>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Alfa">
            <summary>
            Gets or sets the value of the scale factor (0, + inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Beta">
            <summary>
            Gets or sets the value of the shift coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Laplace.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Laplace.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Geometric">
            <summary>
            Defines the geometric distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Geometric_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Geometric.#ctor">
            <summary>
            Initializes the geometric distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Geometric.#ctor(System.Double)">
            <summary>
            Initializes the geometric distribution.
            </summary>
            <param name="p">Probability of "success" [0, 1]</param>
        </member>
        <member name="P:UMapx.Distribution.Geometric.P">
            <summary>
            Gets or sets the probability value of "success" [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Geometric.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Geometric.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Poisson">
            <summary>
            Defines the Poisson distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Poisson_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Poisson.#ctor">
            <summary>
            Initializes the Poisson distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Poisson.#ctor(System.Double)">
            <summary>
            Initializes the Poisson distribution.
            </summary>
            <param name="lambda">Parameter λ (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Lambda">
            <summary>
            Gets or sets the value of the parameter λ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Poisson.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Poisson.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Poisson.Row(System.Double)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Distribution.Uniform">
            <summary>
            Defines the uniform distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Uniform.#ctor">
            <summary>
            Initializes the uniform distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Uniform.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the uniform distribution.
            </summary>
            <param name="a">Shift parameter a</param>
            <param name="b">Shift parameter b</param>
        </member>
        <member name="P:UMapx.Distribution.Uniform.A">
            <summary>
            Gets or sets the shift parameter a.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.B">
            <summary>
            Gets or sets the shift parameter b.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Uniform.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Uniform.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Beta">
            <summary>
            Defines the beta distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Beta_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Beta.#ctor">
            <summary>
            Initializes beta distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Beta.#ctor(System.Double,System.Double)">
            <summary>
            Initializes beta distribution.
            </summary>
            <param name="a">Parameter a</param>
            <param name="b">Parameter b</param>
        </member>
        <member name="P:UMapx.Distribution.Beta.A">
            <summary>
            Gets or sets the parameter a.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.B">
            <summary>
            Gets or sets the parameter b.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Beta.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Beta.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Beta.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Gamma">
            <summary>
            Defines the Gamma-distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gamma_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gamma.#ctor">
            <summary>
            Initializes the Gamma-distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gamma.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Gamma-distribution.
            </summary>
            <param name="thetta">Parameter θ (0, +inf)</param>
            <param name="k">Parameter k (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Thetta">
            <summary>
            Gets or sets the parameter θ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.K">
            <summary>
            Gets or sets the parameter k (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gamma.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Gamma.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Pareto">
            <summary>
            Defines the Pareto distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Pareto_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Pareto.#ctor">
            <summary>
            Initializes the Pareto distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Pareto.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Pareto distribution.
            </summary>
            <param name="xm">Scale factor θ (0, +inf)</param>
            <param name="k">Parameter k (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Xm">
            <summary>
            Gets or sets the scale factor Xm (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.K">
            <summary>
            Gets or sets the scale factor k (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Pareto.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Pareto.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Bernoulli">
            <summary>
            Defines the distribution of Bernoulli.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Bernoulli_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Bernoulli.#ctor">
            <summary>
            Initializes a Bernoulli distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Bernoulli.#ctor(System.Double)">
            <summary>
            Initializes a Bernoulli distribution.
            </summary>
            <param name="p">Probability of success [0, 1]</param>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.P">
            <summary>
            Gets or sets the probability of success [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Bernoulli.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Bernoulli.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.LogLogistic">
            <summary>
            Defines the log-logistic distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Log-logistic_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogLogistic.#ctor">
            <summary>
            Initializes the log-logistic distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogLogistic.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the log-logistic distribution.
            </summary>
            <param name="a">Parameter a</param>
            <param name="b">Parameter b</param>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.A">
            <summary>
            Gets or sets the value of parameter a.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.B">
            <summary>
            Gets or sets the value of parameter b.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogLogistic.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.LogLogistic.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Binomial">
            <summary>
            Defines the binomial distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Binomial_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Binomial.#ctor">
            <summary>
            Initializes the binomial distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Binomial.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the binomial distribution.
            </summary>
            <param name="n">Number of experiments (>0)</param>
            <param name="p">Probability of success [0, 1]</param>
        </member>
        <member name="P:UMapx.Distribution.Binomial.N">
            <summary>
            Gets or sets number of experiments.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.P">
            <summary>
            Gets or sets probability of success [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Binomial.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Binomial.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Hypergeometric">
            <summary>
            Defines the hypergeometric distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hypergeometric_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Hypergeometric.#ctor">
            <summary>
            Initializes the hypergeometric distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Hypergeometric.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the hypergeometric distribution.
            </summary>
            <param name="n">Parameter N [0, +inf]</param>
            <param name="k">Parameter D [0, N]</param>
            <param name="d">Parameter K [0, N]</param>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.N">
            <summary>
            Gets or sets the value of the parameter N [0, +inf].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.D">
            <summary>
            Gets or sets the value of the parameter D [0, N].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.K">
            <summary>
            Gets or sets the value of the parameter k [0, N].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Hypergeometric.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Hypergeometric.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Logistic">
            <summary>
            Defines the logistic distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Logistic_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Logistic.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the logistic distribution.
            </summary>
            <param name="mu">Parameter μ</param>
            <param name="s">Parameter s (0, +inf]</param>
        </member>
        <member name="M:UMapx.Distribution.Logistic.#ctor">
            <summary>
            Initializes the logistic distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Mu">
            <summary>
            Gets or sets the value of the parameter μ.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.S">
            <summary>
            Gets or sets the value of the parameter s (0, +inf].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Logistic.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Logistic.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Rademacher">
            <summary>
            Defines the Rademacher distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Rademacher_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Rademacher.#ctor">
            <summary>
            Initializes the Rademacher distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Rademacher.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Rademacher.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="T:UMapx.Distribution.Triangular">
            <summary>
            Defines the triangular distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Triangular_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Triangular.#ctor">
            <summary>
            Initializes the triangular distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Triangular.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the triangular distribution.
            </summary>
            <param name="a">Parameter a ∈ (-inf, +inf)</param>
            <param name="b">Parameter b ∈ (-inf, +inf)</param>
            <param name="c">Parameter c ∈ (-inf, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Triangular.A">
            <summary>
            Gets or sets the value of the parameter a ∈ (-inf, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.B">
            <summary>
            Gets or sets the value of the parameter b ∈ (-inf, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.C">
            <summary>
            Gets or sets the value of the parameter c ∈ (-inf, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Triangular.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Triangular.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Nakagami">
            <summary>
            Defines the distribution of Nakagami.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Nakagami_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.#ctor">
             <summary>
            Initializes the distribution of Nakagami.
             </summary>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the distribution of Nakagami.
            </summary>
            <param name="mu">Shape factor</param>
            <param name="omega">Spread rate</param>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.Initialize(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="mu"></param>
            <param name="omega"></param>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Mu">
            <summary>
            Gets or sets the value of the shape factor.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Omega">
            <summary>
            Gets or sets the spread coefficient value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Entropy">
            <summary>
             Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Levy">
            <summary>
            Defines the Levy distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/L%C3%A9vy_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Levy.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Levy distribution.
            </summary>
            <param name="mu">Shear rate μ</param>
            <param name="c">Scale factor (>0)</param>
        </member>
        <member name="P:UMapx.Distribution.Levy.Mu">
            <summary>
            Gets or sets the shift factor.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.C">
            <summary>
            Gets or sets the scale factor (> 0).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Levy.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Levy.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Logarithmic">
            <summary>
            Defines the logarithmic distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Logarithmic_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Logarithmic.#ctor(System.Double)">
            <summary>
            Initializes the logarithmic distribution.
            </summary>
            <param name="p">Parameter</param>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.P">
            <summary>
            Gets or sets the value of the parameter p ∈ (0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Logarithmic.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Logarithmic.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="T:UMapx.Distribution.BetaPrime">
            <summary>
            Defines the beta distribution of the second kind.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Beta_prime_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.BetaPrime.#ctor(System.Double,System.Double)">
            <summary>
            Initializes beta distribution of the second kind.
            </summary>
            <param name="alpha">Parameter α (0, +inf)</param>
            <param name="beta">Parameter β (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Alpha">
            <summary>
            Gets or sets the value of the parameter α ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Beta">
            <summary>
            Gets or sets the value of the parameter β ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.BetaPrime.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.BetaPrime.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.BirnbaumSaunders">
            <summary>
            Defines the Birnbaum-Saunders distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Birnbaum–Saunders_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.BirnbaumSaunders.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the Birnbaum-Saunders distribution.
            </summary>
            <param name="mu">Shear rate μ ∈ (0, +inf)</param>
            <param name="beta">Scale factor β ∈ (0, +inf).</param>
            <param name="gamma">Shape factor γ ∈ (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Mu">
            <summary>
            Gets or sets the shift factor μ ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Beta">
            <summary>
            Gets or sets the scale factor β ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Gamma">
            <summary>
            Gets or sets the form factor γ ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.BirnbaumSaunders.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.BirnbaumSaunders.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.ChiSquare">
            <summary>
            Defines the xi-square distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Chi-squared_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ChiSquare.#ctor(System.Int32)">
            <summary>
            Initializes the xi-square distribution.
            </summary>
            <param name="k">Degrees of freedom (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.K">
            <summary>
            Gets or sets the degrees of freedom (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ChiSquare.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.ChiSquare.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Gumbel">
            <summary>
            Defines the Gumbel distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gumbel_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gumbel.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Gumbel distribution.
            </summary>
            <param name="mu">Shear rate μ ∈ (-inf, +inf)</param>
            <param name="beta">Scale factor β ∈ (0, +inf).</param>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Mu">
            <summary>
            Gets or sets the shift factor μ ∈ (-inf, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Beta">
            <summary>
            Gets or sets the scale factor β ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gumbel.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Gumbel.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Student">
            <summary>
            Defines the Student's distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Student%27s_t-distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Student.#ctor(System.Double)">
            <summary>
            Initializes the Student's distribution.
            </summary>
            <param name="n">Degrees of freedom n ∈ (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Student.N">
            <summary>
            Gets or sets degrees of freedom n ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Student.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Student.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Student.LogFunction(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Distribution.UQuadratic">
            <summary>
            Defines the U-quadratic distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/U-quadratic_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.UQuadratic.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the U-quadratic distribution.
            </summary>
            <param name="a">Parameter a ∈ (0, +inf)</param>
            <param name="b">Parameter b ∈ (a, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.A">
            <summary>
            Gets or sets the value of the parameter a ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.B">
            <summary>
            Gets or sets the value of the parameter b ∈ (a, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.UQuadratic.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.UQuadratic.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.FisherSnedecor">
            <summary>
            Defines the Fisher distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/F-distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.FisherSnedecor.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the Fisher distribution.
            </summary>
            <param name="d1">First degree of freedom</param>
            <param name="d2">Second degree of freedom</param>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.D1">
            <summary>
            Gets the value of the first degree of freedom.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.D2">
            <summary>
            Gets the value of the second degree of freedom.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.FisherSnedecor.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.FisherSnedecor.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Erlang">
            <summary>
            Defines the distribution of Erlang.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Erlang_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Erlang.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the distribution of Erlang.
            </summary>
            <param name="k">Form parameter k ∈ (0, +inf)</param>
            <param name="lambda">λ-parameter λ ∈ (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Erlang.K">
            <summary>
            Gets or sets the value of the parameter k ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Lambda">
            <summary>
            Gets or sets the value of the parameter λ ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Erlang.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Erlang.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.WrappedCauchy">
            <summary>
            Defines the compact Cauchy distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wrapped_Cauchy_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.WrappedCauchy.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the compact Cauchy distribution.
            </summary>
            <param name="mu">Parameter μ</param>
            <param name="gamma">Parameter γ > 0</param>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Mu">
            <summary>
            Gets or sets the value of the parameter μ.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Gamma">
            <summary>
            Gets or sets the value of the parameter γ > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.WrappedCauchy.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.WrappedCauchy.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Kumaraswamy">
            <summary>
            Defines the distribution of Kumaraswa.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Kumaraswamy_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Kumaraswamy.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the distribution of Kumarasva.
            </summary>
            <param name="a">Form parameter a > 0</param>
            <param name="b">Form parameter b > 0</param>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.A">
            <summary>
            Gets or sets form parameter a > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.B">
            <summary>
            Gets or sets form parameter b > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Kumaraswamy.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Kumaraswamy.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Kumaraswamy.momentGeneratingFunction(System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Distribution.Gompertz">
            <summary>
            Defines the Gompertz distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gompertz_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gompertz.#ctor(System.Double,System.Double)">
             <summary>
            Initializes the Gompertz distribution.
             </summary>
             <param name="eta">Form parameter η > 0</param>
             <param name="b">Scale parameter b > 0</param>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Eta">
            <summary>
            Gets or sets the value of the scale parameter η > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.B">
            <summary>
            Gets or sets the value of the scale parameter b > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gompertz.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Gompertz.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.HyperbolicSecant">
            <summary>
            Defines the hyperbolic secant distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hyperbolic_secant_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.HyperbolicSecant.#ctor">
            <summary>
            Initializes the hyperbolic secant distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.HyperbolicSecant.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.HyperbolicSecant.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Arcsine">
            <summary>
            Defines the arcsine distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Arcsine_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Arcsine.#ctor">
            <summary>
            Initializes the arcsine distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Arcsine.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Arcsine.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Burr">
            <summary>
            Defines the Burr distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Burr_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Burr.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Burr distribution.
            </summary>
            <param name="c">Form parameter c > 0</param>
            <param name="k">Scale parameter k > 0</param>
        </member>
        <member name="P:UMapx.Distribution.Burr.C">
            <summary>
            Gets or sets the value of the scale parameter c > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.K">
            <summary>
            Gets or sets the value of the scale parameter k > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Burr.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Burr.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.FisherZ">
            <summary>
            Defines the Fisher's Z-distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Fisher%27s_z-distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.FisherZ.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Fisher Z-distribution.
            </summary>
            <param name="d1">Degree of freedom d1 > 0</param>
            <param name="d2">Degree of freedom d2 > 0</param>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.D1">
            <summary>
            Gets or sets the degree of freedom d1 > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.D2">
            <summary>
            Gets or sets the degree of freedom d2 > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.FisherZ.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.FisherZ.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.ConeShape">
            <summary>
            Defines the distribution of the conical shape.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cone-shape_distribution_function
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ConeShape.#ctor(System.Double)">
            <summary>
            Initializes the distribution of the conical shape.
            </summary>
            <param name="a">Coefficient</param>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.A">
            <summary>
            Gets or sets the coefficient value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ConeShape.Function(System.Double,System.Double)">
            <summary>
            Returns the value of the kernel density function.
            </summary>
            <param name="eta">Argument</param>
            <param name="tau">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.ConeShape.Distribution(System.Double,System.Double)">
            <summary>
            Returns the value of the kernel distribution function.
            </summary>
            <param name="t">Argument</param>
            <param name="tau">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.ChoiWilliams">
            <summary>
            Defines the distribution of Choi Williams.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Choi%E2%80%93Williams_distribution_function
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ChoiWilliams.#ctor(System.Double)">
            <summary>
            Initializes the Choi-Williams distribution.
            </summary>
            <param name="a">Coefficient</param>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.A">
            <summary>
            Gets or sets the coefficient value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ChoiWilliams.Function(System.Double,System.Double)">
            <summary>
            Returns the value of the kernel density function.
            </summary>
            <param name="eta">Argument</param>
            <param name="tau">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.ChoiWilliams.Distribution(System.Double,System.Double)">
            <summary>
            Returns the value of the kernel distribution function.
            </summary>
            <param name="t">Argument</param>
            <param name="tau">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Bayes">
            <summary>
            Defines the Bayes probability class.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Bayes.#ctor(System.Double[],System.Double[])">
            <summary>
            Initializes the Bayes probability class.
            </summary>
            <param name="stat">Array of statistical probabilities</param>
            <param name="prior">An array of a priori probabilities (before experiment)</param>
        </member>
        <member name="P:UMapx.Distribution.Bayes.General">
            <summary>
            Returns the value of the total probability.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bayes.Probabilities">
            <summary>
            Returns an array of values of posterior probabilities (after the experiment).
            </summary>
        </member>
        <member name="T:UMapx.Distribution.IDistribution">
            <summary>
            Defines the distribution interface.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Imaging.IBitmapFilter2">
            <summary>
            Defines the interface for two images bitmap filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.IBitmapFilter2.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.IBitmapFilter2.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.IBitmapFilter">
            <summary>
            Defines the interface for bitmap filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.IBitmapFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.IBitmapFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.ICanvas">
            <summary>
            Defines the interface of canvas.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ICanvas.Width">
            <summary>
            Gets or sets the width of the canvas.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ICanvas.Height">
            <summary>
            Gets or sets the height of the canvas.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ICanvas.Create">
            <summary>
            Creates canvas.
            </summary>
            <returns>Bitmap</returns>
        </member>
        <member name="T:UMapx.Imaging.Rebuilder">
            <summary>
            Defines an abstract data rebuilding class.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Rebuilder.rebuild">
            <summary>
            Use data rebuilding or not.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Rebuilder.Rebuild">
            <summary>
            Implements the rebuilding of class data.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Correction">
            <summary>
            Defines the mask correction filter.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Correction.values">
            <summary>
            Values.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Correction.space">
            <summary>
            Color space.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Correction.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Correction.#ctor(System.Double[],UMapx.Imaging.Space)">
            <summary>
            Initializes the mask correction filter.
            </summary>
            <param name="values">Mask array</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.#ctor">
            <summary>
            Initializes the mask correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Correction.Values">
            <summary>
            Gets or sets the mask array.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Correction.Space">
            <summary>
            Gets or sets the color space.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Correction.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.ApplyRGB(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.ApplyHSL(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.ApplyHSB(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.ApplyYCbCr(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.ApplyGrayscale(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.RGBACorrection">
            <summary>
            Defines the RGBA mask correction filter.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.RGBACorrection.channel">
            <summary>
            Channel of RGBA.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.RGBACorrection.values">
            <summary>
            Values.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RGBACorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RGBACorrection.#ctor(System.Double[],UMapx.Imaging.RGBA)">
            <summary>
            Initializes the RGBA mask correction filter.
            </summary>
            <param name="values">Mask array</param>
            <param name="channel">Channel</param>
        </member>
        <member name="M:UMapx.Imaging.RGBACorrection.#ctor">
            <summary>
            Initializes the RGBA mask correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.RGBACorrection.Values">
            <summary>
            Gets or sets the mask array.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.RGBACorrection.Channel">
            <summary>
            Gets or sets the channel of the RGBA model.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RGBACorrection.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.RGBACorrection.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.LocalCorrection">
            <summary>
            Defines the local mask correction filter.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.LocalCorrection.gb">
            <summary>
            Box blur filter.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.LocalCorrection.values">
            <summary>
            Contrast.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.LocalCorrection.space">
            <summary>
            Color space.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.#ctor">
            <summary>
            Initializes the local mask correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.#ctor(System.Int32,System.Double[0:,0:],UMapx.Imaging.Space)">
            <summary>
            Initializes the local mask correction filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="values">Matrix mask</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.#ctor(System.Int32,System.Int32,System.Double[0:,0:],UMapx.Imaging.Space)">
            <summary>
            Initializes the local mask correction filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="values">Matrix mask</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.#ctor(UMapx.Core.SizeInt,System.Double[0:,0:],UMapx.Imaging.Space)">
            <summary>
            Initializes the local mask correction filter.
            </summary>
            <param name="size">Filter size</param>
            <param name="space">Color space</param>
            <param name="values">Matrix mask</param>
        </member>
        <member name="P:UMapx.Imaging.LocalCorrection.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LocalCorrection.Space">
            <summary>
            Gets or sets the color space.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LocalCorrection.Values">
            <summary>
            Gets or sets the matrix mask.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.ApplyRGB(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.ApplyHSL(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.ApplyHSB(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.ApplyYCbCr(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.ApplyGrayscale(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.RGBALocalCorrection">
            <summary>
            Defines the local RGBA mask correction filter.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.RGBALocalCorrection.gb">
            <summary>
            Box blur filter.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.RGBALocalCorrection.values">
            <summary>
            Contrast.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.RGBALocalCorrection.channel">
            <summary>
            Channel.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RGBALocalCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RGBALocalCorrection.#ctor">
            <summary>
            Initializes the local RGBA mask correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RGBALocalCorrection.#ctor(System.Int32,System.Double[0:,0:],UMapx.Imaging.RGBA)">
            <summary>
            Initializes the local RGBA mask correction filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="channel">Channel</param>
            <param name="values">Matrix mask</param>
        </member>
        <member name="M:UMapx.Imaging.RGBALocalCorrection.#ctor(System.Int32,System.Int32,System.Double[0:,0:],UMapx.Imaging.RGBA)">
            <summary>
            Initializes the local RGBA mask correction filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="channel">Channel</param>
            <param name="values">Matrix mask</param>
        </member>
        <member name="M:UMapx.Imaging.RGBALocalCorrection.#ctor(UMapx.Core.SizeInt,System.Double[0:,0:],UMapx.Imaging.RGBA)">
            <summary>
            Initializes the local RGBA mask correction filter.
            </summary>
            <param name="size">Filter size</param>
            <param name="channel">Channel</param>
            <param name="values">Matrix mask</param>
        </member>
        <member name="P:UMapx.Imaging.RGBALocalCorrection.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.RGBALocalCorrection.Channel">
            <summary>
            Gets or sets the channel of the RGBA model.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.RGBALocalCorrection.Values">
            <summary>
            Gets or sets the matrix mask.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RGBALocalCorrection.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.RGBALocalCorrection.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.RGBALocalCorrection.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.PointAddition">
            <summary>
            Defines the point addition filter.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.PointAddition.points">
            <summary>
            Point matrix.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.PointAddition.width">
            <summary>
            Image width.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.PointAddition.height">
            <summary>
            Image height.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointAddition.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointAddition.#ctor(UMapx.Core.PointInt[0:,0:])">
            <summary>
            Initializes the point addition filter.
            </summary>
            <param name="points">Array of ordered pairs of X and Y</param>
        </member>
        <member name="M:UMapx.Imaging.PointAddition.#ctor">
            <summary>
            Initializes the point addition filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PointAddition.Points">
            <summary>
            Gets or sets point matrix.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointAddition.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.PointAddition.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.PointAddition.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.PointMultiplication">
            <summary>
            Defines the point multiplication filter.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.PointMultiplication.points">
            <summary>
            Point matrix.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.PointMultiplication.width">
            <summary>
            Image width.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.PointMultiplication.height">
            <summary>
            Image height.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointMultiplication.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointMultiplication.#ctor(UMapx.Core.PointInt[0:,0:])">
            <summary>
            Initializes the point multiplication filter.
            </summary>
            <param name="points">Array of ordered pairs of X and Y</param>
        </member>
        <member name="M:UMapx.Imaging.PointMultiplication.#ctor">
            <summary>
            Initializes the point multiplication filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PointMultiplication.Points">
            <summary>
            Gets or sets point matrix.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointMultiplication.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.PointMultiplication.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.PointMultiplication.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.InvertChannels">
            <summary>
            Defines the channels inversion filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.InvertChannels.#ctor(UMapx.Imaging.Space)">
            <summary>
            Initializes the channels inversion filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.InvertChannels.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Threshold">
            <summary>
            Defines the threshold filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Threshold.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the threshold filter.
            </summary>
            <param name="threshold">Threshold [0, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.Threshold.#ctor">
            <summary>
            Initializes the threshold filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Threshold.Value">
            <summary>
            Gets or sets the threshold value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Threshold.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LevelsCorrection">
            <summary>
            Defines the levels correction filter.
            <remarks>
            Filter usage example:
            https://digital-photography-school.com/using-levels-photoshop-image-correct-color-contrast/
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LevelsCorrection.#ctor(UMapx.Core.RangeDouble,UMapx.Core.RangeDouble,UMapx.Imaging.Space)">
            <summary>
            Initializes the levels correction filter.
            </summary>
            <param name="input">Input channel values</param>
            <param name="output">Output channel values</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.LevelsCorrection.#ctor">
            <summary>
            Initializes the levels correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LevelsCorrection.Input">
            <summary>
            Gets or sets input channel values.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LevelsCorrection.Output">
            <summary>
            Gets or sets output channel values.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LevelsCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.ExposureCorrection">
            <summary>
            Defines the exposure correction filter.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Exposure_(photography)
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ExposureCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the exposure correction filter.
            </summary>
            <param name="average">Average [0, 2500]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.ExposureCorrection.#ctor">
            <summary>
            Initializes the exposure correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ExposureCorrection.Average">
            <summary>
            Gets or sets the average [0, 2500].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ExposureCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LinearCorrection">
            <summary>
            Defines the linear correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LinearCorrection.#ctor(UMapx.Core.RangeDouble,System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the linear correction filter.
            </summary>
            <param name="range">Range values</param>
            <param name="delta">Delta [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.LinearCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the linear correction filter.
            </summary>
            <param name="delta">Delta [-100, 100]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.LinearCorrection.#ctor">
            <summary>
            Initializes the linear correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LinearCorrection.Range">
            <summary>
            Gets or sets range values.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LinearCorrection.Delta">
            <summary>
            Gets or sets the delta value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LinearCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.SinCorrection">
            <summary>
            Defines the sine correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SinCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the sine correction filter.
            </summary>
            <param name="delta">Delta [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.SinCorrection.#ctor">
            <summary>
            Initializes the sine correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.SinCorrection.Delta">
            <summary>
            Gets or sets the delta value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SinCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.CosCorrection">
            <summary>
            Defines the cosine correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CosCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the cosine correction filter.
            </summary>
            <param name="delta">Delta [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.CosCorrection.#ctor">
            <summary>
            Initializes the cosine correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CosCorrection.Delta">
            <summary>
            Gets or sets the delta value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CosCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LogCorrection">
            <summary>
            Defines the logarithmic correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LogCorrection.#ctor(System.Double,System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the logarithmic correction filter.
            </summary>
            <param name="nbase">Logarithm base</param>
            <param name="delta">Delta [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.LogCorrection.#ctor">
            <summary>
            Initializes the logarithmic correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LogCorrection.Base">
            <summary>
            Gets or sets the base value of the logarithm.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LogCorrection.Delta">
            <summary>
            Gets or sets the delta value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LogCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.BrightnessCorrection">
            <summary>
            Defines the brightness correction filter.
            <remarks>
            More information can be found on the website:
            http://esate.ru/uroki/OpenGL/image_processing/_p4106/
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BrightnessCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the brightness correction filter.
            </summary>
            <param name="brightness">Brightness [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.BrightnessCorrection.#ctor">
            <summary>
            Initializes the brightness correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.BrightnessCorrection.Brightness">
            <summary>
            Gets or sets the brightness value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BrightnessCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.ContrastCorrection">
            <summary>
            Defines the contrast correction filter.
            <remarks>
            More information can be found on the website:
            http://esate.ru/uroki/OpenGL/image_processing/_p4106/
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ContrastCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the contrast correction filter.
            </summary>
            <param name="value">Contrast [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.ContrastCorrection.#ctor">
            <summary>
            Initializes the contrast correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ContrastCorrection.Contrast">
            <summary>
            Gets or sets the contrast value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ContrastCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.GammaCorrection">
            <summary>
            Defines the gamma correction filter.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gamma_correction
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.GammaCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the gamma correction filter.
            </summary>
            <param name="g">Gamma [0, 20]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.GammaCorrection.#ctor">
            <summary>
            Initializes the gamma correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.GammaCorrection.Gamma">
            <summary>
            Gets or sets the gamma value [0, 20].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.GammaCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.ShiftCorrection">
            <summary>
            Defines the shift correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShiftCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the shift correction filter.
            </summary>
            <param name="offset">Offset (-0.5, 0.5)</param>
            <param name="space">Color space</param>
        </member>
        <member name="P:UMapx.Imaging.ShiftCorrection.Offset">
            <summary>
            Gets or sets the offset value (-0.5, 0.5).
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShiftCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.ContrastEnhancement">
            <summary>
            Defines the global contrast enhancement filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ContrastEnhancement.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the global contrast enhancement filter.
            </summary>
            <param name="contrast">Contrast [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="P:UMapx.Imaging.ContrastEnhancement.Contrast">
            <summary>
            Gets or sets the contrast coefficent value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ContrastEnhancement.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Quantization">
            <summary>
            Defines the quantization filter.
            <remarks>
            More information can be found on the website:
            http://en.wikipedia.org/wiki/Posterization
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Quantization.#ctor(System.Int32,UMapx.Imaging.Space)">
            <summary>
            Initializes the quantization filter.
            </summary>
            <param name="levels">Number of levels</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.Quantization.#ctor">
            <summary>
            Initializes the quantization filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Quantization.Levels">
            <summary>
            Gets or sets number of levels.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Quantization.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LocalThreshold">
            <summary>
            Defines the Bradley local threshold filter.
            <remarks>
            More information can be found on the website:
            http://www.scs.carleton.ca/~roth/iit-publications-iti/docs/gerh-50002.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalThreshold.#ctor(System.Int32,UMapx.Imaging.Space,System.Double)">
            <summary>
            Initializes the Bradley local threshold filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="difference">Difference [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.LocalThreshold.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double)">
            <summary>
            Initializes the Bradley local threshold filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="difference">Difference [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.LocalThreshold.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double)">
            <summary>
            Initializes the Bradley local threshold filter.
            </summary>
            <param name="size">Radius</param>
            <param name="space">Color space</param>
            <param name="difference">Difference [0, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.LocalThreshold.Difference">
            <summary>
            Gets or sets the difference [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalThreshold.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LocalContrastEnhancement">
            <summary>
            Defines the local contrast enhancement filter.
            <remarks>
            This filter is also known as "Unsharp Masking."
            More information can be found on the website:
            http://www.cambridgeincolour.com/tutorials/local-contrast-enhancement.htm
            Filter usage example:
            http://www.knowhowtransfer.com/photoshop-professional-plugins/alce-local-contrast-enhancer/
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastEnhancement.#ctor(System.Int32,UMapx.Imaging.Space,System.Double)">
            <summary>
            Initializes the local contrast enhancement filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="contrast">Contrast [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastEnhancement.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double)">
            <summary>
            Initializes the local contrast enhancement filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="contrast">Contrast [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastEnhancement.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double)">
            <summary>
            Initializes the local contrast enhancement filter.
            </summary>
            <param name="size">Filter size</param>
            <param name="space">Color space</param>
            <param name="contrast">Contrast [-1, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.LocalContrastEnhancement.Contrast">
            <summary>
            Gets or sets the contrast value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastEnhancement.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LocalContrastInversion">
            <summary>
            Defines the local contrast inversion filter.
            <remarks>
            This filter is used to equalize the illumination of images by averaging the brightness.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastInversion.#ctor(System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the local contrast inversion filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast (0, 1]</param>
            <param name="b">Offset (0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastInversion.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the local contrast inversion filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="a">Contrast (0, 1]</param>
            <param name="b">Offset (0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastInversion.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the local contrast inversion filter.
            </summary>
            <param name="size">Filter size</param>
            <param name="space">Color space</param>
            <param name="a">Contrast (0, 1]</param>
            <param name="b">Offset (0, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.LocalContrastInversion.A">
            <summary>
            Gets or sets the contrast value (0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LocalContrastInversion.B">
            <summary>
            Gets or sets the offset value (0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastInversion.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.KsiContrastEnhancement">
            <summary>
            Defines the contrast enhancement filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.KsiContrastEnhancement.#ctor(System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the contrast enhancement filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.KsiContrastEnhancement.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the contrast enhancement filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.KsiContrastEnhancement.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the contrast enhancement filter.
            </summary>
            <param name="size">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset [-1, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.KsiContrastEnhancement.A">
            <summary>
            Gets or sets the contrast value [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.KsiContrastEnhancement.B">
            <summary>
            Gets or sets the offset value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.KsiContrastEnhancement.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.HomomorphicEnhancement">
            <summary>
            Defines the filter for homomorphic processing.
            <remarks>
            A homomorphic filter is most often used to equalize the illumination of images.
            It simultaneously normalizes the brightness of the image and increases the contrast.
            
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Homomorphic_filtering
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HomomorphicEnhancement.#ctor(System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the filter for homomorphic processing.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.HomomorphicEnhancement.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the filter for homomorphic processing.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.HomomorphicEnhancement.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the filter for homomorphic processing.
            </summary>
            <param name="size">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.HomomorphicEnhancement.A">
            <summary>
            Gets or sets the contrast value [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HomomorphicEnhancement.B">
            <summary>
            Gets or sets the offset value (0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HomomorphicEnhancement.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.SingleScaleRetinex">
            <summary>
            Defines the Single Scale Retinex filter.
            <remarks>
            More information can be found on the website:
            https://dragon.larc.nasa.gov/background/pubabs/papers/gspx1.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SingleScaleRetinex.#ctor(System.Int32,UMapx.Imaging.Space,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the Single Scale Retinex filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <param name="nbase">Logarithm base</param>
        </member>
        <member name="M:UMapx.Imaging.SingleScaleRetinex.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the Single Scale Retinex filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <param name="nbase">Logarithm base</param>
        </member>
        <member name="M:UMapx.Imaging.SingleScaleRetinex.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the Single Scale Retinex filter.
            </summary>
            <param name="size">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <param name="nbase">Logarithm base</param>
        </member>
        <member name="P:UMapx.Imaging.SingleScaleRetinex.A">
            <summary>
            Gets or sets the contrast [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.SingleScaleRetinex.B">
            <summary>
            Gets or sets the offset value (0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.SingleScaleRetinex.Base">
            <summary>
            Gets or sets the logarithm base.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SingleScaleRetinex.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.ShadowsHighlightsCorrection">
            <summary>
            Defines the shadows and lights correction filter.
            <remarks>
            Shadow-Highlights correction is used to correct unevenly lit images. Unlike other local algorithms
            (for example, Single Scale Retinex, Homomorphic Enhancement, Flat-Field Correction) filter allows you to adjust the brightness values separately in dark and bright areas
            Images.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShadowsHighlightsCorrection.#ctor(System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the shadows and lights correction filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="shadows">Shadows [0, 1]</param>
            <param name="highlights">Highlights [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.ShadowsHighlightsCorrection.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the shadows and lights correction filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="shadows">Shadows [0, 1]</param>
            <param name="highlights">Highlights [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.ShadowsHighlightsCorrection.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the shadows and lights correction filter.
            </summary>
            <param name="size">Radius</param>
            <param name="space">Color space</param>
            <param name="shadows">Shadows [0, 1]</param>
            <param name="highlights">Highlights [0, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.ShadowsHighlightsCorrection.Shadows">
            <summary>
            Gets or sets the shadows value [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ShadowsHighlightsCorrection.Highlights">
            <summary>
            Gets or sets the highlights value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShadowsHighlightsCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShadowsHighlightsCorrection.value2gamma(System.Double)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Imaging.FlatFieldCorrection">
            <summary>
            Defines the flat-field correction filter.
            <remarks>
            More information can be found on the website:
            http://imagej.net/Image_Intensity_Processing
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.#ctor(System.Int32)">
            <summary>
            Initializes the flat-field correction filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the flat-field correction filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the flat-field correction filter.
            </summary>
            <param name="size">Radius</param>
        </member>
        <member name="P:UMapx.Imaging.FlatFieldCorrection.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.flatfield(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.globalmeans(System.Drawing.Imaging.BitmapData)">
            <summary>
            
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Imaging.HSBGrayscale">
            <summary>
            Defines the grayscale filter based on the HSB structure.
            <remarks>
            The filter discolors the specified part of the image.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSBGrayscale.#ctor(UMapx.Core.RangeInt)">
            <summary>
            Initializes the grayscale filter based on the HSB structure.
            </summary>
            <param name="hue">Hue range [0, 359]</param>
        </member>
        <member name="M:UMapx.Imaging.HSBGrayscale.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the grayscale filter based on the HSB structure.
            </summary>
            <param name="min">Lower bound [0, 359]</param>
            <param name="max">Upper bound [0, 359]</param>
        </member>
        <member name="P:UMapx.Imaging.HSBGrayscale.Hue">
            <summary>
            Gets or sets the hue range [0, 359].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSBGrayscale.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HSBGrayscale.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.HSLGrayscale">
            <summary>
            Defines the grayscale filter based on the HSL structure.
            <remarks>
            The filter discolors the specified part of the image.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSLGrayscale.#ctor(UMapx.Core.RangeInt)">
            <summary>
            Initializes the grayscale filter based on the HSL structure.
            </summary>
            <param name="hue">Hue range [0, 359]</param>
        </member>
        <member name="M:UMapx.Imaging.HSLGrayscale.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the grayscale filter based on the HSL structure.
            </summary>
            <param name="min">Lower bound [0, 359]</param>
            <param name="max">Upper bound [0, 359]</param>
        </member>
        <member name="P:UMapx.Imaging.HSLGrayscale.Hue">
            <summary>
            Gets or sets the hue range [0, 359].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSLGrayscale.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HSLGrayscale.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Grayscale">
            <summary>
            Defines the grayscale filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Grayscale.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the grayscale filter.
            </summary>
            <param name="cr">Red</param>
            <param name="cg">Green</param>
            <param name="cb">Blue</param>
        </member>
        <member name="M:UMapx.Imaging.Grayscale.#ctor">
            <summary>
            Initializes the grayscale filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Grayscale.Cr">
            <summary>
            Gets or sets the red channel value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Grayscale.Cg">
            <summary>
            Gets or sets the green channel value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Grayscale.Cb">
            <summary>
            Gets or sets the blue channel value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Grayscale.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Grayscale.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="P:UMapx.Imaging.Grayscale.BT709">
            <summary>
            Initializes the grayscale filter (BT709).
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Grayscale.RY">
            <summary>
            Initializes the grayscale filter (R-Y).
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Grayscale.Y">
            <summary>
            Initializes the grayscale filter Y.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Grayscale.IsGrayscale(System.Drawing.Bitmap)">
            <summary>
            Checks if Bitmap is a grayscale image.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:UMapx.Imaging.PhotoFilter">
            <summary>
            Defines the color photo filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PhotoFilter.#ctor(UMapx.Core.IDoubleMesh,System.Drawing.Color,System.Double)">
            <summary>
            Initializes the color photo filter.
            </summary>
            <param name="blendf">Blend function</param>
            <param name="color">Color</param>
            <param name="strength">Strenght [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.PhotoFilter.#ctor(System.Drawing.Color,System.Double)">
            <summary>
            Initializes the color photo filter.
            </summary>
            <param name="color">Color</param>
            <param name="strength">Strenght [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.PhotoFilter.#ctor">
            <summary>
            Initializes the color photo filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.BlendFunction">
            <summary>
            Gets or sets the blend function.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Color">
            <summary>
            gets or sets the filter color.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Strength">
            <summary>
            Gets or sets filter strenght [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PhotoFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.PhotoFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Cold82">
            <summary>
            Initializes the cold filter (82).
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.ColdLBB">
            <summary>
            Initializes the cold filter LBB.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Warm81">
            <summary>
            Initializes the hot filter (81).
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.WarmLBA">
            <summary>
            Initializes the hot filter LBA.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Sepia">
            <summary>
            Initializes the sepia filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Red">
            <summary>
            Initializes the red filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Blue">
            <summary>
            Initializes the blue filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Green">
            <summary>
            Initializes the green filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Underwater">
            <summary>
            Initializes the "underwater" filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Purple">
            <summary>
            Initializes the purple filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Orange">
            <summary>
            Initializes the orange filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Yellow">
            <summary>
            Initializes the yellow filter.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.TemperatureCorrection">
            <summary>
            Defines the temperature correction filter.
            <remarks>
            The filter uses an approximation of the Planck curve.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TemperatureCorrection.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the temperature correction filter.
            </summary>
            <param name="temperature">Temperature [1E3K, 1E4K]</param>
            <param name="strength">Strenght [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.TemperatureCorrection.#ctor">
            <summary>
            Initializes the temperature correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.TemperatureCorrection.Temperature">
            <summary>
            Gets or sets the temperature [1E3K, 1E4K].
            </summary>
        </member>
        <member name="T:UMapx.Imaging.YUVPhotoFilter">
            <summary>
            Defines the color filter based on the YUV structure.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.#ctor(System.Drawing.Color,System.Double)">
            <summary>
            Initializes the color filter based on the YUV structure.
            </summary>
            <param name="color">Color</param>
            <param name="strength">Strenght [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.#ctor">
            <summary>
            Initializes the color filter based on the YUV structure.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Color">
            <summary>
            Gets or sets the filter color.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Strength">
            <summary>
            Gets or sets the filter strength [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.IsGrayColor(System.Drawing.Color)">
            <summary>
            Checks if the color is a shade of gray.
            </summary>
            <param name="color">Color</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.AddColor(UMapx.Colorspace.YUV,UMapx.Colorspace.YUV)">
            <summary>
            Blend two colors in YUV space.
            </summary>
            <param name="yuv1">First color</param>
            <param name="yuv2">Second color</param>
            <returns>YUV</returns>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Sepia">
            <summary>
            Initializes the sepia filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Orange">
            <summary>
            Initializes the orange filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Yellow">
            <summary>
            Initializes the yellow filter.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.SaturationCorrection">
            <summary>
            Defines the saturation correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SaturationCorrection.#ctor(System.Double)">
            <summary>
            Initializes the saturation correction filter.
            </summary>
            <param name="saturation">Saturation [-100, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.SaturationCorrection.#ctor">
            <summary>
            Initializes the saturation correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.SaturationCorrection.Saturation">
            <summary>
            Gets or sets the saturation value [-100, 100].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SaturationCorrection.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.SaturationCorrection.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.ColorReplace">
            <summary>
            Defines the color replacement filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ColorReplace.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes the color replacement filter.
            </summary>
            <param name="input">Input color</param>
            <param name="output">Output color</param>
        </member>
        <member name="M:UMapx.Imaging.ColorReplace.#ctor">
            <summary>
            Initializes the color replacement filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ColorReplace.Input">
            <summary>
            Input color.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ColorReplace.Output">
            <summary>
            Output color.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ColorReplace.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.ColorReplace.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.ToneDiffusionDithering">
            <summary>
            Defines the tone diffusion dithering filter.
            <remarks>
            Filter usage example:
            https://en.wikipedia.org/wiki/Dither
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.#ctor">
            <summary>
            Initializes the tone diffusion dithering filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes the tone diffusion dithering filter.
            </summary>
            <param name="matrix">Matrix</param>
        </member>
        <member name="P:UMapx.Imaging.ToneDiffusionDithering.Matrix">
            <summary>
            Gets or sets the tone diffusion dithering matrix. 
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Order(System.Int32)">
            <summary>
            Initializes the order dithering filter.
            <remarks>
            More information can be found on the website:
            http://en.wikipedia.org/wiki/Ordered_dithering
            Filter usage example:
            https://en.wikipedia.org/wiki/Dither
            </remarks>
            </summary>
            <param name="radius">Radius [0, 255]</param>
            <returns>Tone diffusion dithering filter</returns>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Random(System.Int32)">
            <summary>
            Initializes the random dithering filter.
            </summary>
            <param name="radius">Radius [0, 255]</param>
            <returns>Tone diffusion dithering filter</returns>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Basic">
            <summary>
            Initializes the classic dithering filter.
            </summary>
            <returns>Tone diffusion dithering filter</returns>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Bayer">
            <summary>
            Initializes the Bayer dithering filter.
            </summary>
            <returns>Tone diffusion dithering filter</returns>
        </member>
        <member name="T:UMapx.Imaging.ErrorDiffusionDithering">
            <summary>
            Defines the error diffusion dithering filter.
            <remarks>
            Filter usage example:
            https://en.wikipedia.org/wiki/Dither
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ErrorDiffusionDithering.#ctor(System.Int32,System.Double[][])">
            <summary>
            Initializes the error diffusion dithering filter.
            </summary>
            <param name="levels">Number of levels</param>
            <param name="matrix">Matrix</param>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Levels">
            <summary>
            Gets or sets the number of levels.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Matrix">
            <summary>
            Gets or sets the matrix.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ErrorDiffusionDithering.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.ErrorDiffusionDithering.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.ErrorDiffusionDithering.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ErrorDiffusionDithering.Diffuse(System.Int32,System.Int32,System.Int32,System.Byte*)">
            <summary>
            
            </summary>
            <param name="rError"></param>
            <param name="gError"></param>
            <param name="bError"></param>
            <param name="ptr"></param>
        </member>
        <member name="M:UMapx.Imaging.ErrorDiffusionDithering.GetColor(System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            
            </summary>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Atkinson">
            <summary>
            Initializes the Atkinson dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Burkes">
            <summary>
            Initializes the Burkes dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Fan">
            <summary>
            Initializes the Fan dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.SierraLite">
            <summary>
            Initializes the Sierra lite dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Sierra">
            <summary>
            Initializes the Sierra dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.SierraTowsRows">
            <summary>
            Initializes the Sierra lite dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.FloydSteinberg">
            <summary>
            Initializes the Flyd-Steinberg dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.JarvisJudiceNinke">
            <summary>
            Initializes the Jarvis-Judice-Ninke dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Stevenson">
            <summary>
            Initializes the Stevenson dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Shiau">
            <summary>
            Initializes the Shiau dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Stucki">
            <summary>
            Initializes the Stucki dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="T:UMapx.Imaging.AdditiveNoise">
            <summary>
            Defines the additive noise filter.
            <remarks>
            Filter usage example:
            https://en.wikipedia.org/wiki/Gaussian_noise
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.AdditiveNoise.#ctor">
            <summary>
            Initializes the additive noise filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.AdditiveNoise.#ctor(System.Int32)">
            <summary>
            Initializes the additive noise filter.
            </summary>
            <param name="amount">Amount [0, 100]</param>
        </member>
        <member name="P:UMapx.Imaging.AdditiveNoise.Amount">
            <summary>
            Gets or sets the amout value [0, 100].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.AdditiveNoise.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.AdditiveNoise.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.SaltAndPepper">
            <summary>
            Defines the salt and pepper noise filter.
            <remarks>
            Filter usage example:
            https://en.wikipedia.org/wiki/Salt-and-pepper_noise
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SaltAndPepper.#ctor">
            <summary>
            Initializes the salt and pepper noise filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SaltAndPepper.#ctor(System.Double)">
            <summary>
            Initializes the salt and pepper noise filter.
            </summary>
            <param name="amount">Amount [0, 100].</param>
        </member>
        <member name="P:UMapx.Imaging.SaltAndPepper.Amount">
            <summary>
            Gets or sets the amout value [0, 100].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SaltAndPepper.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.SaltAndPepper.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.TransparencyCorrection">
            <summary>
            Defines the transparency correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TransparencyCorrection.#ctor(System.Double)">
            <summary>
            Initializes the transparency correction filter.
            </summary>
            <param name="transparency">Transparency [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.TransparencyCorrection.#ctor">
            <summary>
            Initializes the transparency correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.TransparencyCorrection.Transparency">
            <summary>
            Gets or sets the transparency value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TransparencyCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LevelsChannelCorrection">
            <summary>
            Defines the channel level correction filter.
            <remarks>
            Filter usage example:
            https://digital-photography-school.com/using-levels-photoshop-image-correct-color-contrast/
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LevelsChannelCorrection.#ctor(UMapx.Imaging.RGBA,UMapx.Core.RangeDouble,UMapx.Core.RangeDouble)">
            <summary>
            Initializes the channel level correction filter.
            </summary>
            <param name="channel">Channel of RGBA model</param>
            <param name="input">Input channel values</param>
            <param name="output">Output channel values</param>
        </member>
        <member name="M:UMapx.Imaging.LevelsChannelCorrection.#ctor">
            <summary>
            Initializes the channel level correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LevelsChannelCorrection.Input">
            <summary>
            Gets or sets input channel values.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LevelsChannelCorrection.Output">
            <summary>
            Gets or sets output channel values.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LevelsChannelCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.RotateChannel">
            <summary>
            Defines the channel rotation filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RotateChannel.#ctor">
            <summary>
            Initializes the channel rotation filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RotateChannel.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.RotateChannel.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.EqualizeChannel">
            <summary>
            Defines the channel equalization filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.EqualizeChannel.#ctor(UMapx.Imaging.RGBA)">
            <summary>
            Initializes the channel equalization filter.
            </summary>
            <param name="channel">Channel of RGBA model</param>
        </member>
        <member name="M:UMapx.Imaging.EqualizeChannel.#ctor">
            <summary>
            Initializes the channel equalization filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.EqualizeChannel.Channel">
            <summary>
            Gets or sets the channel of the RGBA model.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.EqualizeChannel.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.EqualizeChannel.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.HideChannel">
            <summary>
            Defines the channel hide filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HideChannel.#ctor(UMapx.Imaging.RGBA)">
            <summary>
            Initializes the channel hide filter.
            </summary>
            <param name="channel">Channel of RGBA model</param>
        </member>
        <member name="M:UMapx.Imaging.HideChannel.#ctor">
            <summary>
            Initializes the channel hide filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HideChannel.Channel">
            <summary>
            Gets or sets the channel of the RGBA model.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HideChannel.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HideChannel.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.ShowChannel">
            <summary>
            Defines the channel show filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShowChannel.#ctor(UMapx.Imaging.RGBA)">
            <summary>
            Initializes the channel show filter.
            </summary>
            <param name="channel">Channel of RGBA model</param>
        </member>
        <member name="M:UMapx.Imaging.ShowChannel.#ctor">
            <summary>
            Initializes the channel show filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ShowChannel.Channel">
            <summary>
            Gets or sets the channel of the RGBA model.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShowChannel.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.ShowChannel.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.CanvasColor">
            <summary>
            Defines the color canvas class.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CanvasColor.#ctor">
            <summary>
            Initializes the color canvas class.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CanvasColor.#ctor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Initializes the color canvas class.
            </summary>
            <param name="width">Canvas width</param>
            <param name="height">Canvas height</param>
            <param name="color">Color</param>
        </member>
        <member name="P:UMapx.Imaging.CanvasColor.Color">
            <summary>
            Gets or sets canvas color.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CanvasColor.Width">
            <summary>
            Gets or sets the width of the canvas.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CanvasColor.Height">
            <summary>
            Gets or sets the height of the canvas.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CanvasColor.Create">
            <summary>
            Creates canvas.
            </summary>
            <returns>Bitmap</returns>
        </member>
        <member name="T:UMapx.Imaging.CanvasGradient">
            <summary>
            Defines the gradient canvas class.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CanvasGradient.#ctor">
            <summary>
            Initializes the gradient canvas class.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CanvasGradient.#ctor(System.Int32,System.Int32,System.Double,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes the gradient canvas class.
            </summary>
            <param name="width">Canvas width</param>
            <param name="height">Canvas height</param>
            <param name="angle">Angle</param>
            <param name="color1">First color</param>
            <param name="color2">Second color</param>
        </member>
        <member name="P:UMapx.Imaging.CanvasGradient.Color1">
            <summary>
            Gets or sets the first color.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CanvasGradient.Color2">
            <summary>
            Gets or sets the second color.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CanvasGradient.Angle">
            <summary>
            Gets or sets the angle value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CanvasGradient.Width">
            <summary>
            Gets or sets the width of the canvas.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CanvasGradient.Height">
            <summary>
            Gets or sets the height of the canvas.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CanvasGradient.Create">
            <summary>
            Creates canvas.
            </summary>
            <returns>Bitmap</returns>
        </member>
        <member name="T:UMapx.Imaging.Pixelate">
            <summary>
            Defines the pixelation filter.
            <remarks>
            More information can be found on the website:
            https://www.codeproject.com/Articles/2122/Image-Processing-for-Dummies-with-C-and-GDI-Part
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Pixelate.#ctor(System.Int32)">
            <summary>
            Initializes the pixelation filter.
            </summary>
            <param name="value">Value [0, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.Pixelate.#ctor">
            <summary>
            Initializes the pixelation filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Pixelate.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Pixelate.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Grid">
            <summary>
            Defines the grid filter.
            <remarks>
            More information can be found on the website:
            https://www.codeproject.com/Articles/2122/Image-Processing-for-Dummies-with-C-and-GDI-Part
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Grid.#ctor(System.Int32)">
            <summary>
            Initializes the grid filter.
            </summary>
            <param name="value">Value [0, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.Grid.#ctor">
            <summary>
            Initializes the grid filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Grid.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Grid.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Jitter">
            <summary>
            Defines the jitter filter.
            <remarks>
            More information can be found on the website:
            https://www.codeproject.com/Articles/2122/Image-Processing-for-Dummies-with-C-and-GDI-Part
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Jitter.#ctor(System.Int32)">
            <summary>
            Initializes the jitter filter.
            </summary>
            <param name="value">Value [0, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.Jitter.#ctor">
            <summary>
            Initializes the jitter filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Jitter.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Jitter.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Water">
            <summary>
            Defines the water filter.
            <remarks>
            More information can be found on the website:
            https://www.codeproject.com/Articles/2122/Image-Processing-for-Dummies-with-C-and-GDI-Part
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Water.#ctor(System.Int32)">
            <summary>
            Initializes the water filter.
            </summary>
            <param name="value">Value [0, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.Water.#ctor">
            <summary>
            Initializes the water filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Water.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Water.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Noise">
            <summary>
            Defines the noise filter.
            <remarks>
            More information can be found on the website:
            https://www.codeproject.com/Articles/2122/Image-Processing-for-Dummies-with-C-and-GDI-Part
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Noise.#ctor(System.Int32)">
            <summary>
            Initializes the noise filter.
            </summary>
            <param name="value">Value [0, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.Noise.#ctor">
            <summary>
            Initializes the noise filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Noise.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Noise.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Shift">
            <summary>
            Defines the shift filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Shift.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the shift filter.
            </summary>
            <param name="x">Offset value of axis X</param>
            <param name="y">Offset value of axis Y</param>
        </member>
        <member name="M:UMapx.Imaging.Shift.#ctor(UMapx.Core.PointInt)">
            <summary>
            Initializes the shift filter.
            </summary>
            <param name="point">A pair of integers representing an ordered pair of X and Y coordinates</param>
        </member>
        <member name="M:UMapx.Imaging.Shift.#ctor">
            <summary>
            Initializes the shift filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Shift.X">
            <summary>
            Gets or sets the offset value of axis X.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Shift.Y">
            <summary>
            Gets or sets the offset value of axis Y.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Shift.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Shift.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Shift.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Shift.ShiftY(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Int32,System.Int32,System.Int32)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="stride">Stride</param>
        </member>
        <member name="M:UMapx.Imaging.Shift.ShiftX(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Int32,System.Int32,System.Int32)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="stride">Stride</param>
        </member>
        <member name="T:UMapx.Imaging.Flip">
            <summary>
            Defines the flip filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Flip.#ctor">
            <summary>
            Initializes the flip filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Flip.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes the flip filter.
            </summary>
            <param name="x">Flip X</param>
            <param name="y">Flip Y</param>
        </member>
        <member name="P:UMapx.Imaging.Flip.X">
            <summary>
            Gets or sets flip X.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Flip.Y">
            <summary>
            Gets or sets flip Y.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Flip.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Flip.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Rotate">
            <summary>
            Defines the rotation filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Rotate.#ctor(System.Double,System.Drawing.Color)">
            <summary>
            Initializes the rotation filter.
            </summary>
            <param name="angle">Angle</param>
            <param name="color">Background color</param>
        </member>
        <member name="P:UMapx.Imaging.Rotate.Angle">
            <summary>
            Gets or sets angle value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Rotate.Color">
            <summary>
            Gets or sets background color.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Rotate.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Rotate.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Rotate.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Crop">
            <summary>
            Defines the crop filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Crop.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes the crop filter.
            </summary>
            <param name="rectangle">Rectangle</param>
        </member>
        <member name="M:UMapx.Imaging.Crop.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the crop filter.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="P:UMapx.Imaging.Crop.Rectangle">
            <summary>
            Gets or sets rectangle.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Crop.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Crop.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Resize">
            <summary>
            Defines the resize filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Resize.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the resize filter.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:UMapx.Imaging.Resize.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the resize filter.
            </summary>
            <param name="size">Size</param>
        </member>
        <member name="P:UMapx.Imaging.Resize.Size">
            <summary>
            Gets or sets image size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Resize.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Resize.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Merge">
            <summary>
            Defines the merge filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Merge.#ctor(UMapx.Core.PointInt,System.Int32)">
            <summary>
            Initializes the merge filter.
            </summary>
            <param name="point">A pair of integers representing an ordered pair of X and Y coordinates</param>
            <param name="transparency">Transparency [0, 255]</param>
        </member>
        <member name="M:UMapx.Imaging.Merge.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the merge filter.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
            <param name="transparency">Transparency [0, 255]</param>
        </member>
        <member name="M:UMapx.Imaging.Merge.#ctor">
            <summary>
            Initializes the merge filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Merge.Transparency">
            <summary>
            Gets or sets the transparency value [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Merge.Point">
            <summary>
            Gets or sets a pair of integers representing an ordered pair of X and Y coordinates.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Merge.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Merge.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Merge.merge(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            Merge function.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="a0"></param>
            <param name="a1"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Imaging.Texturer">
            <summary>
            Defines the texturing filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Texturer.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes the texturing filter.
            </summary>
            <param name="texture">Matrix</param>
        </member>
        <member name="M:UMapx.Imaging.Texturer.#ctor(System.Double[0:,0:],System.Double)">
            <summary>
            Initializes the texturing filter.
            </summary>
            <param name="texture">Matrix</param>
            <param name="depth">Depth [0, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.Texturer.Texture">
            <summary>
            Gets or sets the texture matrix.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Texturer.Depth">
            <summary>
            Gets or sets the depth value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Wood(System.Int32,System.Int32,System.Double)">
            <summary>
            Implements the construction of a wood texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="rings">Rings</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Textile(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a textile texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Marble(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Implements the construction of a marble texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="yPeriod">Y-period</param>
            <param name="xPeriod">X-period</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Labyrinth(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a labyrinth texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Clouds(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a clouds texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Imaging.Operation">
            <summary>
            Defines the linear operation filter.
            <remarks>
            This filter works according to the following algorithm: C (x, y) = a * A (x, y) + b * B (x, y), where A, B are the original images,
            a, b are the coefficients.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Operation.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the linear operation filter.
            </summary>
            <param name="a">First image coefficient</param>
            <param name="b">Second image coefficient</param>
        </member>
        <member name="P:UMapx.Imaging.Operation.A">
            <summary>
            Gets or sets the first image coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Operation.B">
            <summary>
            Gets or sets the second image coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Operation.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Operation.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="P:UMapx.Imaging.Operation.Addition">
            <summary>
            Addition filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Operation.Subtraction">
            <summary>
            Subtraction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Operation.Averaging">
            <summary>
            Averaging filter.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.StereoAnaglyph">
            <summary>
            Defines the stereo effect filter for a pair of images.
            <remarks>
            More information can be found on the website:
            http://www.3dtv.at/Knowhow/AnaglyphComparison_en.aspx
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.StereoAnaglyph.#ctor(UMapx.Imaging.StereoAnaglyph.Anaglyph)">
            <summary>
            Initializes the stereo effect filter for a pair of images.
            </summary>
            <param name="algorithm">Algorithm</param>
        </member>
        <member name="P:UMapx.Imaging.StereoAnaglyph.Algorithm">
            <summary>
            Gets or sets the algorithm.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.StereoAnaglyph.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.StereoAnaglyph.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.StereoAnaglyph.Anaglyph">
            <summary>
            Defines the stereo effect creation algorithm.
            </summary>
            <remarks>
            More information can be found on the website:
            http://www.3dtv.at/Knowhow/AnaglyphComparison_en.aspx
            </remarks>
        </member>
        <member name="F:UMapx.Imaging.StereoAnaglyph.Anaglyph.True">
            <summary>
            Creates a stereo effect for a pair of images according to the following calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=0.299*R<sub>l</sub>+0.587*G<sub>l</sub>+0.114*B<sub>l</sub>;</item>
            <item>G<sub>a</sub>=0;</item>
            <item>B<sub>a</sub>=0.299*R<sub>r</sub>+0.587*G<sub>r</sub>+0.114*B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="F:UMapx.Imaging.StereoAnaglyph.Anaglyph.Gray">
            <summary>
            Creates a stereo effect for a pair of images according to the following calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=0.299*R<sub>l</sub>+0.587*G<sub>l</sub>+0.114*B<sub>l</sub>;</item>
            <item>G<sub>a</sub>=0.299*R<sub>r</sub>+0.587*G<sub>r</sub>+0.114*B<sub>r</sub>;</item>
            <item>B<sub>a</sub>=0.299*R<sub>r</sub>+0.587*G<sub>r</sub>+0.114*B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="F:UMapx.Imaging.StereoAnaglyph.Anaglyph.Color">
            <summary>
            Creates a stereo effect for a pair of images according to the following calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=R<sub>l</sub>;</item>
            <item>G<sub>a</sub>=G<sub>r</sub>;</item>
            <item>B<sub>a</sub>=B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="F:UMapx.Imaging.StereoAnaglyph.Anaglyph.HalfColor">
            <summary>
            Creates a stereo effect for a pair of images according to the following calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=0.299*R<sub>l</sub>+0.587*G<sub>l</sub>+0.114*B<sub>l</sub>;</item>
            <item>G<sub>a</sub>=G<sub>r</sub>;</item>
            <item>B<sub>a</sub>=B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="F:UMapx.Imaging.StereoAnaglyph.Anaglyph.Optimized">
            <summary>
            Creates a stereo effect for a pair of images according to the following calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=0.7*G<sub>l</sub>+0.3*B<sub>l</sub>;</item>
            <item>G<sub>a</sub>=G<sub>r</sub>;</item>
            <item>B<sub>a</sub>=B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="T:UMapx.Imaging.OilPainting">
            <summary>
            Defines the oil filter.
            <remarks>
            More information can be found on the website:
            https://www.codeproject.com/articles/471994/oilpainteffect
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.OilPainting.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the oil filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="depth">Value [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.OilPainting.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes the oil filter.
            </summary>
            <param name="height">Filter height</param>
            <param name="width">Filter width</param>
            <param name="depth">Value [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.OilPainting.#ctor(UMapx.Core.SizeInt,System.Double)">
            <summary>
            Initializes the oil filter.
            </summary>
            <param name="size">Radius</param>
            <param name="depth">Value [0, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.OilPainting.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.OilPainting.Depth">
            <summary>
            Gets or sets the depth value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.OilPainting.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.OilPainting.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.OilPainting.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Convolution">
            <summary>
            Defines the convolution filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Convolution.#ctor(System.Double[0:,0:],System.Double,System.Boolean)">
            <summary>
            Initializes the convolution filter.
            </summary>
            <param name="m">Matrix</param>
            <param name="offset">Offset</param>
            <param name="bilateral">Bilateral processing or not</param>
        </member>
        <member name="M:UMapx.Imaging.Convolution.#ctor">
            <summary>
            Initializes the convolution filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Convolution.Matrix">
            <summary>
            Gets or sets the convolution matrix.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Convolution.Offset">
            <summary>
            Gets or sets the offset value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Convolution.Bilateral">
            <summary>
            Bilateral processing or not.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Data(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="m">Matrix</param>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Convolution.G(System.Double,System.Double)">
            <summary>
            Gets the value of the gradient operator.
            </summary>
            <param name="Gx">Gradient X</param>
            <param name="Gy">Gradient Y</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Tetta(System.Double,System.Double)">
            <summary>
            Gets the angle of the gradient operator.
            </summary>
            <param name="Gx">Gradient X</param>
            <param name="Gy">Gradient Y</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.LoGaussian(System.Int32,System.Int32,System.Double)">
            <summary>
            mplements the construction of the inverted Gausssian filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="sigma">Standard deviation (!=0)</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Gaussian(System.Int32,System.Int32,System.Double)">
            <summary>
            mplements the construction of the Gaussian blur filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="sigma">Standard deviation (!=0)</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Unsharp(System.Int32,System.Int32,System.Double)">
            <summary>
            Implements the construction of the "unsharp masking" filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="sigma">Standard deviation (!=0)</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.HighPass(System.Int32,System.Int32,System.Double)">
            <summary>
            Implements the construction of the high-pass filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="boost">Boost</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.LowPass(System.Int32,System.Int32)">
            <summary>
            Implements the construction of the low-pass filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Emboss(System.Int32)">
            <summary>
            Implements the construction of the emboss filter.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Roberts">
            <summary>
            Implements the construction of the Roberts operator [2 x 2].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Prewitt">
            <summary>
            Implements the construction of the Prewitt operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Sobel">
            <summary>
            Implements the construction of the Sobel operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Scharr">
            <summary>
            Implements the construction of the Scharr operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Laplacian">
            <summary>
            Implements the construction of the Laplacian operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.LaplacianDiagonal">
            <summary>
            Implements the construction of the diagonal Laplacian operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.LaplacianInvert">
            <summary>
            Implements the construction of the inverted Laplacian operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Kirsh(UMapx.Imaging.Gradient)">
            <summary>
            Implements the construction of the Kirsh operator [3 x 3].
            </summary>
            <param name="direction">Gradient direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Roberts(UMapx.Imaging.Gradient)">
            <summary>
            Implements the construction of the Roberts operator [3 x 3]. [2 x 2].
            </summary>
            <param name="direction">Gradient direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Imaging.Morphology">
            <summary>
            Defines the morphology filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Morphology.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the morphology filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="threshold">Threshold</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the morphology filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="threshold">Threshold</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.#ctor(UMapx.Core.SizeInt,System.Int32)">
            <summary>
            Initializes the morphology filter.
            </summary>
            <param name="size">Filter size</param>
            <param name="threshold">Threshold</param>
        </member>
        <member name="P:UMapx.Imaging.Morphology.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Morphology.Threshold">
            <summary>
            Gets or sets the threshold.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Morphology.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.ApplyVertical(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.ApplyHorizontal(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.Median(System.Int32)">
            <summary>
            Initializes the median filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.Erosion(System.Int32)">
            <summary>
            Initializes the erosion filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.Dilatation(System.Int32)">
            <summary>
            Initializes the dilatation filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="T:UMapx.Imaging.Dilatation">
            <summary>
            Defines the dilatation filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.#ctor(System.Int32)">
            <summary>
            Initializes the dilatation filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the dilatation filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the dilatation filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.Dilatation.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.ApplyVertical(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.ApplyHorizontal(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.Erosion">
            <summary>
            Defines the erosion filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Erosion.#ctor(System.Int32)">
            <summary>
            Initializes the erosion filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.Erosion.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the erosion filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.Erosion.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the erosion filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.Erosion.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Erosion.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Erosion.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Erosion.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Erosion.ApplyVertical(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Erosion.ApplyHorizontal(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.TopHat">
            <summary>
            Defines the top-hat filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TopHat.#ctor(System.Int32)">
            <summary>
            Initializes the top-hat filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.TopHat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the top-hat filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.TopHat.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the top-hat filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.TopHat.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TopHat.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.TopHat.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.TopHat.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.BottomHat">
            <summary>
            Defines the bottom-hat filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BottomHat.#ctor(System.Int32)">
            <summary>
            Initializes the bottom-hat filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.BottomHat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the bottom-hat filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.BottomHat.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the bottom-hat filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.BottomHat.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BottomHat.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BottomHat.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BottomHat.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Closing">
            <summary>
            Defines the closing filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Closing.#ctor(System.Int32)">
            <summary>
            Initializes the closing filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.Closing.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the closing filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.Closing.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the closing filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.Closing.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Closing.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Closing.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Closing.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Opening">
            <summary>
            Defines the opening filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Opening.#ctor(System.Int32)">
            <summary>
            Initializes the opening filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.Opening.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the opening filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.Opening.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the opening filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.Opening.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Opening.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Opening.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Opening.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.EdgeGlow">
            <summary>
            Defines the edge glow filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.EdgeGlow.#ctor(System.Int32)">
            <summary>
            Initializes the edge glow filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.EdgeGlow.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the edge glow filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.EdgeGlow.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the edge glow filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.EdgeGlow.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.EdgeGlow.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.EdgeGlow.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.EdgeGlow.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.BoxBlur">
            <summary>
            Defines the box blur filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.#ctor(System.Int32)">
            <summary>
            Initializes the box blur filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the box blur filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the box blur filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.BoxBlur.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.ApplyVertical(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.ApplyHorizontal(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.HSBFilter">
            <summary>
            Defines the HSB filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSBFilter.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Initializes the HSB filter.
            </summary>
            <param name="hue">Hue [0, 359]</param>
            <param name="saturation">Saturation [-1, 1]</param>
            <param name="brightness">Brightness [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.HSBFilter.#ctor">
            <summary>
            Initializes the HSB filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HSBFilter.Hue">
            <summary>
            Hue [0, 359].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HSBFilter.Saturation">
            <summary>
            Saturation [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HSBFilter.Brightness">
            <summary>
            Brightness [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSBFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HSBFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.HSLFilter">
            <summary>
            Defines the HSL filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSLFilter.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Initializes the HSL filter.
            </summary>
            <param name="hue">Hue [0, 359]</param>
            <param name="saturation">Saturation [-1, 1]</param>
            <param name="lightness">Lightness [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.HSLFilter.#ctor">
            <summary>
            Initializes the HSL filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HSLFilter.Hue">
            <summary>
            Hue [0, 359].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HSLFilter.Saturation">
            <summary>
            Saturation [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HSLFilter.Lightness">
            <summary>
            Lightness [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSLFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.HSLFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.YCbCrFilter">
            <summary>
            Defines the YCbCr filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.YCbCrFilter.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the YCbCr filter.
            </summary>
            <param name="y">Y [-1, 1]</param>
            <param name="cb">Cb [-1, 1]</param>
            <param name="cr">Cr [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.YCbCrFilter.#ctor">
            <summary>
            Initializes the YCbCr filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YCbCrFilter.Y">
            <summary>
            Y [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YCbCrFilter.Cb">
            <summary>
            Cb [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YCbCrFilter.Cr">
            <summary>
            Cr [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.YCbCrFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.YCbCrFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.CMYKFilter">
            <summary>
            Defines the CMYK filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CMYKFilter.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the CMYK filter.
            </summary>
            <param name="cyan">Cyan [-1, 1]</param>
            <param name="magenta">Magenta [-1, 1]</param>
            <param name="yellow">Yellow [-1, 1]</param>
            <param name="keycolor">Keycolor [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.CMYKFilter.#ctor">
            <summary>
            Initializes the CMYK filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CMYKFilter.Cyan">
            <summary>
            Cyan [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CMYKFilter.Magenta">
            <summary>
            Magenta [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CMYKFilter.Yellow">
            <summary>
            Yellow [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CMYKFilter.Keycolor">
            <summary>
            Keycolor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CMYKFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.CMYKFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.RGBFilter">
            <summary>
            Defines the RGB filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RGBFilter.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the RGB filter.
            </summary>
            <param name="red">Red [-255, 255]</param>
            <param name="green">Green [-255, 255]</param>
            <param name="blue">Blue [-255, 255]</param>
        </member>
        <member name="M:UMapx.Imaging.RGBFilter.#ctor">
            <summary>
            Initializes the RGB filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.RGBFilter.Red">
            <summary>
            Red [-255, 255].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.RGBFilter.Green">
            <summary>
            Green [-255, 255].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.RGBFilter.Blue">
            <summary>
            Blue [-255, 255].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RGBFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.RGBFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.HistogramEqualization">
            <summary>
            Defines the global histogram equalization filter.
            <remarks>
            More information can be found on the website:
            http://www.cromwell-intl.com/3d/histogram/
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HistogramEqualization.#ctor">
            <summary>
            Initializes the global histogram equalization filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HistogramEqualization.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HistogramEqualization.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.LocalHistogramEqualization">
            <summary>
            Defines the local histogram equalization filter.
            <remarks>
            More information can be found on the website:
            http://angeljohnsy.blogspot.com/2011/06/local-histogram-equalization.html
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.#ctor(System.Int32)">
            <summary>
            Initializes the local histogram equalization filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the local histogram equalization filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the local histogram equalization filter.
            </summary>
            <param name="size">Radius</param>
        </member>
        <member name="P:UMapx.Imaging.LocalHistogramEqualization.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.Data(UMapx.Core.SizeInt)">
            <summary>
            
            </summary>
            <param name="size">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.HistogramStretch">
            <summary>
            Defines the global histogram stretch filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HistogramStretch.#ctor(System.Double,System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the global histogram stretch filter.
            </summary>
            <param name="min">Minimum intensity [0, 1]</param>
            <param name="max">Maximum intensity [0, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.HistogramStretch.#ctor(UMapx.Core.RangeDouble,UMapx.Imaging.Space)">
            <summary>
            Initializes the global histogram stretch filter.
            </summary>
            <param name="range">Intensity range</param>
            <param name="space">Color space</param>
        </member>
        <member name="P:UMapx.Imaging.HistogramStretch.Range">
            <summary>
            Gets or sets the intensity range.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HistogramStretch.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LocalHistogramStretch">
            <summary>
            Defines the local histogram stretch filter.
            <remarks>
            More information can be found on the website:
            http://www.academia.edu/7629047/Image_enhancement_by_local_histogram_stretching
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.#ctor(System.Int32,UMapx.Imaging.Space,System.Double,System.Boolean)">
            <summary>
            Initializes the local histogram stretch filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="contrast">Contrast [0, 1]</param>
            <param name="smoothing">Smoothing</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double,System.Boolean)">
            <summary>
            Initializes the local histogram stretch filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="contrast">Contrast [0, 1]</param>
            <param name="smoothing">Smoothing</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double,System.Boolean)">
            <summary>
            Initializes the local histogram stretch filter.
            </summary>
            <param name="size">Radius</param>
            <param name="space">Color space</param>
            <param name="contrast">Contrast [0, 1]</param>
            <param name="smoothing">Smoothing</param>
        </member>
        <member name="P:UMapx.Imaging.LocalHistogramStretch.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LocalHistogramStretch.Space">
            <summary>
            Gets or sets the color space.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LocalHistogramStretch.Contrast">
            <summary>
            Gets or sets the contrast value [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LocalHistogramStretch.Smoothing">
            <summary>
            Smoothing.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmMax">Bitmap data</param>
            <param name="bmMin">Bitmap data</param> 
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.ApplyRGB(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmMax">Bitmap data</param>
            <param name="bmMin">Bitmap data</param> 
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.ApplyHSB(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmMax">Bitmap data</param>
            <param name="bmMin">Bitmap data</param> 
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.ApplyHSL(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmMax">Bitmap data</param>
            <param name="bmMin">Bitmap data</param> 
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.ApplyYCbCr(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmMax">Bitmap data</param>
            <param name="bmMin">Bitmap data</param> 
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.ApplyGrayscale(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmMax">Bitmap data</param>
            <param name="bmMin">Bitmap data</param> 
        </member>
        <member name="T:UMapx.Imaging.BitmapFilter">
            <summary>
            Defines the bitmap filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.#ctor(UMapx.Transform.IFilter,UMapx.Imaging.Space)">
            <summary>
            Initializes the bitmap filter.
            </summary>
            <param name="filter">Filter</param>
            <param name="space">Color space</param>
        </member>
        <member name="P:UMapx.Imaging.BitmapFilter.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.BitmapFilter.Space">
            <summary>
            Gets or sets the color space.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Appy filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Appy filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.ApplyRGB(System.Drawing.Imaging.BitmapData)">
            <summary>
            Appy filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.ApplyHSB(System.Drawing.Imaging.BitmapData)">
            <summary>
            Appy filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.ApplyHSL(System.Drawing.Imaging.BitmapData)">
            <summary>
            Appy filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.ApplyYCbCr(System.Drawing.Imaging.BitmapData)">
            <summary>
            Appy filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.ApplyGrayscale(System.Drawing.Imaging.BitmapData)">
            <summary>
            Appy filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.ExposureFusion">
            <summary>
            Defines the exposure fusion filter.
            <remarks>
            More information can be found on the website:
            https://web.stanford.edu/class/cs231m/project-1/exposure-fusion.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ExposureFusion.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the exposure fusion filter.
            </summary>
            <param name="levels">Number of levels</param>
            <param name="sigma">Sigma (0, 1)</param>
        </member>
        <member name="P:UMapx.Imaging.ExposureFusion.Levels">
            <summary>
            Gets or sets number of levels.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ExposureFusion.Sigma">
            <summary>
            Gets or sets the sigma value (0, 1).
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ExposureFusion.Apply(System.Drawing.Bitmap[])">
            <summary>
            Apply filter.
            </summary>
            <param name="images">Bitmap array</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.ExposureFusion.Apply(System.Drawing.Imaging.BitmapData[])">
            <summary>
            Apply filter.
            </summary>
            <param name="images">BitmapData array</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.ExposureFusion.Exp(System.Double[0:,0:][][],System.Double)">
            <summary>
            Exponent filter.
            </summary>
            <param name="I">Input data</param>
            <param name="sigma">Sigma</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Imaging.ExposureFusion.Mul(System.Double[0:,0:][],System.Double[0:,0:][])">
            <summary>
            Implements matrix array multiplication.
            </summary>
            <param name="A">Matrix array</param>
            <param name="B">Matrix array</param>
            <returns>Matrix array</returns>
        </member>
        <member name="T:UMapx.Imaging.AlphaChannelFilter">
            <summary>
            Defines the alpha channel filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.AlphaChannelFilter.#ctor">
            <summary>
            Initializes the alpha channel filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.AlphaChannelFilter.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.AlphaChannelFilter.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.BitmapConverter">
            <summary>
            Uses to work with bitmaps.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToIco(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Converts Bitmap to icon file.
            </summary>
            <param name="b">Bitmap</param>
            <param name="size">Size</param>
            <returns>Icon</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToJpeg(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap to JPEG format.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToBmp(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap to BMP format.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToGif(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap to GIF format.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToPng(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap to PNG format.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToTiff(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap to TIFF format.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.Bitmap(System.Drawing.Imaging.BitmapData)">
            <summary>
            Gets the Bitmap from the BitmapData.
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.Bitmap(System.Drawing.Bitmap,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts Bitmap to a specific format
            </summary>
            <param name="b">Bitmap</param>
            <param name="pixelformat">Pixel format</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.Lock32bpp(System.Drawing.Bitmap)">
            <summary>
            Blocks Bitmap in system memory.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap data</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.Lock8bpp(System.Drawing.Bitmap)">
            <summary>
            Blocks Bitmap in system memory.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap data</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.Unlock(System.Drawing.Bitmap,System.Drawing.Imaging.BitmapData)">
            <summary>
            Unblocks Bitmap in system memory.
            </summary>
            <param name="b">Bitmap</param>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToRGB(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts a Bitmap to an RGB structure with or without alpha-channel.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="alpha">Alpha-channel</param>
            <returns>RGBA structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToRGB(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
            Converts a Bitmap to an RGB structure with or without alpha-channel.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="alpha">Alpha-channel</param>
            <returns>RGBA structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromRGB(System.Double[0:,0:][])">
            <summary>
            Converts an RGB structure to a color image.
            </summary>
            <param name="array">RGBA structure array</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromRGB(System.Double[0:,0:][],System.Drawing.Imaging.BitmapData)">
            <summary>
            Converts an RGB structure to a color image.
            </summary>
            <param name="array">RGBA structure array</param>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromRGB(System.Double[0:,0:][],System.Drawing.Bitmap)">
            <summary>
            Converts an RGB structure to a color image.
            </summary>
            <param name="array">RGBA structure array</param>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToHSB(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts a Bitmap to an HSB structure with or without alpha-channel.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="alpha">Alpha-channel</param>
            <returns>HSB structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToHSB(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
            Converts a Bitmap to an HSB structure with or without alpha-channel.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="alpha">Alpha-channel</param>
            <returns>HSB structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromHSB(System.Double[0:,0:][])">
            <summary>
            Converts an HSB structure to a color image.
            </summary>
            <param name="array">HSB structure array</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromHSB(System.Double[0:,0:][],System.Drawing.Imaging.BitmapData)">
            <summary>
            Converts an HSB structure to a color image.
            </summary>
            <param name="array">HSB structure array</param>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromHSB(System.Double[0:,0:][],System.Drawing.Bitmap)">
            <summary>
            Converts an HSB structure to a color image.
            </summary>
            <param name="array">HSB structure array</param>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToHSL(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts a Bitmap to an HSL structure with or without alpha-channel.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="alpha">Alpha-channel</param>
            <returns>HSL structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToHSL(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
            Converts a Bitmap to an HSL structure with or without alpha-channel.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="alpha">Alpha-channel</param>
            <returns>HSL structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromHSL(System.Double[0:,0:][])">
            <summary>
            Converts an HSL structure to a color image.
            </summary>
            <param name="array">HSL structure array</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromHSL(System.Double[0:,0:][],System.Drawing.Imaging.BitmapData)">
            <summary>
            Converts an HSL structure to a color image.
            </summary>
            <param name="array">HSL structure array</param>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromHSL(System.Double[0:,0:][],System.Drawing.Bitmap)">
            <summary>
            Converts an HSL structure to a color image.
            </summary>
            <param name="array">HSL structure array</param>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToYCbCr(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts a Bitmap to an YCbCr structure with or without alpha-channel.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="alpha">Alpha-channel</param>
            <returns>YCbCr structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToYCbCr(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
            Converts a Bitmap to an YCbCr structure with or without alpha-channel.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="alpha">Alpha-channel</param>
            <returns>YCbCr structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromYCbCr(System.Double[0:,0:][])">
            <summary>
            Converts an YCbCr structure to a color image.
            </summary>
            <param name="array">YCbCr structure array</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromYCbCr(System.Double[0:,0:][],System.Drawing.Imaging.BitmapData)">
            <summary>
            Converts an YCbCr structure to a color image.
            </summary>
            <param name="array">YCbCr structure array</param>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromYCbCr(System.Double[0:,0:][],System.Drawing.Bitmap)">
            <summary>
            Converts an YCbCr structure to a color image.
            </summary>
            <param name="array">YCbCr structure array</param>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToGrayscale(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap to averaged channel value matrix.
            </summary>
            <param name="Data">Bitmap</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToGrayscale(System.Drawing.Imaging.BitmapData)">
            <summary>
            Converts Bitmap to averaged channel value matrix.
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromGrayscale(System.Double[0:,0:])">
            <summary>
            Converts a matrix of channel values to a monochrome Bitmap.
            </summary>
            <param name="m">Matrix</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromGrayscale(System.Double[0:,0:],System.Drawing.Imaging.BitmapData)">
            <summary>
            Converts a matrix of channel values to a monochrome Bitmap.
            </summary>
            <param name="m">Matrix</param>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromGrayscale(System.Double[0:,0:],System.Drawing.Bitmap)">
            <summary>
            Converts a matrix of channel values to a monochrome Bitmap.
            </summary>
            <param name="m">Matrix</param>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.HoughLine">
            <summary>
            Defines the Hough line.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughLine.Theta">
            <summary>
            Slope of the line [0, 180).
            <remarks>
            It is the angle between the polar axis and the radius of the line.
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughLine.Radius">
            <summary>
            Line distance from the center of the image (-inf, +inf).
            <remarks>
            A negative radius line means that the line is at the bottom of the polar coordinate system. Therefore
            the angle θ should be increased by 180 degrees, and Radius should be positive.
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughLine.Intensity">
            <summary>
            Absolute line intensity (0, +inf).
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughLine.RelativeIntensity">
            <summary>
            Relative line intensity (0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughLine.#ctor(System.Double,System.Int16,System.Int16,System.Double)">
            <summary>
            Initializes the Hough line.
            </summary>
            <param name="theta">Slope of the line [0, 180)</param>
            <param name="radius">Radius (-inf, +inf)</param>
            <param name="intensity">Absolute line intensity (0, +inf)</param>
            <param name="relativeIntensity">Relative line intensity (0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.HoughLine.CompareTo(System.Object)">
            <summary>
            Compares object to another instance of this class.
            </summary>
            <param name="value">Object</param>
            <returns>Integer number</returns>
        </member>
        <member name="T:UMapx.Imaging.HoughCircle">
            <summary>
            Defines the Hough circle.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughCircle.X">
            <summary>
            Coordinate X.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughCircle.Y">
            <summary>
            Coordinate Y.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughCircle.Radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughCircle.Intensity">
            <summary>
            Absolute line intensity (0, +inf).
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughCircle.RelativeIntensity">
            <summary>
            Relative line intensity (0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughCircle.#ctor(System.Int32,System.Int32,System.Int32,System.Int16,System.Double)">
            <summary>
            Initializes the Hough circle.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
            <param name="radius">Radius</param>
            <param name="intensity">Absolute line intensity (0, +inf)</param>
            <param name="relativeIntensity">Relative line intensity (0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.HoughCircle.CompareTo(System.Object)">
            <summary>
            Compares object to another instance of this class.
            </summary>
            <param name="value">Object</param>
            <returns>Integer number</returns>
        </member>
        <member name="T:UMapx.Imaging.HoughLineTransform">
            <summary>
            Defines the Hough line transform filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.#ctor">
            <summary>
            Initializes the Hough line transform filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughLineTransform.StepsPerDegree">
            <summary>
            Gets or sets steps per degree.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughLineTransform.MinLineIntensity">
            <summary>
            Gets the minimum line intensity.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughLineTransform.MaxIntensity">
            <summary>
            Gets the maximum line intensity.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughLineTransform.LocalPeakRadius">
            <summary>
            Gets or sets the radius search for the local peak value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughLineTransform.LinesCount">
            <summary>
            Gets the count of lines found.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.GetMostIntensiveLines(System.Int32)">
            <summary>
            Returns an array of lines with absolute intensity.
            </summary>
            <param name="count">Count</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.GetLinesByRelativeIntensity(System.Double)">
            <summary>
            Returns an array of lines with relative intensity.
            </summary>
            <param name="minRelativeIntensity">Minimum relative intensity</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.ToBitmap">
            <summary>
            Returns the Hough synogram.
            </summary>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.CollectLines">
            <summary>
            Collect lines with intesities greater or equal then specified.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.HoughCircleTransform">
            <summary>
            Defines the Hough circle transform filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.#ctor(System.Int32)">
            <summary>
            Initializes the Hough circle transform filter.
            </summary>
            <param name="radiusToDetect">Radius</param>
        </member>
        <member name="P:UMapx.Imaging.HoughCircleTransform.MinCircleIntensity">
            <summary>
            Gets the minimum circle intensity.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughCircleTransform.LocalPeakRadius">
            <summary>
            Gets or sets the radius search for the local peak value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughCircleTransform.MaxIntensity">
            <summary>
            Gets the maximum line intensity.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughCircleTransform.CirclesCount">
            <summary>
            Gets the count of lines found.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.GetMostIntensiveCircles(System.Int32)">
            <summary>
            Returns an array of lines with absolute intensity.
            </summary>
            <param name="count">Count</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.GetCirclesByRelativeIntensity(System.Double)">
            <summary>
            Returns an array of lines with relative intensity.
            </summary>
            <param name="minRelativeIntensity">Minimum relative intensity</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.ToBitmap">
            <summary>
            Returns the Hough synogram.
            </summary>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.CollectCircles">
            <summary>
            Collect circles with intesities greater or equal then specified.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.DrawHoughCircle(System.Int32,System.Int32)">
            <summary>
            Draw Hough circle:
            http://www.cs.unc.edu/~mcmillan/comp136/Lecture7/circle.html
            TODO: more optimizations of circle drawing could be done.
            </summary>
            <param name="xCenter">Co. X</param>
            <param name="yCenter">Co. Y</param>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.SetHoughCirclePoints(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set circle points.
            </summary>
            <param name="cx">Cx</param>
            <param name="cy">Cy</param>
            <param name="x">Co. X</param>
            <param name="y">Co. Y</param>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.SetHoughPoint(System.Int32,System.Int32)">
            <summary>
            Set point.
            </summary>
            <param name="x">Co. X</param>
            <param name="y">Co. Y</param>
        </member>
        <member name="T:UMapx.Imaging.Intensity">
            <summary>
            Uses to work with brightness represented as a value belonging to the interval [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Intensity.SingleScaleRetinex(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the Single Scale Retinex algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="xlow">Filter brightness</param>
            <param name="nbase">Logarithm base</param>
            <param name="a">Factor [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.SingleScaleRetinex(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="nbase">Logarithm base</param>
            <param name="a">Factor (0, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LocalContrastInversion(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the local contrast inversion algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="xlow">Filter brightness</param>
            <param name="a">Factor (0, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LocalContrastInversion(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="a">Factor (0, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LocalContrastEnhancement(System.Double,System.Double,System.Double)">
            <summary>
            Implements the local contrast enhancement algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="xlow">Filter brightness</param>
            <param name="a">Factor [-1, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LocalContrastEnhancement(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="a">Factor [-1, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.HomomorphicEnhancement(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the homomorphic enhancement algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="mu">Filter brightness</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.HomomorphicEnhancement(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.KsiContrastEnchancement(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the ξ-contrast enhancement algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="mu">Filter brightness</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset [-1, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.KsiContrastEnchancement(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset [-1, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.SAUCE(System.Double,System.Double,System.Double)">
            <summary>
            Implements the SAUCE algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="mu">Filter brightness</param>
            <param name="d">Degree of difference [0, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.SAUCE(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="a">Factor [-1, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Bradley(System.Double,System.Double,System.Double)">
            <summary>
            Implements the Bradley threshold correction.
            </summary>
            <param name="x">Brightness</param>
            <param name="xlow">Filter brightness</param>
            <param name="difference">Difference [0, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Bradley(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="difference">Difference [0, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="F:UMapx.Imaging.Intensity.log05">
            <summary>
            Logarithm of 0.5.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Intensity.logEpsilon">
            <summary>
            Logarithmic epsilon.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LogStretch(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the logarithmic stretch algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="mu">Filter brightness</param>
            <param name="s">Shadows</param>
            <param name="l">Highlights</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LogStretch(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="s">Shadows</param>
            <param name="l">Highlights</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LogPow(System.Double,System.Double)">
            <summary>
            Returns the number raised to the logarithmic power.
            </summary>
            <param name="a">Number</param>
            <param name="power">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Gamma(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="g">Gamma</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Gamma(System.Double,System.Double)">
            <summary>
            Implements the gamma correction.
            </summary>
            <param name="x">Argument</param>
            <param name="g">Gamma</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Shift(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="b">Offset (-0.5, 0.5)</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Shift(System.Double,System.Double)">
            <summary>
            Implements the shift correction.
            </summary>
            <param name="x">Argument</param>
            <param name="b">Offset (-0.5, 0.5)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Bin(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="threshold">Threshold [0, 1]</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Bin(System.Double,System.Double)">
            <summary>
            Implements the threshold correction.
            </summary>
            <param name="x">Argument</param>
            <param name="threshold">Threshold [0, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Exposure(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="average">Average</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Exposure(System.Double,System.Double)">
            <summary>
            Implements the exposure correction.
            </summary>
            <param name="x">Argument</param>
            <param name="average">Average</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Sin(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="delta">Delta</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Sin(System.Double,System.Double)">
            <summary>
            Implements the sine correction.
            </summary>
            <param name="x">Argument</param>
            <param name="delta">Delta</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Cos(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="delta">Delta</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Cos(System.Double,System.Double)">
            <summary>
            Implements the cosine correction.
            </summary>
            <param name="x">Argument</param>
            <param name="delta">Delta</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Log(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="a">Logarithm base</param>
            <param name="delta">Delta</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Log(System.Double,System.Double,System.Double)">
            <summary>
            Implements the logarithmic correction.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Logarithm base</param>
            <param name="delta">Delta</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Add(System.Double,System.Int32)">
            <summary>
            Returns the correction mask for formula: Y = (X + V).
            </summary>
            <param name="value">Value</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Contrast(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="value">Value</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Contrast(System.Double,System.Double)">
            <summary>
            Implements the contrast correction.
            </summary>
            <param name="x">Argument</param>
            <param name="value">Contrast</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LogContrast(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="power">Value</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LogContrast(System.Double,System.Double)">
            <summary>
            Implements the log-contrast correction.
            </summary>
            <param name="x">Brightness</param>
            <param name="power">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Invert(System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Invert(System.Double)">
            <summary>
            Negates the value.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Equalize(System.Double,System.Double,System.Double)">
            <summary>
            Equalizes a value relative to the {min, max} range.
            </summary>
            <param name="x">Argument</param>
            <param name="max">Maximum value</param>
            <param name="min">Minimum value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Equalize(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="max">Maximum value</param>
            <param name="min">Minimum value</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Linear(UMapx.Core.RangeDouble,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="range">Pair of numbers Max и Min</param>
            <param name="delta">Delta</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Linear(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="xmax">Maximum value</param>
            <param name="xmin">Minimum value</param>
            <param name="delta">Delta</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Linear(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the linear correction.
            </summary>
            <param name="x">Argument</param>
            <param name="xmax">Maximum value</param>
            <param name="xmin">Minimum value</param>
            <param name="delta">Delta</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Levels(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="xmin">Minimum value of the input range</param>
            <param name="xmax">Maximum value of the input range</param>
            <param name="ymin">Minimum value of the output range</param>
            <param name="ymax">Maximum value of the output range</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Levels(UMapx.Core.RangeDouble,UMapx.Core.RangeDouble,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="input">Input values</param>
            <param name="output">Output values</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Quantize(System.Int32,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="levels">Number of levels</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Imaging.BlendMode">
            <summary>
            Used to blending layers.
            <remarks>
            More information can be found on the website:
            http://www.pegtop.net/delphi/articles/blendmodes/index.htm
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Average(System.Double,System.Double)">
            <summary>
            Implements the averaging function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Screen(System.Double,System.Double)">
            <summary>
            Implements the screening function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Difference(System.Double,System.Double)">
            <summary>
            Implements the difference function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Negation(System.Double,System.Double)">
            <summary>
            Implements the negation function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Exclusion(System.Double,System.Double)">
            <summary>
            Implements the exclusion function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Overlay(System.Double,System.Double)">
            <summary>
            Implements the overlaying function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.HardLight(System.Double,System.Double)">
            <summary>
            Implements the "hard light" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Dodge(System.Double,System.Double)">
            <summary>
            Implements the "dodge" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.SoftDodge(System.Double,System.Double)">
            <summary>
            Implements the "soft dodge" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Burn(System.Double,System.Double)">
            <summary>
            Implements the "burn" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.SoftBurn(System.Double,System.Double)">
            <summary>
            Implements the "soft burn" function".
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Reflect(System.Double,System.Double)">
            <summary>
            Implements the reflection function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Glow(System.Double,System.Double)">
            <summary>
            Implements the glow function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Stamp(System.Double,System.Double)">
            <summary>
            Implements the stamp function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Freeze(System.Double,System.Double)">
            <summary>
            Implements the "freeze" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Heat(System.Double,System.Double)">
            <summary>
            Implements the "heat" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Interpolation(System.Double,System.Double)">
            <summary>
            Implements the interpolation function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Photoshop(System.Double,System.Double)">
            <summary>
            Implements the function of "soft light" (Adobe Photoshop).
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Illusions(System.Double,System.Double)">
            <summary>
            Implements the function of "soft light" (Illusions.hu).
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Pegtop(System.Double,System.Double)">
            <summary>
            Implements the function of "soft light" (Pegtop).
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Fw3c(System.Double,System.Double)">
            <summary>
            Implements the "Cairo" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Gw3c(System.Double)">
            <summary>
            Implements the "Cairo" function.
            </summary>
            <param name="a">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Imaging.Statistics">
            <summary>
            Uses to work with the statistical characteristics of the image.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Histogram(System.Drawing.Imaging.BitmapData)">
            <summary>
            Gets a histogram of the image.
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Histogram(System.Drawing.Imaging.BitmapData,UMapx.Imaging.RGBA)">
            <summary>
            Gets a histogram of the image.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="channel">Channel of RGBA model</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Histogram(System.Drawing.Bitmap)">
            <summary>
            Gets a histogram of the image.
            </summary>
            <param name="Data">Bitmap</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Histogram(System.Drawing.Bitmap,UMapx.Imaging.RGBA)">
            <summary>
            Gets a histogram of the image.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="channel">Channel of RGBA model</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.CDF(System.Int32[])">
            <summary>
            Gets an array of values of the density function.
            </summary>
            <param name="H">Histogram</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Equalize(System.Int32[])">
            <summary>
            Gets an array of equalized histogram values by recalculating the brightness density function.
            </summary>
            <param name="H">Histogram</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.OtsuThreshold(System.Drawing.Imaging.BitmapData)">
            <summary>
            Calculates the optimal threshold using the Otsu method for the original bitmap.
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.OtsuThreshold(System.Drawing.Bitmap)">
            <summary>
            Calculates the optimal threshold using the Otsu method for the original bitmap.
            </summary>
            <param name="Data">Bitmap</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.SISThreshold(System.Drawing.Imaging.BitmapData)">
            <summary>
            Calculates the optimal threshold for the original bitmap.
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.SISThreshold(System.Drawing.Bitmap)">
            <summary>
            Calculates the optimal threshold for the original bitmap.
            </summary>
            <param name="Data">Bitmap</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.MaxIndex(System.Double[])">
            <summary>
            Gets the index of the maximum element of the array.
            </summary>
            <param name="data">Array</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.MaxIndex(System.Int32[])">
            <summary>
            Gets the index of the maximum element of the array.
            </summary>
            <param name="data">Array</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.MinIndex(System.Double[])">
            <summary>
            Gets the index of the minimum element of the array.
            </summary>
            <param name="data">Array</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.MinIndex(System.Int32[])">
            <summary>
            Gets the index of the minimum element of the array.
            </summary>
            <param name="data">Array</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Omega(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Omega.
            </summary>
            <param name="init">Init</param>
            <param name="end">End</param>
            <param name="h">Histogram</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Mu(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Mean.
            </summary>
            <param name="init">Init</param>
            <param name="end">End</param>
            <param name="h">Histogram</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Imaging.PointMatrix">
            <summary>
            Uses to work with point matrices.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.FlipY(System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.FlipX(System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.ShiftX(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="value">Offset</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.ShiftY(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="value">Offset</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.Noise(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="value">Value [0, 100]</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.Pixelate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="value">Value [0, 100]</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.Grid(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="value">Value [0, 100]</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.Water(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="value">Value [0, 100]</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="T:UMapx.Imaging.PerlinNoise">
            <summary>
            Defines the Perlin noise.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Perlin_noise
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the Perlin noise.   
            </summary>
            <param name="octaves">Octaves[1, 32]</param>
            <param name="persistence">Persistence</param>
            <param name="frequency">Frequency</param>
            <param name="amplitude">Amplitude</param>
        </member>
        <member name="P:UMapx.Imaging.PerlinNoise.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PerlinNoise.Amplitude">
            <summary>
            Gets or sets the amplitude value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PerlinNoise.Persistence">
            <summary>
            Gets or sets the persistence value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PerlinNoise.Octaves">
            <summary>
            Gets or sets the number of octaves[1, 32].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.Function(System.Double)">
            <summary>
            One-dimensional Perlin noise function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.Function2D(System.Double,System.Double)">
            <summary>
            Two-dimensional Perlin noise function.
            </summary>
            <param name="x">Argument</param>
            <param name="y">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.Noise(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.Noise(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.SmoothedNoise(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.SmoothedNoise(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.CosineInterpolate(System.Double,System.Double,System.Double)">
            
        </member>
        <member name="T:UMapx.Imaging.Space">
            <summary>
            Defines the color space.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Space.RGB">
            <summary>
            Color space RGB.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Space.HSB">
            <summary>
            Color space HSB.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Space.HSL">
            <summary>
            Color space HSB.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Space.YCbCr">
            <summary>
            Color space YCbCr.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Space.Grayscale">
            <summary>
            Grayscale.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.RGBA">
            <summary>
            Defines the channel of RGBA model.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.RGBA.Alpha">
            <summary>
            Alpha.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.RGBA.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.RGBA.Green">
            <summary>
            Green.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.RGBA.Blue">
            <summary>
            Blue.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Gradient">
            <summary>
            Defines the direction of the gradient vector.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.North">
            <summary>
            North direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.NorthWest">
            <summary>
            North-West direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.West">
            <summary>
            West direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.SouthWest">
            <summary>
            South-West direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.South">
            <summary>
            South direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.SouthEast">
            <summary>
            South-East direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.East">
            <summary>
            East direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.NorthEast">
            <summary>
            North-East direction.
            </summary>
        </member>
        <member name="T:UMapx.Response.IIR">
            <summary>
            Defines a filter with an infinite impulse response.
            <remarks>
            Filter with infinite impulse response (recursive filter, IIR filter or IIR filter) - a linear electronic filter,
            using one or more of its outputs as an input, i.e. forms a feedback. The main property of such filters
            is that their impulse response is of infinite length in the time domain, and the transfer function
            has a fractional rational look.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Response.IIR.#ctor">
            <summary>
            Initializes a filter with an infinite impulse response.
            </summary>
        </member>
        <member name="M:UMapx.Response.IIR.#ctor(System.Double[],System.Double[])">
            <summary>
            Initializes a filter with an infinite impulse response.
            </summary>
            <param name="b">Array of signal coefficients</param>
            <param name="a">Array of feedback coefficients</param>
        </member>
        <member name="P:UMapx.Response.IIR.A">
            <summary>
            Gets or sets the array of feedback coefficients.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.B">
            <summary>
            Gets or sets the array of signal coefficients.
            </summary>
        </member>
        <member name="M:UMapx.Response.IIR.Reaction(System.Double[])">
            <summary>
            Returns an array of filter response values when a discrete function is supplied.
            </summary>
            <param name="u">Array</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IIR.Amplitude(System.Double[])">
            <summary>
            Returns the frequency response of the filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IIR.Phase(System.Double[])">
            <summary>
            Returns the phase-frequency response of a filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IIR.Amplitude(System.Double)">
            <summary>
            Returns the amplitude value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Response.IIR.Phase(System.Double)">
            <summary>
            Returns the phase value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Response.IIR.Stability">
            <summary>
            Checks if the specified filter is stable.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.LowPass">
            <summary>
            Gets the finished low pass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.HighPass">
            <summary>
            Gets the finished high-pass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.BandPass">
            <summary>
            Gets the finished bandpass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.Notch">
            <summary>
            Gets the finished notch filter.
            </summary>
        </member>
        <member name="T:UMapx.Response.FIR">
            <summary>
            Defines a filter with a finite impulse response.
            <remarks>
            A filter with a finite impulse response (transverse filter, FIR filter or FIR filter) is one of the types of linear
            digital filters, a characteristic feature of which is the limited time of its impulse response
            (from some point in time it becomes exactly equal to zero). Such a filter is also called non-recursive due to the lack of feedback.
            The denominator of the transfer function of such a filter is a certain constant.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Response.FIR.#ctor">
            <summary>
            Initializes a filter with a finite impulse response.
            </summary>
        </member>
        <member name="M:UMapx.Response.FIR.#ctor(System.Double[])">
            <summary>
            Initializes a filter with a finite impulse response.
            </summary>
            <param name="b">Array of signal coefficients</param>
        </member>
        <member name="P:UMapx.Response.FIR.B">
            <summary>
            Gets or sets the array of signal coefficients.
            </summary>
        </member>
        <member name="M:UMapx.Response.FIR.Reaction(System.Double[])">
            <summary>
            Returns an array of filter response values when a discrete function is supplied.
            </summary>
            <param name="u">Array</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.FIR.Amplitude(System.Double[])">
            <summary>
            Returns the frequency response of the filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.FIR.Phase(System.Double[])">
            <summary>
            Returns the phase-frequency response of a filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.FIR.Amplitude(System.Double)">
            <summary>
            Returns the amplitude value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Response.FIR.Phase(System.Double)">
            <summary>
            Returns the phase value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Response.FIR.LowPass">
            <summary>
            Gets the finished low pass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.FIR.HighPass">
            <summary>
            Gets the finished high-pass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.FIR.BandPass">
            <summary>
            Gets the finished bandpass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.FIR.Notch">
            <summary>
            Gets the finished notch filter.
            </summary>
        </member>
        <member name="T:UMapx.Response.IResponse">
            <summary>
            Defines the general interface of response Filters.
            </summary>
        </member>
        <member name="M:UMapx.Response.IResponse.Reaction(System.Double[])">
            <summary>
            Returns an array of filter response values when a discrete function is supplied.
            </summary>
            <param name="u">Array</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IResponse.Amplitude(System.Double[])">
            <summary>
            Returns the frequency response of the filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IResponse.Phase(System.Double[])">
            <summary>
            Returns the phase-frequency response of a filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IResponse.Amplitude(System.Double)">
            <summary>
            Returns the amplitude value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Response.IResponse.Phase(System.Double)">
            <summary>
            Returns the phase value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Transform.WalshHadamardTransform">
            <summary>
            Defines the Walsh-Hadamard transform.
            <remarks>
            More information can be found on the website:
            http://kibia.ru/teachers/kreindelin/pdf/2.pdf
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.WalshHadamardTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.WalshHadamardTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Walsh-Hadamard transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.WalshHadamardTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.WalshHadamardTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Hadamard(System.Int32)">
            <summary>
            Implements the construction of the Walsh-Hadamard matrix.
            </summary>
            <param name="powOf2">Power of 2</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Hadamard">
            <summary>
            Implements the construction of the Walsh-Hadamard matrix [2 x 2].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Forward(System.Double[])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Backward(System.Double[])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.CosineTransform">
            <summary>
            Defines the cosine transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_cosine_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.CosineTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Initializes the cosine transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.CosineTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Cosine(System.Int32)">
            <summary>
            Implements the construction of the cosine transform matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Forward(System.Double[])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Backward(System.Double[])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.SineTransform">
            <summary>
            Defines the sine transform.
            <remarks>
            More information can be found on the website:
            http://sernam.ru/book_prett1.php?id=91
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.SineTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.SineTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Initializes the sine transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.SineTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Sine(System.Int32)">
            <summary>
            Implements the construction of the sine transform matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Forward(System.Double[])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Backward(System.Double[])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.HartleyTransform">
            <summary>
            Defines the Hartley transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_Hartley_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.HartleyTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.HartleyTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Hartley transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.HartleyTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.HartleyTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Hartley(System.Int32)">
            <summary>
            Implements the construction of the Hartley transform matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Forward(System.Double[])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Backward(System.Double[])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FourierTransform">
            <summary>
            Defines the Fourier transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_Fourier_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FourierTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FourierTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Fourier transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FourierTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FourierTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Fourier(System.Int32)">
            <summary>
            Implements the construction of the Fourier matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Forward(System.Double[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Backward(System.Double[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.LaplaceTransform">
            <summary>
            Defines the Laplace transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Laplace_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.LaplaceTransform.sigma">
            <summary>
            Standard deviation.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LaplaceTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LaplaceTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.#ctor(System.Double,System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Laplace transform.
            </summary>
            <param name="sigma">Standard deviation (0, 1)</param>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.LaplaceTransform.Sigma">
            <summary>
            Gets or sets the standard deviation (0, 1).
            <remarks>
            If σ = 0, then the Laplace transform takes the form of a Fourier transform.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Transform.LaplaceTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LaplaceTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Laplace(System.Int32,System.Double,System.Boolean)">
            <summary>
            Implements the construction of the Laplace matrix.
            </summary>
            <param name="n">Size</param>
            <param name="sigma">Standard deviation (0, 1)</param>
            <param name="backward">Return backward transformation matrix or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Forward(System.Double[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Backward(System.Double[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.HilbertTransform">
            <summary>
            Defines the Hilbert transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hilbert_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.HilbertTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Hilbert transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.HilbertTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.HilbertTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Forward(System.Double[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Backward(System.Double[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.hilbertf(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Implements the rearrangement of the spectrum according to Hilbert.
            </summary>
            <param name="f">Spectrum</param>
            <param name="n">Length</param>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.hilbertb(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Int32)">
            <summary>
            Implements the rearrangement of the spectrum according to Hilbert.
            </summary>
            <param name="a">Array</param>
            <param name="f">Spectrum</param>
            <param name="n">Length</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Transform.FastWalshHadamardTransform">
            <summary>
            Defines the fast Walsh-Hadamard transform.
            <remarks>
            More information can be found on the website:
            http://www.mathworks.com/matlabcentral/fileexchange/6879-fast-walsh-hadamard-transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastWalshHadamardTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastWalshHadamardTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Walsh-Hadamard transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastWalshHadamardTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastWalshHadamardTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Forward(System.Double[])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Backward(System.Double[])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.fwht(System.Double[])">
             <summary>
            
             </summary>
             <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.fwht(UMapx.Core.Complex[])">
            <summary>
            
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="T:UMapx.Transform.FastFourierTransform">
            <summary>
            Defines the fast Fourier transform using the Cooley-Tukey algorithm.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastFourierTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastFourierTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Fourier transform using the Cooley-Tukey algorithm.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastFourierTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastFourierTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Forward(System.Double[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Backward(System.Double[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.fft(UMapx.Core.Complex[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.ifft(UMapx.Core.Complex[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.GetReversedBits(System.Int32)">
            <summary>
            Gets an array with pointers to data members that must be replaced before the FFT.
            </summary>
            <param name="numberOfBits">Number of bits</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.ForwardComplexRotation(System.Int32)">
            <summary>
            Gets the forward rotation of a complex number.
            </summary>
            <param name="numberOfBits">Number of bits</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.BackwardComplexRotation(System.Int32)">
            <summary>
            Gets the backward rotation of a complex number.
            </summary>
            <param name="numberOfBits">Number of bits</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.ReorderData(UMapx.Core.Complex[])">
            <summary>
            Reorders data to use FFT.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Pow2(System.Int32)">
            <summary>
            Computes power of 2.
            </summary>
            <param name="power">Power</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Log2(System.Int32)">
            <summary>
            Calculates the base 2 logarithm.
            </summary>
            <param name="x">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="T:UMapx.Transform.FastHartleyTransform">
            <summary>
            Defines the fast Hartley transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_Hartley_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastHartleyTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Hartley transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastHartleyTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastHartleyTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Forward(System.Double[])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Backward(System.Double[])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FastHilbertTransform">
            <summary>
            Defines the fast Hilbert transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hilbert_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastHilbertTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastHilbertTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Hilbert transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastHilbertTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastHilbertTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Forward(System.Double[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Backward(System.Double[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FastCosineTransform">
            <summary>
            Defines the fast cosine transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_cosine_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastCosineTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastCosineTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Initializes the fast cosine transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastCosineTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Forward(System.Double[])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Backward(System.Double[])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FastSineTransform">
            <summary>
            Defines the fast sine transform.
            <remarks>
            More information can be found on the website:
            http://sernam.ru/book_prett1.php?id=91
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastSineTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastSineTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Defines the fast sine transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastSineTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Forward(System.Double[])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Backward(System.Double[])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FastLaplaceTransform">
            <summary>
            Defines the fast Laplace transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Laplace_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastLaplaceTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastLaplaceTransform.sigma">
            <summary>
            Standard deviation.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastLaplaceTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastLaplaceTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.#ctor(System.Double,System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Laplace transform.
            </summary>
            <param name="sigma">Standard deviation (0, 1)</param>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastLaplaceTransform.Sigma">
            <summary>
            Gets or sets the standard deviation (0, 1).
            <remarks>
            If σ = 0, then the Laplace transform takes the form of a Fourier transform.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastLaplaceTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastLaplaceTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Forward(System.Double[])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Backward(System.Double[])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.laplace(UMapx.Core.Complex[],System.Double)">
            <summary>
            
            </summary>
            <param name="v">Array</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.invlaplace(UMapx.Core.Complex[],System.Double)">
            <summary>
            
            </summary>
            <param name="v">Array</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="T:UMapx.Transform.LaplacianPyramidTransform">
            <summary>
            Defines the Laplacian pyramid transform.
            <remarks>
            More information can be found on the website:
            http://www.cs.toronto.edu/~jepson/csc320/notes/pyramids.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.#ctor(System.Int32)">
            <summary>
            Initializes the Laplacian pyramid transform.
            </summary>
            <param name="levels">Number of levels</param>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.#ctor">
            <summary>
            Initializes the Laplacian pyramid transform.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LaplacianPyramidTransform.Levels">
            <summary>
            Gets or sets number of levels.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(System.Double[])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Backward(System.Double[0:,0:][])">
            <summary>
            Backward Laplacian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Backward(System.Double[][])">
            <summary>
            Backward Laplacian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Backward(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Backward Laplacian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Backward(UMapx.Core.Complex[][])">
            <summary>
            Backward Laplacian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(System.Double[0:,0:][])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Gaussian pyramid</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(System.Double[][])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Gaussian pyramid</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Gaussian pyramid</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(UMapx.Core.Complex[][])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Gaussian pyramid</param>
            <returns>Pyramid</returns>
        </member>
        <member name="T:UMapx.Transform.GaussianPyramidTransform">
            <summary>
            Defines the Gaussian pyramid transform.
            <remarks>
            More information can be found on the website:
            http://www.cs.toronto.edu/~jepson/csc320/notes/pyramids.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.#ctor">
            <summary>
            Initializes the Gaussian pyramid transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.#ctor(System.Int32)">
            <summary>
            Initializes the Gaussian pyramid transform.
            </summary>
            <param name="levels">Number of levels</param>
        </member>
        <member name="P:UMapx.Transform.GaussianPyramidTransform.Levels">
            <summary>
            Gets or sets number of levels.
            </summary>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Gaussian pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Forward(System.Double[])">
            <summary>
            Forward Gaussian pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Backward(System.Double[0:,0:][])">
            <summary>
            Backward Gaussian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Backward(System.Double[][])">
            <summary>
            Backward Gaussian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Gaussian pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Gaussian pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Backward(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Backward Gaussian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Backward(UMapx.Core.Complex[][])">
            <summary>
            Backward Gaussian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="P:UMapx.Transform.GaussianPyramidTransform.Filter">
            <summary>
            Gaussian filter.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.upsample(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="u">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.upsample(System.Double[])">
            <summary>
             
            </summary>
            <param name="u">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.downsample(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="u">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.downsample(System.Double[])">
            <summary>
            
            </summary>
            <param name="u">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.add(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.add(System.Double[],System.Double[])">
            <summary>
            
            </summary>
            <param name="m">Array</param>
            <param name="n">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.sub(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.sub(System.Double[],System.Double[])">
            <summary>
            
            </summary>
            <param name="m">Array</param>
            <param name="n">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.upsample(UMapx.Core.Complex[0:,0:])">
            <summary>
            
            </summary>
            <param name="u">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.upsample(UMapx.Core.Complex[])">
            <summary>
            
            </summary>
            <param name="u">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.downsample(UMapx.Core.Complex[0:,0:])">
            <summary>
            
            </summary>
            <param name="u">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.downsample(UMapx.Core.Complex[])">
            <summary>
            
            </summary>
            <param name="u">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.add(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.add(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            
            </summary>
            <param name="m">Array</param>
            <param name="n">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.sub(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.sub(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            
            </summary>
            <param name="m">Array</param>
            <param name="n">Array</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Transform.FrequencyFilter">
            <summary>
            Defines the frequency filter.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FrequencyFilter.FrequencyRange">
            <summary>
            Gets or sets the frequency range.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.#ctor">
            <summary>
            Initializes the frequency filter.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.#ctor(UMapx.Core.RangeInt)">
            <summary>
            Initializes the frequency filter.
            </summary>
            <param name="frequencyRange">Frequency range</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the frequency filter.
            </summary>
            <param name="min">Minimum frequency</param>
            <param name="max">Maximum frequency</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="T:UMapx.Transform.CompressFilter">
            <summary>
            Defines the compression filter by threshold value.
            </summary>
        </member>
        <member name="F:UMapx.Transform.CompressFilter.threshold">
            <summary>
            Threshold value.
            </summary>
        </member>
        <member name="F:UMapx.Transform.CompressFilter.compresstype">
            <summary>
            Compress type.
            </summary>
        </member>
        <member name="M:UMapx.Transform.CompressFilter.#ctor">
            <summary>
            Initializes the compression filter by threshold value.
            </summary>
        </member>
        <member name="M:UMapx.Transform.CompressFilter.#ctor(System.Double,UMapx.Transform.CompressFilter.Compress)">
            <summary>
            Initializes the compression filter by threshold value.
            </summary>
            <param name="threshold">Threshold value</param>
            <param name="compresstype">Compress type</param>
        </member>
        <member name="P:UMapx.Transform.CompressFilter.CompressType">
            <summary>
            Gets or sets the compress type.
            </summary>
        </member>
        <member name="P:UMapx.Transform.CompressFilter.Threshold">
            <summary>
            Gets or sets the threshold value.
            </summary>
        </member>
        <member name="M:UMapx.Transform.CompressFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.CompressFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.CompressFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.CompressFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="T:UMapx.Transform.CompressFilter.Compress">
            <summary>
            Defines the compress type.
            </summary>
        </member>
        <member name="F:UMapx.Transform.CompressFilter.Compress.Abs">
            <summary>
            Absolute compression.
            </summary>
        </member>
        <member name="F:UMapx.Transform.CompressFilter.Compress.Under">
            <summary>
            ompression of values is less than threshold.
            </summary>
        </member>
        <member name="F:UMapx.Transform.CompressFilter.Compress.Over">
            <summary>
            Compression of values is greater than the threshold.
            </summary>
        </member>
        <member name="T:UMapx.Transform.BoxFilterOptions">
            <summary>
            Defines a local averaging filter.
            </summary>
        </member>
        <member name="M:UMapx.Transform.BoxFilterOptions.boxf(System.Double[0:,0:],UMapx.Core.Direction,System.Int32)">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Transform.BoxFilterOptions.boxf(UMapx.Core.Complex[0:,0:],UMapx.Core.Direction,System.Int32)">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Transform.BoxFilterOptions.boxf(System.Double[],System.Int32,System.Int32)">
            <summary>
            Apply filter.
            </summary>
            <param name="input">Array</param>
            <param name="l">Length</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Transform.BoxFilterOptions.boxf(UMapx.Core.Complex[],System.Int32,System.Int32)">
            <summary>
            Apply filter.
            </summary>
            <param name="input">Array</param>
            <param name="l">Length</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Transform.BoxFilterOptions.boxf(System.Double[0:,0:][])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.BoxFilterOptions.boxf(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.BoxFilterOptions.boxf(System.Double[][])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Jagged array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.BoxFilterOptions.boxf(UMapx.Core.Complex[][])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Jagged array</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Transform.GuidedFilter">
            <summary>
            Defines the guided filter.
            <remarks>
            This filter is a computationally effective analogue of a bilateral filter.
            More information can be found on the website:
            http://kaiminghe.com/eccv10/index.html
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.GuidedFilter.eps">
            <summary>
            Epsilon.
            </summary>
        </member>
        <member name="F:UMapx.Transform.GuidedFilter.factor">
            <summary>
            Factor.
            </summary>
        </member>
        <member name="F:UMapx.Transform.GuidedFilter.radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Initializes the guided filter.
            </summary>
            <param name="radius">Radius (>1)</param>
            <param name="eps">Epsilon (0, 1)</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.GuidedFilter.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
        </member>
        <member name="P:UMapx.Transform.GuidedFilter.Eps">
            <summary>
            Gets or sets the value of the epsilon (0, 1).
            <remarks>
            Optimal value ε = 0.025.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Transform.GuidedFilter.Factor">
            <summary>
            Gets or sets the factor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.FromBilateral(System.Int32,System.Double)">
            <summary>
            Creates a guided filter with the specified parameters for a bilateral filter.
            </summary>
            <param name="s">σs</param>
            <param name="r">σr</param>
            <returns>Guided filter</returns>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.guidedfilter(System.Double[0:,0:],System.Int32,System.Double)">
            <summary>
            Guided filer function.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Filter size</param>
            <param name="eps">Epsilon (0, 1)</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.guidedfilter(UMapx.Core.Complex[0:,0:],System.Int32,System.Double)">
            <summary>
            Guided filer function.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Filter size</param>
            <param name="eps">Epsilon (0, 1)</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.guidedfilter(System.Double[],System.Int32,System.Double)">
            <summary>
            Guided filer function.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Filter size</param>
            <param name="eps">Epsilon (0, 1)</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.guidedfilter(UMapx.Core.Complex[],System.Int32,System.Double)">
            <summary>
            Guided filer function.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Filter size</param>
            <param name="eps">Epsilon (0, 1)</param>
        </member>
        <member name="T:UMapx.Transform.DomainTransformFilter">
            <summary>
            Defines the domain transform filter.
            <remarks>
            This filter is a computationally effective analogue of a bilateral filter.
            More information can be found on the website:
            http://www.inf.ufrgs.br/~eslgastal/DomainTransform/Gastal_Oliveira_SIGGRAPH2011_Domain_Transform.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.#ctor(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Initializes the domain transform filter.
            </summary>
            <param name="sigma_s">σs</param>
            <param name="sigma_r">σr</param>
            <param name="iterations">Number of iterations</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.DomainTransformFilter.SigmaS">
            <summary>
            Gets or sets the value of σs.
            </summary>
        </member>
        <member name="P:UMapx.Transform.DomainTransformFilter.SigmaR">
            <summary>
            Gets or sets the value of σr.
            </summary>
        </member>
        <member name="P:UMapx.Transform.DomainTransformFilter.Iterations">
            <summary>
            Gets or sets the number of iterations.
            </summary>
        </member>
        <member name="P:UMapx.Transform.DomainTransformFilter.Factor">
            <summary>
            Gets or sets the factor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.domainfilter(System.Double[0:,0:],System.Double,System.Double,System.Int32)">
            <summary>
            Domain transform filter.
            </summary>
            <param name="I">Input signal</param>
            <param name="sigma_s">High sigma</param>
            <param name="sigma_r">Low sigma</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.domainfilter(UMapx.Core.Complex[0:,0:],System.Double,System.Double,System.Int32)">
            <summary>
            Domain transform filter.
            </summary>
            <param name="I">Input signal</param>
            <param name="sigma_s">High sigma</param>
            <param name="sigma_r">Low sigma</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.domainfilter(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            Domain transform filter.
            </summary>
            <param name="I">Input signal</param>
            <param name="sigma_s">High sigma</param>
            <param name="sigma_r">Low sigma</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.domainfilter(UMapx.Core.Complex[],System.Double,System.Double,System.Int32)">
            <summary>
            Domain transform filter.
            </summary>
            <param name="I">Input signal</param>
            <param name="sigma_s">High sigma</param>
            <param name="sigma_r">Low sigma</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.tdrf_h(System.Double[0:,0:],System.Double[0:,0:],System.Double)">
            <summary>
            Transformed domain recursive filter (horizontal).
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.tdrf_v(System.Double[0:,0:],System.Double[0:,0:],System.Double)">
            <summary>
            Transformed domain recursive filter (vertical).
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.tdrf_h(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Transformed domain recursive filter (horizontal).
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.tdrf_v(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Transformed domain recursive filter (vertical).
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.tdrf(System.Double[],System.Double[],System.Double)">
            <summary>
            Transformed domain recursive filter.
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.tdrf(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Double)">
            <summary>
            Transformed domain recursive filter.
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="T:UMapx.Transform.LaplacianPyramidFilter">
            <summary>
            Defines the Laplace pyramid filter.
            <remarks>
            More information can be found on the website:
            http://www.cs.toronto.edu/~jepson/csc320/notes/pyramids.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.#ctor(UMapx.Transform.LaplacianPyramidTransform,System.Double)">
            <summary>
            Initializes the Laplace pyramid filter.
            </summary>
            <param name="lap">Laplacian pyramid</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.LaplacianPyramidFilter.LaplacianPyramid">
            <summary>
            Gets or sets the Laplacian pyramid.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LaplacianPyramidFilter.Factor">
            <summary>
            Gets or sets the factor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="T:UMapx.Transform.LocalLaplacianFilter">
            <summary>
            Defines the local Laplace pyramid filter.
            <remarks>
            More information can be found on the website:
            https://people.csail.mit.edu/sparis/publi/2011/siggraph/
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.sigma">
            <summary>
            Sigma.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.factor">
            <summary>
            Factor.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.n">
            <summary>
            Number of samples.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.levels">
            <summary>
            Number of levels.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.#ctor(System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes the local Laplace pyramid filter.
            </summary>
            <param name="sigma">σ-parameter</param>
            <param name="n">Number of samples</param>
            <param name="levels">Number of levels</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.Sigma">
            <summary>
            Gets or sets the value of σ-parameter.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.Factor">
            <summary>
            Gets or sets the factor.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.N">
            <summary>
            Gets or sets the number of samples.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.Levels">
            <summary>
            Gets or sets the number of levels.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.llfilter(System.Double[0:,0:],System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Local laplacian filter.
            </summary>
            <param name="input">Input data</param>
            <param name="sigma">Sigma</param>
            <param name="factor">Factor</param>
            <param name="n">Number of steps</param>
            <param name="levels">Levels</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.llfilter(System.Double[],System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Local laplacian filter.
            </summary>
            <param name="input">Input data</param>
            <param name="sigma">Sigma</param>
            <param name="factor">Factor</param>
            <param name="n">Number of steps</param>
            <param name="levels">Levels</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Rec(System.Double,System.Double,System.Double)">
            <summary>
            Reconstruct function.
            </summary>
            <param name="x">Argument</param>
            <param name="i">Increment</param>
            <param name="step">Step</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Rec(System.Double,System.Double,System.Int32)">
            <summary>
            Reconstruct function.
            </summary>
            <param name="i">Increment</param>
            <param name="step">Step</param>
            <param name="length">Length of table</param>
            <returns>Table</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Rem(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Remapping function.
            </summary>
            <param name="x">Argument</param>
            <param name="sigma">Sigma</param>
            <param name="factor">Factor</param>
            <param name="i">Increment</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Rem(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Remapping function.
            </summary>
            <param name="sigma">Sigma</param>
            <param name="factor">Factor</param>
            <param name="i">Increment</param>
            <param name="length">Length of table</param>
            <returns>Table</returns>
        </member>
        <member name="T:UMapx.Transform.ITransform">
            <summary>
            Defines the transform interface.
            </summary>
        </member>
        <member name="M:UMapx.Transform.ITransform.Forward(System.Double[])">
            <summary>
            Forward transform.
            </summary>
            <param name="data">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Backward(System.Double[])">
            <summary>
            Backward transform.
            </summary>
            <param name="data">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward transform.
            </summary>
            <param name="data">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward transform.
            </summary>
            <param name="data">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.IPyramidTransform">
            <summary>
            Defines the pyramid transform interface.
            </summary>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Backward(System.Double[0:,0:][])">
            <summary>
            Backward pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Forward(System.Double[])">
            <summary>
            Forward pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Backward(System.Double[][])">
            <summary>
            Backward pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Backward(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Backward pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Backward(UMapx.Core.Complex[][])">
            <summary>
            Backward pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Transform.IFilter">
            <summary>
            Defines the filter interface.
            </summary>
        </member>
        <member name="M:UMapx.Transform.IFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.IFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.IFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.IFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="T:UMapx.Wavelet.WaveletTransform">
            <summary>
            Defines a discrete wavelet transform.
            <remarks>
            For the correct wavelet transform of a signal, it is necessary that its dimension be a power of 2.
            
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_wavelet_transform
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.#ctor(UMapx.Wavelet.WaveletPack,System.Int32,System.Boolean)">
            <summary>
            Initializes a discrete wavelet transform.
            </summary>
            <param name="wavelet">Discrete wavelet</param>
            <param name="levels">Number of levels</param>
            <param name="normalized">Normalized transform or not</param>
        </member>
        <member name="P:UMapx.Wavelet.WaveletTransform.Levels">
            <summary>
            Gets or sets the number of transform levels.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletTransform.Wavelet">
            <summary>
            Gets or sets the discrete wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Forward(System.Double[])">
            <summary>
            Forward wavelet transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Backward(System.Double[])">
            <summary>
            Backward wavelet transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward wavelet transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward wavelet transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward wavelet transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward wavelet transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward wavelet transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward wavelet transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.dwt(System.Double[],System.Int32)">
            <summary>
            Forward discrete wavelet transform.
            </summary>
            <param name="input">Input signal</param>
            <param name="level">Current level of transform</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.idwt(System.Double[],System.Int32)">
            <summary>
            Backward discrete wavelet transform.
            </summary>
            <param name="input">Input signal</param>
            <param name="level">Current level of transform</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.dwt(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Forward discrete wavelet transform.
            </summary>
            <param name="input">Input signal</param>
            <param name="level">Current level of transform</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.idwt(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Backward discrete wavelet transform.
            </summary>
            <param name="input">Input signal</param>
            <param name="level">Current level of transform</param>
            <returns>Output data</returns>
        </member>
        <member name="T:UMapx.Wavelet.WaveletPack">
            <summary>
            Defines the discrete wavelet.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.#ctor(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Initializes the discrete wavelet.
            </summary>
            <param name="lp">Scaling function of forward transform</param>
            <param name="hp">Wavelet function of forward transform</param>
            <param name="ilp">Scaling function of backward transform</param>
            <param name="ihp">Wavelet function of backward transform</param>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.LowPass">
            <summary>
            Gets or sets the scaling function of forward transform.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.HighPass">
            <summary>
            Gets or sets the wavelet function of forward transform.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.iLowPass">
            <summary>
            Gets or sets the scaling function of backward transform.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.iHighPass">
            <summary>
            Gets or sets the wavelet function of backward transform.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.InvertOdds(System.Double[])">
            <summary>
            Inverts the odd elements of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.InvertEvens(System.Double[])">
            <summary>
            Inverts even elements of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.GetWavelet(System.Double[])">
            <summary>
            Returns the Daubechies wavelet function.
            </summary>
            <param name="scaling">Scaling function</param>
            <returns>Wavelet function</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.Create(System.Double[])">
            <summary>
            Creates the discrete wavelet.
            </summary>
            <param name="scaling">Scaling function</param>
            <returns>Discrete wavelet</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.Create(System.Double[],System.Double[])">
            <summary>
            Creates the discrete wavelet.
            </summary>
            <param name="scaling">Scaling function</param>
            <param name="wavelet">Wavelet function</param>
            <returns>Discrete wavelet</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.System#ICloneable#Clone">
            <summary>
            Creates a copy of the discrete wavelet.
            </summary>
            <returns>Discrete wavelet</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.Clone">
            <summary>
            Creates a copy of the discrete wavelet.
            </summary>
            <returns>Discrete wavelet</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets information about the object.
            </summary>
            <param name="info">Data needed for serialization and deserialization</param>
            <param name="context">Source and destination of a given stream</param>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior11">
            <summary>
            Returns a biorthogonal wavelet 1.1.
            <remarks>
            Haar wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior13">
            <summary>
            Returns a biorthogonal wavelet 1.3.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior15">
            <summary>
            Returns a biorthogonal wavelet 1.5.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior22">
            <summary>
            Returns a biorthogonal wavelet 2.2.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior24">
            <summary>
            Returns a biorthogonal wavelet 2.4.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior26">
            <summary>
            Returns a biorthogonal wavelet 2.6.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior28">
            <summary>
            Returns a biorthogonal wavelet 2.8.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior31">
            <summary>
            Returns a biorthogonal wavelet 3.1.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior33">
            <summary>
            Returns a biorthogonal wavelet 3.3.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior35">
            <summary>
            Returns a biorthogonal wavelet 3.5.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior37">
            <summary>
            Returns a biorthogonal wavelet 3.7.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D1">
            <summary>
            Returns Daubechies wavelet of 1 order.
            <remarks>
            Haar wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D2">
            <summary>
            Returns Daubechies wavelet of 2 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D3">
            <summary>
            Returns Daubechies wavelet of 3 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D4">
            <summary>
            Returns Daubechies wavelet of 4 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D5">
            <summary>
            Returns Daubechies wavelet of 5 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D6">
            <summary>
            Returns Daubechies wavelet of 6 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D7">
            <summary>
            Returns Daubechies wavelet of 7 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D8">
            <summary>
            Returns Daubechies wavelet of 8 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D9">
            <summary>
            Returns Daubechies wavelet of 9 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D10">
            <summary>
            Returns Daubechies wavelet of 10 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D11">
            <summary>
            Returns Daubechies wavelet of 11 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D12">
            <summary>
            Returns Daubechies wavelet of 12 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D13">
            <summary>
            Returns Daubechies wavelet of 13 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D14">
            <summary>
            Returns Daubechies wavelet of 14 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D15">
            <summary>
            Returns Daubechies wavelet of 15 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D16">
            <summary>
            Returns Daubechies wavelet of 16 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D17">
            <summary>
            Returns Daubechies wavelet of 17 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D18">
            <summary>
            Returns Daubechies wavelet of 18 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D19">
            <summary>
            Returns Daubechies wavelet of 19 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D20">
            <summary>
            Returns Daubechies wavelet of 20 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D21">
            <summary>
            Returns Daubechies wavelet of 21 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D22">
            <summary>
            Returns Daubechies wavelet of 22 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D23">
            <summary>
            Returns Daubechies wavelet of 23 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D24">
            <summary>
            Returns Daubechies wavelet of 24 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D25">
            <summary>
            Returns Daubechies wavelet of 25 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D26">
            <summary>
            Returns Daubechies wavelet of 26 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D27">
            <summary>
            Returns Daubechies wavelet of 27 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D28">
            <summary>
            Returns Daubechies wavelet of 28 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D29">
            <summary>
            Returns Daubechies wavelet of 29 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D30">
            <summary>
            Returns Daubechies wavelet of 30 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D31">
            <summary>
            Returns Daubechies wavelet of 31 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D32">
            <summary>
            Returns Daubechies wavelet of 32 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D33">
            <summary>
            Returns Daubechies wavelet of 33 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D34">
            <summary>
            Returns Daubechies wavelet of 34 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D35">
            <summary>
            Returns Daubechies wavelet of 35 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D36">
            <summary>
            Returns Daubechies wavelet of 36 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D37">
            <summary>
            Returns Daubechies wavelet of 37 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D38">
            <summary>
            Returns Daubechies wavelet of 38 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C1">
            <summary>
            Returns wavelet coiflet of 1 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C2">
            <summary>
            Returns wavelet coiflet of 2 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C3">
            <summary>
            Returns wavelet coiflet of 3 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C4">
            <summary>
            Returns wavelet coiflet of 4 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C5">
            <summary>
            Returns wavelet coiflet of 5 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S1">
            <summary>
            Returns wavelet symlet of 1 order.
            <remarks>
            Haar wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S2">
            <summary>
            Returns wavelet symlet of 2 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S3">
            <summary>
            Returns wavelet symlet of 3 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S4">
            <summary>
            Returns wavelet symlet of 4 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S5">
            <summary>
            Returns wavelet symlet of 5 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S6">
            <summary>
            Returns wavelet symlet of 6 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S7">
            <summary>
            Returns wavelet symlet of 7 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S8">
            <summary>
            Returns wavelet symlet of 8 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S9">
            <summary>
            Returns wavelet symlet of 9 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S10">
            <summary>
            Returns wavelet symlet of 10 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S11">
            <summary>
            Returns wavelet symlet of 11 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S12">
            <summary>
            Returns wavelet symlet of 12 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S13">
            <summary>
            Returns wavelet symlet of 13 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S14">
            <summary>
            Returns wavelet symlet of 14 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S15">
            <summary>
            Returns wavelet symlet of 15 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S16">
            <summary>
            Returns wavelet symlet of 16 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S17">
            <summary>
            Returns wavelet symlet of 17 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S18">
            <summary>
            Returns wavelet symlet of 18 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S19">
            <summary>
            Returns wavelet symlet of 19 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S20">
            <summary>
            Returns wavelet symlet of 20 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Meyer">
            <summary>
            Returns the Meyer wavelet.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.F4">
            <summary>
            Returns the Fejer-Korovkin wavelet of 4 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.F6">
            <summary>
            Returns the Fejer-Korovkin wavelet of 6 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.F8">
            <summary>
            Returns the Fejer-Korovkin wavelet of 8 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.F14">
            <summary>
            Returns the Fejer-Korovkin wavelet of 14 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.F22">
            <summary>
            Returns the Fejer-Korovkin wavelet of 22 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L1">
            <summary>
            Returns Legendre wavelet of 1 order.
            <remarks>
            Haar wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L2">
            <summary>
            Returns Legendre wavelet of 2 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L3">
            <summary>
            Returns Legendre wavelet of 3 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L4">
            <summary>
            Returns Legendre wavelet of 4 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L5">
            <summary>
            Returns Legendre wavelet of 5 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L6">
            <summary>
            Returns Legendre wavelet of 6 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L7">
            <summary>
            Returns Legendre wavelet of 7 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L8">
            <summary>
            Returns Legendre wavelet of 8 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L9">
            <summary>
            Returns Legendre wavelet of 9 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Fbsp100">
            <summary>
            Returns B-spline wavelet 1-0-0.
            <remarks>
            Haar wavelet (delayed).
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Fbsp103">
            <summary>
            Returns B-spline wavelet 1-0-3.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Fbsp105">
            <summary>
            Returns B-spline wavelet 1-0-5.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Haar">
            <summary>
            Returns Haar wavelet.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF11">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 1/1).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF13">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 1/3).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF15">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 1/5).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF31">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 3/1).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF51">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 5/1).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF53">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 5/3).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF55">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 5/5).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF22">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 2/2).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF24">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 2/4).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF26">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 2/6).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF42">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 4/2).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF44">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 4/4).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF46">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 4/6).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF62">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 6/2).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF64">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 6/4).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF66">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 6/6).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF97">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 9/7).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Kravchenko">
            <summary>
            Returns Kravchenko wavelet.
            </summary>
        </member>
        <member name="T:UMapx.Wavelet.FbspWavelet">
            <summary>
            Defines the continuous complex frequency B-spline wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.FbspWavelet.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the continuous complex frequency B-spline wavelet.
            </summary>
            <param name="m">Order</param>
            <param name="fb">Bandwidth</param>
            <param name="fc">Center frequency</param>
        </member>
        <member name="P:UMapx.Wavelet.FbspWavelet.M">
            <summary>
            Gets or sets the value of the wavelet order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.FbspWavelet.Fb">
            <summary>
            Gets or sets the value of the bandwidth parameter.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.FbspWavelet.Fc">
            <summary>
            Gets or sets the center frequency value of the wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.FbspWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.FbspWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.HermitianHatWavelet">
            <summary>
            Defines the continuous Hermitian hat wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HermitianHatWavelet.#ctor">
            <summary>
            Initializes the continuous Hermitian Hat wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HermitianHatWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.HermitianHatWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.HermitianWavelet">
            <summary>
            Defines the continuous Hermitian wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HermitianWavelet.#ctor(System.Int32)">
            <summary>
            Initializes the continuous Hermitian wavelet.
            </summary>
            <param name="derivative">Derivative order [1, 3]</param>
        </member>
        <member name="P:UMapx.Wavelet.HermitianWavelet.Derivative">
            <summary>
            Gets or sets the derivative order [1, 3].
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HermitianWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.HermitianWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.GaborWavelet">
            <summary>
            Defines the continuous complex Gabor wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.GaborWavelet.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the continuous complex Gabor wavelet.
            </summary>
            <param name="x0">Initial value</param>
            <param name="k0">Modulation factor</param>
            <param name="a">Factor</param>
        </member>
        <member name="P:UMapx.Wavelet.GaborWavelet.X0">
            <summary>
            Gets or sets the initial value.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.GaborWavelet.K0">
            <summary>
            Gets or sets the modulation factor.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.GaborWavelet.A">
            <summary>
            Gets or sets the factor.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.GaborWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.GaborWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.GaborWavelet.WaveletReal(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.ComplexMorletWavelet">
            <summary>
            Defines the continuous complex Morlet wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ComplexMorletWavelet.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the continuous complex Morlet wavelet.
            </summary>
            <param name="fb">Bandwidth</param>
            <param name="fc">Center frequency</param>
        </member>
        <member name="P:UMapx.Wavelet.ComplexMorletWavelet.Fb">
            <summary>
            Gets or sets the bandwidth.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.ComplexMorletWavelet.Fc">
            <summary>
            Gets or sets the center frequency.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ComplexMorletWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.ComplexMorletWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.ComplexGaussianWavelet">
            <summary>
            Defines the continuous complex Gaussian wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ComplexGaussianWavelet.#ctor(System.Int32)">
            <summary>
            Initializes the continuous complex Gaussian wavelet.
            </summary>
            <param name="derivative">Derivative order [1, 8]</param>
        </member>
        <member name="P:UMapx.Wavelet.ComplexGaussianWavelet.Derivative">
            <summary>
            Gets or sets the derivative order [1, 8].
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ComplexGaussianWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.ComplexGaussianWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.GaussianWavelet">
            <summary>
            Defines the continuous Gaussian wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.GaussianWavelet.#ctor(System.Int32)">
            <summary>
            Initializes the continuous Gaussian wavelet.
            </summary>
            <param name="derivative">Derivative order [1, 8]</param>
        </member>
        <member name="P:UMapx.Wavelet.GaussianWavelet.Derivative">
            <summary>
            Gets or sets the derivative order [1, 8].
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.GaussianWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.GaussianWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.MexicanHatWavelet">
            <summary>
            Defines the continuous Mexican hat wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MexicanHatWavelet.#ctor">
            <summary>
            Initializes the continuous Mexican hat wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MexicanHatWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.MexicanHatWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.MorletWavelet">
            <summary>
            Defines the continuous Morlet wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MorletWavelet.#ctor">
            <summary>
            Initializes the continuous Morlet wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MorletWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.MorletWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.MeyerWavelet">
            <summary>
            Defines the continuous Meyer wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MeyerWavelet.#ctor">
            <summary>
            Initializes the continuous Meyer wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MeyerWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.MeyerWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.ShannonWavelet">
            <summary>
            Defines the continuous Shannon wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ShannonWavelet.#ctor">
            <summary>
            Initializes the continuous Shannon wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ShannonWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.ShannonWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.PoissonWavelet">
            <summary>
            Defines the continuous Poisson wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.PoissonWavelet.#ctor(System.Int32)">
            <summary>
            Initializes the continuous Poisson wavelet.
            </summary>
            <param name="n">Order [1, +inf)</param>
        </member>
        <member name="P:UMapx.Wavelet.PoissonWavelet.N">
            <summary>
            Gets or sets the order [1, +inf).
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.PoissonWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.PoissonWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.HaarWavelet">
            <summary>
            Defines the continuous Haar wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HaarWavelet.#ctor">
            <summary>
            Initializes the continuous Haar wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HaarWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.HaarWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.WaveletFilter">
            <summary>
            Defines the wavelet filter.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.#ctor(UMapx.Wavelet.WaveletTransform,System.Double,System.Double)">
            <summary>
            Initializes the wavelet filter.
            </summary>
            <param name="dwt">Discrete wavelet transform</param>
            <param name="factor">Factor [-1, 1]</param>
            <param name="accuracy">Accuracy [0, 1]</param>
        </member>
        <member name="P:UMapx.Wavelet.WaveletFilter.DWT">
            <summary>
            Gets or sets the discrete wavelet transform.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletFilter.Accuracy">
            <summary>
            Gets or sets the accuracy of the filter [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletFilter.Factor">
            <summary>
            Gets or sets the factor value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.Apply(System.Double[0:,0:])">
            <summary>
            Implements a wavelet filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.Apply(System.Double[])">
            <summary>
            Implements a wavelet filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements a wavelet filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Implements a wavelet filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.GetLength(System.Int32,System.Int32)">
            <summary>
            Returns the length value for transform.
            </summary>
            <param name="n">Length</param>
            <param name="levels">Number of levels</param>
            <returns>Length</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.GetMaxLevels(System.Int32,System.Int32)">
            <summary>
            Returns max levels of 2^K transform.
            </summary>
            <param name="n">Length</param>
            <param name="levels">Levels</param>
            <returns>New length</returns>
        </member>
        <member name="T:UMapx.Wavelet.IComplexWavelet">
            <summary>
            Defines the interface for continuous complex wavelets.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.IComplexWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.IComplexWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.IDoubleWavelet">
            <summary>
            Defines the interface for continuous wavelets.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.IDoubleWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.IDoubleWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.IWaveletTransform">
            <summary>
            Defines the wavelet transform interface.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.IWaveletTransform.Wavelet">
            <summary>
            Gets or sets the discrete wavelet.
            </summary>
        </member>
        <member name="T:UMapx.Window.Planck">
            <summary>
            Defines the window function of Planck.
            </summary>
        </member>
        <member name="M:UMapx.Window.Planck.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the Planck window function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="a">Form parameter [0, 0.5]</param>
        </member>
        <member name="P:UMapx.Window.Planck.A">
            <summary>
            Gets or sets the value of the form parameter [0, 0.5].
            </summary>
        </member>
        <member name="M:UMapx.Window.Planck.Z(System.Double,System.Boolean,System.Int32)">
            <summary>
            Function Z+-(x, a).
            </summary>
            <param name="x">Argument</param>
            <param name="p">Sign</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Planck.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Planck.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Tukey">
            <summary>
            Defines the window function of Tukey.
            </summary>
        </member>
        <member name="M:UMapx.Window.Tukey.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the Tukey window function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="a">Form parameter [0, 1]</param>
        </member>
        <member name="P:UMapx.Window.Tukey.A">
            <summary>
            Gets or sets the value of the form parameter [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Window.Tukey.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Tukey.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Confined">
            <summary>
            Defines the closed Gaussian window.
            </summary>
        </member>
        <member name="M:UMapx.Window.Confined.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the closed Gaussian window.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="sigma">Standard deviation (0.14 * N)</param>
        </member>
        <member name="M:UMapx.Window.Confined.#ctor(System.Int32)">
            <summary>
            Initializes a Gaussian window function closed.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="P:UMapx.Window.Confined.Sigma">
            <summary>
            Gets or sets the standard deviation (>0).
            </summary>
        </member>
        <member name="M:UMapx.Window.Confined.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Confined.G(System.Double)">
            <summary>
            Функция G(x).
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Confined.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Normal">
            <summary>
            Defines a generalized window normal function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Normal.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a generalized window normal function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="sigma">Standard deviation (>0)</param>
            <param name="pow">Power<remarks>For p = 2 - Gaussian window</remarks></param>
        </member>
        <member name="P:UMapx.Window.Normal.Sigma">
            <summary>
            Gets or sets the standard deviation (>0).
            </summary>
        </member>
        <member name="P:UMapx.Window.Normal.Pow">
            <summary>
            Power.
            </summary>
        </member>
        <member name="M:UMapx.Window.Normal.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Normal.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Kaiser">
            <summary>
            Defines the Kaiser window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Kaiser.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the Kaiser window function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="a">Form parameter</param>
        </member>
        <member name="P:UMapx.Window.Kaiser.A">
            <summary>
            Gets or sets the value of the form parameter.
            </summary>
        </member>
        <member name="M:UMapx.Window.Kaiser.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Kaiser.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Welch">
            <summary>
            Defines the Welch window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Welch.#ctor(System.Int32)">
            <summary>
            Initializes the Welch window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Welch.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Welch.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Lanzcos">
            <summary>
            Defines the Lanczos window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Lanzcos.#ctor(System.Int32)">
            <summary>
            Initializes the Lanczos window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Lanzcos.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Lanzcos.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Parzen">
            <summary>
            Defines the Parzen window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Parzen.#ctor(System.Int32)">
            <summary>
            Initializes the Parzen window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Parzen.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Parzen.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.FlatTop">
            <summary>
            Defines the "Flat-Top" window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.FlatTop.#ctor(System.Int32)">
            <summary>
            Initializes the "Flat-Top" window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.FlatTop.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.FlatTop.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Nuttall">
            <summary>
            Defines the Nuttall window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Nuttall.#ctor(System.Int32)">
            <summary>
            Initializes the Nuttall window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Nuttall.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Nuttall.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.BlackmanNuttall">
            <summary>
            Defines the Blackman-Nuttall window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.BlackmanNuttall.#ctor(System.Int32)">
            <summary>
            Initializes the Blackman-Nuttall window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.BlackmanNuttall.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.BlackmanNuttall.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.BlackmanHarris">
            <summary>
            Defines the Blackman-Harris window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.BlackmanHarris.#ctor(System.Int32)">
            <summary>
            Initializes the Blackman-Harris window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.BlackmanHarris.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.BlackmanHarris.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Blackman">
            <summary>
            Defines the Blackman window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Blackman.#ctor(System.Int32)">
            <summary>
            Initializes the Blackman window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Blackman.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Blackman.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.BarlettHann">
            <summary>
            Defines the Barlett-Hann window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.BarlettHann.#ctor(System.Int32)">
            <summary>
            Initializes the Barlett-Hann window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.BarlettHann.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.BarlettHann.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Hann">
            <summary>
            Defines the Hann window function (Hanning).
            </summary>
        </member>
        <member name="M:UMapx.Window.Hann.#ctor(System.Int32)">
            <summary>
            Initializes the Hann window function (Hanning).
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Hann.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Hann.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Hamming">
            <summary>
            Defines the Hamming window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Hamming.#ctor(System.Int32)">
            <summary>
            Initializes the Hamming window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Hamming.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Hamming.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Cosine">
            <summary>
            Defines the cosine window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Cosine.#ctor(System.Int32)">
            <summary>
            Initializes the cosine window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Cosine.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Cosine.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.Cosine.cosinefunc(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Factor</returns>
        </member>
        <member name="T:UMapx.Window.Sine">
            <summary>
            Defines the sine window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Sine.#ctor(System.Int32)">
            <summary>
            Initializes the sine window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Sine.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Sine.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.Sine.sinefunc(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Window.Gabor">
            <summary>
            Defines the Gabor window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Gabor.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the Gabor window function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="sigma">Scale parameter</param>
        </member>
        <member name="P:UMapx.Window.Gabor.Sigma">
            <summary>
            Gets or sets the standard deviation (>0).
            </summary>
        </member>
        <member name="M:UMapx.Window.Gabor.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Gabor.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.WindowBase">
            <summary>
            Defines the class for window functions.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Window_function
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Window.WindowBase.frameSize">
            <summary>
            Window size.
            </summary>
        </member>
        <member name="P:UMapx.Window.WindowBase.FrameSize">
            <summary>
            Gets or sets the window size.
            </summary>
        </member>
        <member name="M:UMapx.Window.WindowBase.Function(System.Double)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.GetWindow">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.Function(System.Double[],System.Int32)">
            <summary>
            Returns an array of window function values.
            </summary>
            <param name="x">Array</param>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.Function(System.Double[])">
            <summary>
            Returns an array of window function values.
            </summary>
            <param name="x">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.FastShortTimeFourierTransform">
            <summary>
            Defines fast short-time Fourier transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Short-time_Fourier_transform
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.#ctor(UMapx.Window.IWindow,System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes fast short-time Fourier transform.
            </summary>
            <param name="function">Windows function</param>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Window.FastShortTimeFourierTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Window.FastShortTimeFourierTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="P:UMapx.Window.FastShortTimeFourierTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Forward(System.Double[])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Backward(System.Double[])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Window.ShortTimeFourierTransform">
            <summary>
            Defines short-time Fourier transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Short-time_Fourier_transform
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.#ctor(UMapx.Window.IWindow,System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes short-time Fourier transform.
            </summary>
            <param name="function">Windows function</param>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Window.ShortTimeFourierTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Window.ShortTimeFourierTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="P:UMapx.Window.ShortTimeFourierTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Forward(System.Double[])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Backward(System.Double[])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Window.WeylHeisenbergTransform">
            <summary>
            Defines a group of orthogonal bases and discrete Weyl-Heisenberg transforms.
            <remarks>
            More information can be found on the website:
            https://elibrary.ru/item.asp?id=29767333
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Window.WeylHeisenbergTransform.window">
            <summary>
            Windows function.
            </summary>
        </member>
        <member name="F:UMapx.Window.WeylHeisenbergTransform.m">
            <summary>
            Number of frequency shifts.
            </summary>
        </member>
        <member name="F:UMapx.Window.WeylHeisenbergTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.#ctor(UMapx.Window.IWindow,System.Int32,UMapx.Core.Direction)">
            <summary>
            Initializes a group of orthogonal bases and Weyl-Heisenberg transformations.
            </summary>
            <param name="window">Windows function</param>
            <param name="m">Number of frequency shifts [4, N]</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Window.WeylHeisenbergTransform.M">
            <summary>
            Gets or sets number of frequency shifts [4, N].
            <remarks>
            Even number.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Window.WeylHeisenbergTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="P:UMapx.Window.WeylHeisenbergTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.WeylHeisenberg(UMapx.Window.IWindow,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the complex Weyl-Heisenberg basis matrix.
            <remarks>
            Matrix dimension[N, N], where N = M * L.
            </remarks>
            </summary>
            <param name="window">Windows function</param>
            <param name="N">Number of samples</param>
            <param name="M">Number of frequency shifts</param>
            <param name="orthogonalize">Orthogonalized matrix or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.WeylHeisenberg(System.Double[],System.Int32,System.Boolean)">
            <summary>
            Returns the complex Weyl-Heisenberg basis matrix.
            <remarks>
            Matrix dimension[N, N], where N = M * L.
            </remarks>
            </summary>
            <param name="g0">Function</param>
            <param name="M">Number of frequency shifts</param>
            <param name="orthogonalize">Orthogonalized matrix or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.GetPacket(UMapx.Window.IWindow,System.Int32)">
            <summary>
            Returns a vector of window function values.
            </summary>
            <param name="window">Windows function</param>
            <param name="length">Number of samples</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.nSymmetry(UMapx.Window.IWindow,System.Int32)">
            <summary>
            Returns a vector of values of a window function that satisfies the N-1 symmetry condition.
            </summary>
            <param name="window">Windows function</param>
            <param name="length">Number of samples</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.WeylHeisenberg(System.Double[],System.Int32)">
            <summary>
            Returns the complex Weyl-Heisenberg basis matrix.
            <remarks>
            Matrix dimension[N, N], where N = M * L.
            </remarks>
            </summary>
            <param name="g0">Function</param>
            <param name="M">Number of frequency shifts</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Forward(System.Double[])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Backward(System.Double[])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Zak(System.Double[],System.Int32)">
            <summary>
            Implements Zak-orthogonalization of the vector.
            </summary>
            <param name="v">Array</param>
            <param name="M">Number of frequency shifts</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Zak(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Implements Zak-orthogonalization of the vector.
            </summary>
            <param name="v">Array</param>
            <param name="M">Number of frequency shifts</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.FastWeylHeisenbergTransform">
            <summary>
            Defines fast Weyl-Heisenberg transform.
            <remarks>
            The class represents a computationally efficient implementation of one-dimensional and two-dimensional discrete orthogonal
            Weyl-Heisenberg transforms.
            More information can be found on the website:
            https://elibrary.ru/title_about.asp?id=58245
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.#ctor(UMapx.Window.IWindow,System.Int32,UMapx.Core.Direction)">
            <summary>
            Initializes fast Weyl-Heisenberg transform.
            </summary>
            <param name="window">Windows function</param>
            <param name="m">Number of frequency shifts [4, N]</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Window.FastWeylHeisenbergTransform.M">
            <summary>
            Gets or sets number of frequency shifts [4, N].
            <remarks>
            Even number.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Window.FastWeylHeisenbergTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="P:UMapx.Window.FastWeylHeisenbergTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Forward(System.Double[])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Backward(System.Double[])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.WHT(UMapx.Core.Complex[],System.Double[],System.Int32)">
            <summary>
            Fast forward Weyl-Heisenberg transform.
            </summary>
            <param name="input">Array</param>
            <param name="g0">Function</param>
            <param name="M">Number of frequency shifts</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.IWHT(UMapx.Core.Complex[],System.Double[],System.Int32)">
            <summary>
            Fast backward Weyl-Heisenberg transform.
            </summary>
            <param name="input">Array</param>
            <param name="g0">Function</param>
            <param name="M">Number of frequency shifts</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.GetRotation(System.Int32)">
            <summary>
            Returns an array of phase rotations.
            </summary>
            <param name="M">Number of frequency shifts</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.IWindow">
            <summary>
            Defines the interface of window functions.
            </summary>
        </member>
        <member name="P:UMapx.Window.IWindow.FrameSize">
            <summary>
            Gets or sets the window size.
            </summary>
        </member>
        <member name="M:UMapx.Window.IWindow.Function(System.Double)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.IWindow.GetWindow">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.IWindow.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.IWindow.Function(System.Double[],System.Int32)">
            <summary>
            Returns an array of window function values.
            </summary>
            <param name="x">Array</param>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.IWindow.Function(System.Double[])">
            <summary>
            Returns an array of window function values.
            </summary>
            <param name="x">Array</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.IWindowTransform">
            <summary>
            Defines the general window transform interface.
            </summary>
        </member>
        <member name="P:UMapx.Window.IWindowTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
    </members>
</doc>
