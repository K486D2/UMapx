<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UMapx</name>
    </assembly>
    <members>
        <member name="T:UMapx.Analysis.Approximation">
            <summary>
            Defines the least squares approximation class.
            <remarks>
            This class is a solution to the problem of finding the function A (x) ≈ F (x), where F (x) is the original function.
            More information can be found on the website:
            http://simenergy.ru/math-analysis/digital-processing/85-ordinary_least_squares
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Approximation.#ctor(System.Int32,UMapx.Analysis.Approximation.Method)">
            <summary>
            Initializes the least squares approximation class.
            </summary>
            <param name="power">Polynomial degree</param>
            <param name="method">Approximation method</param>
        </member>
        <member name="P:UMapx.Analysis.Approximation.Power">
            <summary>
            Gets or sets the degree of the polynomial.
            </summary>
        </member>
        <member name="P:UMapx.Analysis.Approximation.MethodType">
            <summary>
            Gets or sets the approximation method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(System.Double[],System.Double[])">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(System.Double[],System.Double[],System.Double[]@)">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <param name="cf">Approximation coefficients</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(System.Double[],System.Double[],System.Double[]@,System.Double@)">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <param name="cf">Approximation coefficients</param>
            <param name="similarity">Similarity</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(System.Double[],System.Double[],System.Double[]@,System.Double@,System.String@)">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <param name="cf">Approximation coefficients</param>
            <param name="similarity">Similarity</param>
            <param name="equation">Equation</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex[]@)">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <param name="cf">Approximation coefficients</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex[]@,UMapx.Core.Complex@)">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <param name="cf">Approximation coefficients</param>
            <param name="similarity">Similarity</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.Compute(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex[]@,UMapx.Core.Complex@,System.String@)">
            <summary>
            Returns the approximation value.
            </summary>
            <param name="x">Array of argument values</param>
            <param name="y">Array of function values</param>
            <param name="cf">Approximation coefficients</param>
            <param name="similarity">Similarity</param>
            <param name="equation">Equation</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.poly(System.Double[],System.Double[],System.Int32,System.Double[]@,System.Double@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.poly(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Int32,UMapx.Core.Complex[]@,UMapx.Core.Complex@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.logc(System.Double[],System.Double[],System.Int32,System.Double[]@,System.Double@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.logc(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Int32,UMapx.Core.Complex[]@,UMapx.Core.Complex@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.expn(System.Double[],System.Double[],System.Int32,System.Double[]@,System.Double@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.expn(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Int32,UMapx.Core.Complex[]@,UMapx.Core.Complex@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.powr(System.Double[],System.Double[],System.Int32,System.Double[]@,System.Double@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Approximation.powr(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Int32,UMapx.Core.Complex[]@,UMapx.Core.Complex@,System.String@)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="power"></param>
            <param name="cf"></param>
            <param name="error"></param>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Analysis.Approximation.Method">
            <summary>
            Approximation method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Approximation.Method.Polynomial">
            <summary>
            Polynomial approximation.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Approximation.Method.Logarithmic">
            <summary>
            Logarithmic approximation.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Approximation.Method.Exponential">
            <summary>
            Exponential approximation.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Approximation.Method.Power">
            <summary>
            Power approximation.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.Differentation">
            <summary>
            Defines a class that implements numerical differentiation.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Differentation.#ctor(System.Int32)">
            <summary>
            Initializes a class that implements numerical differentiation.
            </summary>
            <param name="points">Number of interpolation points</param>
        </member>
        <member name="P:UMapx.Analysis.Differentation.Points">
            <summary>
            Gets or sets the number of interpolation points.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Differentation.Compute(UMapx.Core.IDouble,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the value of a derived function.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="x">Argument value</param>
            <param name="h">Step</param>
            <param name="order">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Differentation.Compute(System.Double[],System.Int32,System.Double,System.Int32)">
            <summary>
            Returns the value of a derived function.
            </summary>
            <param name="y">Function vector</param>
            <param name="index">Index of argument</param>
            <param name="h">Step</param>
            <param name="order">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Differentation.Compute(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            Returns the value of a derived function.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="x">Argument value</param>
            <param name="h">Step</param>
            <param name="order">Order</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Differentation.Compute(UMapx.Core.Complex[],System.Int32,System.Double,System.Int32)">
            <summary>
            Returns the value of a derived function.
            </summary>
            <param name="y">Function vector</param>
            <param name="index">Index of argument</param>
            <param name="h">Step</param>
            <param name="order">Order</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Differentation.GetCoefficients(System.Int32)">
            <summary>
            Returns the matrix of interpolation coefficients.
            </summary>
            <param name="points">Number of points</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Analysis.Differential">
            <summary>
            Defines a class that implements a solution to a differential equation.
            <remarks>
            This class is a solution to the Cauchy problem for the ordinary differential equation y' = F(x, y).
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Differential.#ctor(UMapx.Analysis.Differential.Method)">
            <summary>
            Initializes a class that implements the solution of a differential equation.
            </summary>
            <param name="method">Differentiation method</param>
        </member>
        <member name="P:UMapx.Analysis.Differential.MethodType">
            <summary>
            Gets or sets the differentiation method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Differential.Compute(UMapx.Core.IDoubleMesh,System.Double[],System.Double)">
            <summary>
            Returns the value of a differential equation.
            </summary>
            <param name="function">The delegate of a continuous function depending on two variables</param>
            <param name="x">Array of values argument</param>
            <param name="y0">Value</param>
            <returns>Array of function values</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.Compute(UMapx.Core.IComplexMesh,UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            Returns the value of a differential equation.
            </summary>
            <param name="function">The delegate of a continuous function depending on two variables</param>
            <param name="x">Array of values argument</param>
            <param name="y0">Value</param>
            <returns>Array of function values</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.Compute(UMapx.Core.IDoubleMesh,System.Double[],System.Double,System.Int32)">
            <summary>
            Returns the value of a differential equation calculated by the Adams-Bashfort method.
            </summary>
            <param name="function">The delegate of a continuous function depending on two variables</param>
            <param name="x">Array of values argument</param>
            <param name="y0">Value</param>
            <param name="order">Order</param>
            <returns>Array of function values</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.Compute(UMapx.Core.IComplexMesh,UMapx.Core.Complex[],UMapx.Core.Complex,System.Int32)">
            <summary>
            Returns the value of a differential equation calculated by the Adams-Bashfort method.
            </summary>
            <param name="function">The delegate of a continuous function depending on two variables</param>
            <param name="x">Array of values argument</param>
            <param name="y0">Value</param>
            <param name="order">Order</param>
            <returns>Array of function values</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.GetCoefficients(System.Int32)">
            <summary>
            Returns an array of coefficient values for the Adams-Bashfort formula.
            </summary>
            <param name="order">Order</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.euler(UMapx.Core.IDoubleMesh,System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.rungeKutta2(UMapx.Core.IDoubleMesh,System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.rungeKutta4(UMapx.Core.IDoubleMesh,System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.fehlberg(UMapx.Core.IDoubleMesh,System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.euler(UMapx.Core.IComplexMesh,UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.rungeKutta2(UMapx.Core.IComplexMesh,UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.rungeKutta4(UMapx.Core.IComplexMesh,UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Differential.fehlberg(UMapx.Core.IComplexMesh,UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y0"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Analysis.Differential.Method">
            <summary>
            Differentiation method
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Differential.Method.Euler">
            <summary>
            Euler method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Differential.Method.RungeKutta2">
            <summary>
            The second-order Runge-Kutta method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Differential.Method.RungeKutta4">
            <summary>
            Fourth-order Runge-Kutta method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Differential.Method.Fehlberg">
            <summary>
            Felberg's method.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.Integration">
            <summary>
            Defines a class that implements numerical integration.
            <remarks>
            This class is a solution to the problem of finding the value of the integral of the function F(x) within the values of a and b.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Integration.#ctor(UMapx.Analysis.Integration.Method)">
            <summary>
            Initializes a class that implements numerical integration.
            </summary>
            <param name="method">Integration method</param>
        </member>
        <member name="P:UMapx.Analysis.Integration.MethodType">
            <summary>
            Gets or sets the integration method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Integration.Compute(UMapx.Core.IDouble,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the value of the integral of a function.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Lower limit</param>
            <param name="b">Upper limit</param>
            <param name="n">Number of splits</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Compute(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            Returns the value of the integral of a function.
            </summary>
            <param name="y">Function vector</param>
            <param name="a">Lower limit</param>
            <param name="b">Upper limit</param>
            <param name="n">Number of splits</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Compute(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            Returns the value of the integral of a function.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Lower limit</param>
            <param name="b">Upper limit</param>
            <param name="n">Number of splits</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.Compute(UMapx.Core.Complex[],UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            Returns the value of the integral of a function.
            </summary>
            <param name="y">Function vector</param>
            <param name="a">Lower limit</param>
            <param name="b">Upper limit</param>
            <param name="n">Number of splits</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.rect(UMapx.Core.IDouble,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.rect(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.midp(UMapx.Core.IDouble,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.midp(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.trap(UMapx.Core.IDouble,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.trap(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.simp(UMapx.Core.IDouble,System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.simp(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.romb(UMapx.Core.IDouble,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="iterations"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.rect(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.rect(UMapx.Core.Complex[],UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.midp(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.midp(UMapx.Core.Complex[],UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.trap(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.trap(UMapx.Core.Complex[],UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.simp(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.simp(UMapx.Core.Complex[],UMapx.Core.Complex,UMapx.Core.Complex,System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Integration.romb(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="iterations"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Analysis.Integration.Method">
            <summary>
            Integration method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Integration.Method.Rectangle">
            <summary>
            Rectangle method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Integration.Method.Midpoint">
            <summary>
            Midpoint method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Integration.Method.Trapezoidal">
            <summary>
            Trapezoidal method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Integration.Method.Simpson">
            <summary>
            Simpson method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Integration.Method.Romberg">
            <summary>
            Romberg method.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.Interpolation">
            <summary>
            Defines a class that implements interpolation.
            <remarks>
            This class is a solution to the problem of finding an intermediate value of the function F(x).
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.#ctor(UMapx.Analysis.Interpolation.Method)">
            <summary>
            Initializes a class that implements interpolation.
            </summary>
            <param name="method">Interpolation method</param>
        </member>
        <member name="P:UMapx.Analysis.Interpolation.MethodType">
            <summary>
            Gets or sets the interpolation method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Compute(System.Double[],System.Double[],System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            Returns the value of a function at a point.
            <remarks>
            In this case, only bilinear interpolation is used.
            </remarks>
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="z">Function matrix</param>
            <param name="xl">The value of the first argument to calculate</param>
            <param name="yl">The value of the second argument to calculate</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Compute(System.Double[],System.Double[],System.Double)">
            <summary>
            Returns the value of a function at a point.
            </summary>
            <param name="x">Array of values of the argument</param>
            <param name="y">Array of values of the function</param>
            <param name="xl">The value of the argument to calculate</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.Compute(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            Returns the value of a function at a point.
            </summary>
            <param name="x">Array of values of the argument</param>
            <param name="y">Array of values of the function</param>
            <param name="xl">The value of the argument to calculate</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.linear(System.Double[],System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xl"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.bilinear(System.Double[],System.Double[],System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="xval"></param>
            <param name="yval"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.lagra(System.Double[],System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.newto(System.Double[],System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.baryc(System.Double[],System.Double[],System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.lagra(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.newto(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Interpolation.baryc(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="xval"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Analysis.Interpolation.Method">
            <summary>
            Interpolation method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Interpolation.Method.Linear">
            <summary>
            Linear method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Interpolation.Method.Lagrange">
            <summary>
            Lagrange's method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Interpolation.Method.Newton">
            <summary>
            Newton's method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Interpolation.Method.Barycentric">
            <summary>
            Barycentric method.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.LeastSquaresOptions">
            <summary>
            Defines a class that implements the least squares method.
            </summary>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Polynomial(System.Double,System.Double[])">
            <summary>
            Returns the polynomial value.
            </summary>
            <param name="x">Argument</param>
            <param name="c">Approximation coefficients</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Polynomial(System.Double[],System.Double[])">
            <summary>
            Returns an array of polynomial values.
            </summary>
            <param name="x">Argument</param>
            <param name="c">Approximation coefficients</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Coefficients(System.Double[],System.Double[],System.Int32)">
            <summary>
            Returns an array of polynomial values.
            </summary>
            <param name="x">Argument</param>
            <param name="y">Function</param>
            <param name="iterations">Number of iterations</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.SummaryPow(System.Double[],System.Double)">
            <summary>
            Returns the value of the expression: s += v(i) ^ pow.
            </summary>
            <param name="v">Array</param>
            <param name="pow">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.SummaryPow(System.Double[],System.Double[],System.Double,System.Double)">
            <summary>
            Returns the value of the expression: s += {x(i) ^ powx} * {y(i) ^ powy}.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <param name="powx">Power of x</param>
            <param name="powy">Power of y</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Error(System.Double[],System.Double[])">
            <summary>
            Returns the approximation error of the function.
            </summary>
            <param name="a">Approximation</param>
            <param name="b">Function</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Equation(System.Double[])">
            <summary>
            Returns the equation of a polynomial represented as a string.
            </summary>
            <param name="p">Polynomial coefficients</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Equation(System.Double[],System.String)">
            <summary>
            Returns the equation of a polynomial represented as a string.
            </summary>
            <param name="p">Polynomial coefficients</param>
            <param name="function">Function</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Polynomial(UMapx.Core.Complex,UMapx.Core.Complex[])">
            <summary>
            Returns the polynomial value.
            </summary>
            <param name="x">Argument</param>
            <param name="c">Approximation coefficients</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Polynomial(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns an array of polynomial values.
            </summary>
            <param name="x">Argument</param>
            <param name="c">Approximation coefficients</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Coefficients(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Int32)">
            <summary>
            Returns an array of polynomial values.
            </summary>
            <param name="x">Argument</param>
            <param name="y">Function</param>
            <param name="iterations">Number of iterations</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.SummaryPow(UMapx.Core.Complex[],System.Double)">
            <summary>
            Returns the value of the expression: s += v(i) ^ pow.
            </summary>
            <param name="v">Array</param>
            <param name="pow">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.SummaryPow(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Double,System.Double)">
            <summary>
            Returns the value of the expression: s += {x(i) ^ powx} * {y(i) ^ powy}.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <param name="powx">Power of x</param>
            <param name="powy">Power of y</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Error(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the approximation error of the function.
            </summary>
            <param name="a">Approximation</param>
            <param name="b">Function</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Equation(UMapx.Core.Complex[])">
            <summary>
            Returns the equation of a polynomial represented as a string.
            </summary>
            <param name="p">Polynomial coefficients</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Analysis.LeastSquaresOptions.Equation(UMapx.Core.Complex[],System.String)">
            <summary>
            Returns the equation of a polynomial represented as a string.
            </summary>
            <param name="p">Polynomial coefficients</param>
            <param name="function">Function</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="T:UMapx.Analysis.Nonlinear">
            <summary>
            Defines a class that implements the solution of a nonlinear equation.
            <remarks>
            This class is a solution to the problem of finding the root of a nonlinear equation of the form F(x) = 0.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.#ctor(System.Double,UMapx.Analysis.Nonlinear.Method)">
            <summary>
            Initializes a class that implements the solution of a nonlinear equation.
            </summary>
            <param name="eps">Epsilon [0, 1]</param>
            <param name="method">Method for solving a nonlinear equation</param>
        </member>
        <member name="P:UMapx.Analysis.Nonlinear.MethodType">
            <summary>
            Gets or sets the method for solving the nonlinear equation.
            </summary>
        </member>
        <member name="P:UMapx.Analysis.Nonlinear.Eps">
            <summary>
            Gets or sets the error value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.Compute(UMapx.Core.IDouble,System.Double,System.Double)">
            <summary>
            Gets the root value of a nonlinear equation.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Start of line</param>
            <param name="b">End of line</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.Compute(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            Gets the root value of a nonlinear equation.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Start of line</param>
            <param name="b">End of line</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.bisec(UMapx.Core.IDouble,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.secan(UMapx.Core.IDouble,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.falpo(UMapx.Core.IDouble,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.chord(UMapx.Core.IDouble,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.chord(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.secan(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Nonlinear.falpo(UMapx.Core.IComplex,UMapx.Core.Complex,UMapx.Core.Complex,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Analysis.Nonlinear.Method">
            <summary>
            Method for solving a nonlinear equation.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Nonlinear.Method.Bisection">
            <summary>
            Bisection method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Nonlinear.Method.Chord">
            <summary>
            Chord method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Nonlinear.Method.Secant">
            <summary>
            Secant method.
            </summary>
        </member>
        <member name="F:UMapx.Analysis.Nonlinear.Method.FalsePosition">
            <summary>
            False position method.
            </summary>
        </member>
        <member name="T:UMapx.Analysis.Optimization">
            <summary>
            Defines a class that implements an extremum search.
            <remarks>
            This class is a solution to the problem of finding the maximum and minimum points of the function F(x).
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Optimization.#ctor(System.Double)">
            <summary>
            Initializes a class that implements an extremum search.
            </summary>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Analysis.Optimization.Eps">
            <summary>
            Gets or sets the error value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Optimization.Compute(UMapx.Core.IDouble,System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the corresponding minimum of the function on the segment.
            </summary>
            <param name="function">Continuous function delegate</param>
            <param name="a">Start of line</param>
            <param name="b">End of line</param>
            <param name="max">Search maximum or minimum</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Analysis.Optimization.goldenMin(UMapx.Core.IDouble,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Analysis.Optimization.goldenMax(UMapx.Core.IDouble,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Analysis.Roots">
            <summary>
            Defines a class for solving equations using the spectral decomposition of a matrix.
            <remarks>
            More information can be found on the website:
            https://www.mathworks.com/help/matlab/ref/roots.html
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Roots.#ctor(System.Double)">
            <summary>
            Initializes a class of equations using the spectral decomposition of a matrix.
            </summary>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Analysis.Roots.Eps">
            <summary>
            Gets or sets an error [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Analysis.Roots.Compute(System.Double[])">
            <summary>
            Returns a column vector corresponding to the numerical solution of the polynomial: p(1)*x^n + ... + p(n)*x + p(n+1) = 0.
            </summary>
            <param name="polynomial">Polynomial</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Analysis.Roots.Compute(UMapx.Core.Complex[])">
            <summary>
            Returns a column vector of polynomial coefficients: p(1)*x^n + ... + p(n)*x + p(n+1) = 0.
            </summary>
            <param name="roots">Roots</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Colorspace.AHSL">
            <summary>
            Defines a color model AHSL.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure HSL.
            </summary>
            <param name="h">Hue [0, 360]</param>
            <param name="s">Saturation [0, 255]</param>
            <param name="l">Lightness [-100, 100]</param>
        </member>
        <member name="P:UMapx.Colorspace.AHSL.Hue">
            <summary>
            Defines a component of the color model [0, 359].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.AHSL.Saturation">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.AHSL.Lightness">
            <summary>
            Defines a component of the color model [-100, 100].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.op_Equality(UMapx.Colorspace.AHSL,UMapx.Colorspace.AHSL)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">HSL structure</param>
            <param name="item2">HSL structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.op_Inequality(UMapx.Colorspace.AHSL,UMapx.Colorspace.AHSL)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">HSL structure</param>
            <param name="item2">HSL structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model AHSL.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>HSL structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.AHSL.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model AHSL.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>HSL structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.AHSL.ToRGB">
            <summary>
            Converts a color model AHSL in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.CMYK">
            <summary>
            Defines a color model СMYK.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure CMYK.
            </summary>
            <param name="c">Cyan [0, 1]</param>
            <param name="m">Magenta [0, 1]</param>
            <param name="y">Yellow [0, 1]</param>
            <param name="k">Keycolor [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.Cyan">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.Magenta">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.Yellow">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.Keycolor">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.op_Equality(UMapx.Colorspace.CMYK,UMapx.Colorspace.CMYK)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">CMYK structure</param>
            <param name="item2">CMYK structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.op_Inequality(UMapx.Colorspace.CMYK,UMapx.Colorspace.CMYK)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">CMYK structure</param>
            <param name="item2">CMYK structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model CMYK.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>CMYK structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.CMYK.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model HSB.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>CMYK structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.CMYK.ToRGB">
            <summary>
            Converts a color model CMYK in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.HSB">
            <summary>
            Defines a color model HSB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.HSB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure HSB.
            </summary>
            <param name="h">Hue [0, 359]</param>
            <param name="s">Saturation [0, 1]</param>
            <param name="b">Brightness [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.HSB.Hue">
            <summary>
            Defines a component of the color model [0, 359].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.HSB.Saturation">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.HSB.Brightness">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.HSB.op_Equality(UMapx.Colorspace.HSB,UMapx.Colorspace.HSB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">HSB structure</param>
            <param name="item2">HSB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.op_Inequality(UMapx.Colorspace.HSB,UMapx.Colorspace.HSB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">HSB structure</param>
            <param name="item2">HSB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model HSB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>HSB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSB.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model HSB.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>HSB structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.HSB.ToRGB">
            <summary>
            Converts a color model HSB in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.HSL">
            <summary>
            Defines a color model HSL.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.HSL.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure HSL.
            </summary>
            <param name="h">Hue [0, 360]</param>
            <param name="s">Saturation [0, 1]</param>
            <param name="l">Lightness [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.HSL.Hue">
            <summary>
            Defines a component of the color model [0, 360].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.HSL.Saturation">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.HSL.Lightness">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.HSL.op_Equality(UMapx.Colorspace.HSL,UMapx.Colorspace.HSL)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">HSL structure</param>
            <param name="item2">HSL structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.op_Inequality(UMapx.Colorspace.HSL,UMapx.Colorspace.HSL)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">HSL structure</param>
            <param name="item2">HSL structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model HSL.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>HSL structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.HSL.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model HSL.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>HSL structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.HSL.ToRGB">
            <summary>
            Converts a color model HSL in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.IColorSpace">
            <summary>
            Defines the color space interface.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.IColorSpace.ToRGB">
            <summary>
            Returns the color model RGB.
            </summary>
        </member>
        <member name="T:UMapx.Colorspace.LAB">
            <summary>
            Defines a color model CIE Lab.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.LAB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure CIE Lab.
            </summary>
            <param name="l">Component L [0, 100]</param>
            <param name="a">Component a [-127, 127]</param>
            <param name="b">Component b [-127, 127]</param>
        </member>
        <member name="P:UMapx.Colorspace.LAB.L">
            <summary>
            Defines a component of the model [0, 100].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.LAB.A">
            <summary>
            Defines a component of the model [-127, 127].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.LAB.B">
            <summary>
            Defines a component of the model [-127, 127].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.LAB.op_Equality(UMapx.Colorspace.LAB,UMapx.Colorspace.LAB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">CIE Lab structure</param>
            <param name="item2">CIE Lab structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.op_Inequality(UMapx.Colorspace.LAB,UMapx.Colorspace.LAB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">CIE Lab structure</param>
            <param name="item2">CIE Lab structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.ToXYZ(System.Double,System.Double,System.Double)">
            <summary>
            Converts a color model CIE Lab in model CIE XYZ.
            </summary>
            <param name="l">Component L</param>
            <param name="a">Component a</param>
            <param name="b">Component b</param>
            <returns>CIE XYZ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.ToXYZ(UMapx.Colorspace.LAB)">
            <summary>
            Converts a color model CIE Lab in model CIE XYZ.
            </summary>
            <param name="lab">CIE Lab structure</param>
            <returns>CIE XYZ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.ToLAB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model CIE Lab.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>CIE Lab structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.LAB.ToLAB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model CIE Lab.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>CIE Lab structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.LAB.ToRGB">
            <summary>
            Converts a color model CIE Lab in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.RGB">
            <summary>
            Defines a color model RGB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RGB.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the structure RGB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
        </member>
        <member name="M:UMapx.Colorspace.RGB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure RGB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Red">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Green">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Blue">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RGB.op_Equality(UMapx.Colorspace.RGB,UMapx.Colorspace.RGB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">RGB structure</param>
            <param name="item2">RGB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.op_Inequality(UMapx.Colorspace.RGB,UMapx.Colorspace.RGB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">RGB structure</param>
            <param name="item2">RGB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.op_Implicit(UMapx.Colorspace.RGB)~System.Drawing.Color">
            <summary>
            Defines an explicit conversion RGB в System.Drawing.Color.
            </summary>
            <param name="value">RGB structure</param>
            <returns>Color in terms of red, green and blue</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.op_Implicit(System.Drawing.Color)~UMapx.Colorspace.RGB">
            <summary>
            Defines an explicit conversion RGB в System.Drawing.Color.
            </summary>
            <param name="value">Color in terms of red, green and blue</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.GetIntFromHex(System.String)">
            <summary>
            Gets the int equivalent for a hexadecimal value.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RGB.FromHEX(System.String)">
            <summary>
            Converts a color model HEX in model RGB.
            </summary>
            <param name="hexColor">HEX</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.ToHEX(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model HEX.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.ToHEX(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model HEX.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Average(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the average brightness value.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Average(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the average brightness value.
            </summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Average(UMapx.Colorspace.RGB)">
            <summary>
            Calculates the average brightness value.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Average(UMapx.Colorspace.sRGB)">
            <summary>
            Calculates the average brightness value.
            </summary>
            <param name="rgb">sRGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.PAL(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the brightness value in the standard (PAL/NTC).
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.PAL(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the brightness value in the standard (PAL/NTC).
            </summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.PAL(UMapx.Colorspace.RGB)">
            <summary>
            Calculates the brightness value in the standard (PAL/NTC).
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.PAL(UMapx.Colorspace.sRGB)">
            <summary>
            Calculates the brightness value in the standard (PAL/NTC).
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.HDTV(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the brightness value in the standard HDTV.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.HDTV(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the brightness value in the standard HDTV.
            </summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.HDTV(UMapx.Colorspace.RGB)">
            <summary>
            Calculates the brightness value in the standard HDTV.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.HDTV(UMapx.Colorspace.sRGB)">
            <summary>
            Calculates the brightness value in the standard HDTV.
            </summary>
            <param name="rgb">sRGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.RYY(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the brightness value in the standard RYY.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.RYY(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the brightness value in the standard RYY.
            </summary>
            <param name="red">Red</param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.RYY(UMapx.Colorspace.RGB)">
            <summary>
            Calculates the brightness value in the standard RYY.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.RYY(UMapx.Colorspace.sRGB)">
            <summary>
            Calculates the brightness value in the standard RYY.
            </summary>
            <param name="rgb">sRGB structure</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Temp2RGB(System.Double)">
            <summary>
            Converts temperature T (in kelvins) to color in terms of red, green, and blue channels.
            </summary>
            <param name="temperature">Temperature [1000K, 10000K]</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Saturation(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Corrects color saturation.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <param name="s">Saturation</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Saturation(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Corrects color saturation.
            </summary>
            <param name="red">Red </param>
            <param name="green">Green</param>
            <param name="blue">Blue</param>
            <param name="s">Saturation</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Saturation(UMapx.Colorspace.RGB,System.Double)">
            <summary>
            Corrects color saturation.
            </summary>
            <param name="rgb">RGB structure</param>
            <param name="s">Saturation</param>
            <returns>RGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RGB.Saturation(UMapx.Colorspace.sRGB,System.Double)">
            <summary>
            Corrects color saturation.
            </summary>
            <param name="rgb">sRGB structure</param>
            <param name="s">Saturation</param>
            <returns>RGB structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.RGB.ToRGB">
            <summary>
            Returns the color model RGB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RGB.SchemeFromHue(System.Double,System.UInt32)">
            <summary>
            Generates a color scheme.
            </summary>
            <param name="hue">Hue [0, 360]</param>
            <param name="length">Length</param>
            <returns>Color scheme</returns>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Cool">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Hot">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Copper">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.HSB">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Jet">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Pink">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Autumn">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Spring">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Summer">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RGB.Winter">
            <summary>
            Returns the color scheme.
            </summary>
        </member>
        <member name="T:UMapx.Colorspace.RYB">
            <summary>
            Defines a color model RYB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RYB.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the structure RYB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="yellow">Yellow [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
        </member>
        <member name="M:UMapx.Colorspace.RYB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure RYB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="yellow">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
        </member>
        <member name="P:UMapx.Colorspace.RYB.Red">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RYB.Yellow">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.RYB.Blue">
            <summary>
            Defines a component of the color model [0, 255].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.RYB.op_Equality(UMapx.Colorspace.RYB,UMapx.Colorspace.RYB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">RYB structure</param>
            <param name="item2">RYB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.op_Inequality(UMapx.Colorspace.RYB,UMapx.Colorspace.RYB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">RYB structure</param>
            <param name="item2">RYB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model RYB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>RYB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.RYB.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model RYB.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>RYB structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.RYB.ToRGB">
            <summary>
            Converts a color model RYB in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.sRGB">
            <summary>
            Defines a color model sRGB.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure sRGB.
            </summary>
            <param name="red">Red [0, 1]</param>
            <param name="green">Green [0, 1]</param>
            <param name="blue">Blue [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.sRGB.Red">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.sRGB.Green">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.sRGB.Blue">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.op_Equality(UMapx.Colorspace.sRGB,UMapx.Colorspace.sRGB)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">sRGB structure</param>
            <param name="item2">sRGB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.op_Inequality(UMapx.Colorspace.sRGB,UMapx.Colorspace.sRGB)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">sRGB structure</param>
            <param name="item2">sRGB structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model sRGB.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>sRGB structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.sRGB.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model sRGB.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>sRGB structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.sRGB.ToRGB">
            <summary>
            Converts a color model sRGB in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.Unknown">
            <summary>
            Defines an unknown color model.
            This color model can play the role of any color space.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure.
            </summary>
            <param name="x">Component X</param>
            <param name="y">Component Y</param>
            <param name="z">Component Z</param>
        </member>
        <member name="P:UMapx.Colorspace.Unknown.X">
            <summary>
            Defines the component of the color model.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.Unknown.Y">
            <summary>
            Defines the component of the color model.
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.Unknown.Z">
            <summary>
            Defines the component of the color model.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Equality(UMapx.Colorspace.Unknown,UMapx.Colorspace.Unknown)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">Unknown structure</param>
            <param name="item2">Unknown structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Inequality(UMapx.Colorspace.Unknown,UMapx.Colorspace.Unknown)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">Unknown structure</param>
            <param name="item2">Unknown structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.AHSL)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.AHSL">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.LAB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.LAB">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.XYZ)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.XYZ">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.CMYK)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.CMYK">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.HSB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.HSB">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.HSL)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.HSL">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.RGB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.RGB">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.RYB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.RYB">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.sRGB)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.sRGB">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YCbCr)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YCbCr">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YCgCo)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YCgCo">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YDbDr)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YDbDr">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YIQ)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YIQ">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YPbPr)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YPbPr">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.YUV)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~UMapx.Colorspace.YUV">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(System.Drawing.Color)~UMapx.Colorspace.Unknown">
            <summary>
            Defines an explicit conversion Space в Unknown.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.op_Implicit(UMapx.Colorspace.Unknown)~System.Drawing.Color">
            <summary>
            Defines an explicit conversion Unknown в Space.
            </summary>
            <param name="value">Structure</param>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.Unknown.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.Unknown.ToRGB">
            <summary>
            Returns the color model RGB.
            </summary>
        </member>
        <member name="T:UMapx.Colorspace.XYZ">
            <summary>
            Defines a color model CIE XYZ.
            </summary>
        </member>
        <member name="F:UMapx.Colorspace.XYZ.White">
            <summary>
            Returns white color.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure CIE XYZ.
            </summary>
            <param name="x">Component X [0, 1]</param>
            <param name="y">Component Y [0, 1]</param>
            <param name="z">Component Z [0, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.XYZ.X">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.XYZ.Y">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.XYZ.Z">
            <summary>
            Defines a component of the model [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.op_Equality(UMapx.Colorspace.XYZ,UMapx.Colorspace.XYZ)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">CIE XYZ structure</param>
            <param name="item2">CIE XYZ structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.op_Inequality(UMapx.Colorspace.XYZ,UMapx.Colorspace.XYZ)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">CIE XYZ structure</param>
            <param name="item2">CIE XYZ structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.ToLAB(System.Double,System.Double,System.Double)">
            <summary>
            Converts a color model CIE XYZ in model CIE Lab.
            </summary>
            <param name="x">Component X</param>
            <param name="y">Component Y</param>
            <param name="z">Component Z</param>
            <returns>CIE Lab structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.ToLAB(UMapx.Colorspace.XYZ)">
            <summary>
            Converts a color model CIE XYZ in model CIE Lab.
            </summary>
            <param name="xyz">CIE XYZ structure</param>
            <returns>CIE Lab structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model CIE XYZ.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>CIE XYZ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model CIE XYZ.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>CIE XYZ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.XYZ.Fxyz(System.Double)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:UMapx.Colorspace.XYZ.ToRGB">
            <summary>
            Converts a color model CIE XYZ in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YCbCr">
            <summary>
            Defines a color model YCbCr.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure YCbCr.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="cb">Cb [-1, 1]</param>
            <param name="cr">Cr [-1, 1]</param>
        </member>
        <member name="P:UMapx.Colorspace.YCbCr.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YCbCr.Cb">
            <summary>
            Defines a component of the color model [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YCbCr.Cr">
            <summary>
            Defines a component of the color model [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.op_Equality(UMapx.Colorspace.YCbCr,UMapx.Colorspace.YCbCr)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YCbCr structure</param>
            <param name="item2">YCbCr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.op_Inequality(UMapx.Colorspace.YCbCr,UMapx.Colorspace.YCbCr)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YCbCr structure</param>
            <param name="item2">YCbCr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model YCbCr.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YCbCr structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCbCr.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model YCbCr.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YCbCr structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YCbCr.ToRGB">
            <summary>
            Converts a color model YCbCr in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YCgCo">
            <summary>
            Defines a color model YCgCo.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure YDbDr.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="cg">Cg [-0.5, 0.5]</param>
            <param name="co">Co [-0.5, 0.5]</param>
        </member>
        <member name="P:UMapx.Colorspace.YCgCo.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YCgCo.Cg">
            <summary>
            Defines a component of the color model [-0.5, 0.5].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YCgCo.Co">
            <summary>
            Defines a component of the color model [-0.5, 0.5].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.op_Equality(UMapx.Colorspace.YCgCo,UMapx.Colorspace.YCgCo)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YCgCo structure</param>
            <param name="item2">YCgCo structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.op_Inequality(UMapx.Colorspace.YCgCo,UMapx.Colorspace.YCgCo)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YCgCo structure</param>
            <param name="item2">YCgCo structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model YCgCo.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YCgCo structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YCgCo.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model YCgCo.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YCgCo structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YCgCo.ToRGB">
            <summary>
            Converts a color model YCgCo in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YDbDr">
            <summary>
            Defines a color model YDbDr.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure YDbDr.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="db">Db [-1.333, 1.333]</param>
            <param name="dr">Dr [-1.333, 1.333]</param>
        </member>
        <member name="P:UMapx.Colorspace.YDbDr.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YDbDr.Db">
            <summary>
            Defines a component of the color model [-1.333, 1.333].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YDbDr.Dr">
            <summary>
            Defines a component of the color model [-1.333, 1.333].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.op_Equality(UMapx.Colorspace.YDbDr,UMapx.Colorspace.YDbDr)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YDbDr structure</param>
            <param name="item2">YDbDr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.op_Inequality(UMapx.Colorspace.YDbDr,UMapx.Colorspace.YDbDr)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YDbDr structure</param>
            <param name="item2">YDbDr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model YDbDr.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YDbDr structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YDbDr.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model YDbDr.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YDbDr structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YDbDr.ToRGB">
            <summary>
            Converts a color model YDbDr in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YIQ">
            <summary>
            Defines a color model YIQ.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure YIQ.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="i">I [-0.5957, 0.5957]</param>
            <param name="q">Q [-0.5226, 0.5226]</param>
        </member>
        <member name="P:UMapx.Colorspace.YIQ.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YIQ.I">
            <summary>
            Defines a component of the color model [-0.5957, 0.5957].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YIQ.Q">
            <summary>
            Defines a component of the color model [-0.5226, 0.5226].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.op_Equality(UMapx.Colorspace.YIQ,UMapx.Colorspace.YIQ)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YIQ structure</param>
            <param name="item2">YIQ structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.op_Inequality(UMapx.Colorspace.YIQ,UMapx.Colorspace.YIQ)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YIQ structure</param>
            <param name="item2">YIQ structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model YIQ.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YIQ structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YIQ.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model YIQ.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YIQ structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YIQ.ToRGB">
            <summary>
            Converts a color model YIQ in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YPbPr">
            <summary>
            Defines a color model YPbPr.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure YPbPr.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="pb">Pb [-0.5, 0.5]</param>
            <param name="pr">Pr [-0.5, 0.5]</param>
        </member>
        <member name="P:UMapx.Colorspace.YPbPr.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YPbPr.Pb">
            <summary>
            Defines a component of the color model [-0.5, 0.5].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YPbPr.Pr">
            <summary>
            Defines a component of the color model [-0.5, 0.5].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.op_Equality(UMapx.Colorspace.YPbPr,UMapx.Colorspace.YPbPr)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YPbPr structure</param>
            <param name="item2">YPbPr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.op_Inequality(UMapx.Colorspace.YPbPr,UMapx.Colorspace.YPbPr)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YPbPr structure</param>
            <param name="item2">YPbPr structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model YPbPr.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YPbPr structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YPbPr.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model YPbPr.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YPbPr structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YPbPr.ToRGB">
            <summary>
            Converts a color model YPbPr in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Colorspace.YUV">
            <summary>
            Defines a color model YUV.
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YUV.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates an instance of the structure YUV.
            </summary>
            <param name="y">Y [0, 1]</param>
            <param name="u">U [-0.436, 0.436]</param>
            <param name="v">V [-0.614, 0.614]</param>
        </member>
        <member name="P:UMapx.Colorspace.YUV.Y">
            <summary>
            Defines a component of the color model [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YUV.U">
            <summary>
            Defines a component of the color model [-0.436, 0.436].
            </summary>
        </member>
        <member name="P:UMapx.Colorspace.YUV.V">
            <summary>
            Defines a component of the color model [-0.614, 0.614].
            </summary>
        </member>
        <member name="M:UMapx.Colorspace.YUV.op_Equality(UMapx.Colorspace.YUV,UMapx.Colorspace.YUV)">
            <summary>
            Checks the equality of two class objects.
            </summary>
            <param name="item1">YUV structure</param>
            <param name="item2">YUV structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.op_Inequality(UMapx.Colorspace.YUV,UMapx.Colorspace.YUV)">
            <summary>
            Checks the inequality of two class objects.
            </summary>
            <param name="item1">YUV structure</param>
            <param name="item2">YUV structure</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.Equals(System.Object)">
            <summary>
            Defines whether the specified System.Object is equal to the current System.Object.
            </summary>
            <param name="obj">Element</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.GetHashCode">
            <summary>
            Plays the role of a hash function of a certain type.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.ToString">
            <summary>
            Returns a System.String object that represents the current object.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.System#ICloneable#Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.Clone">
            <summary>
            Creates a copy of the color model.
            </summary>
            <returns>Structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.FromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a color model RGB in model YUV.
            </summary>
            <param name="red">Red [0, 255]</param>
            <param name="green">Green [0, 255]</param>
            <param name="blue">Blue [0, 255]</param>
            <returns>YUV structure</returns>
        </member>
        <member name="M:UMapx.Colorspace.YUV.FromRGB(UMapx.Colorspace.RGB)">
            <summary>
            Converts a color model RGB in model YUV.
            </summary>
            <param name="rgb">RGB structure</param>
            <returns>YUV structure</returns>
        </member>
        <member name="P:UMapx.Colorspace.YUV.ToRGB">
            <summary>
            Converts a color model YUV in model RGB.
            </summary>
            <returns>RGB structure</returns>
        </member>
        <member name="T:UMapx.Core.Binary">
            <summary>
            Uses for binary serialization of objects.
            </summary>
        </member>
        <member name="M:UMapx.Core.Binary.Save(System.IO.Stream,System.Object)">
            <summary>
            Save data from the file.
            </summary>
            <param name="stream">Stream</param>
            <param name="o">Object</param>
        </member>
        <member name="M:UMapx.Core.Binary.Save(System.String,System.Object)">
            <summary>
            Save data from the file.
            </summary>
            <param name="fileName">File name</param>
            <param name="o">Object</param>
        </member>
        <member name="M:UMapx.Core.Binary.Load(System.IO.Stream)">
            <summary>
            Load data from the file.
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="M:UMapx.Core.Binary.Load(System.String)">
            <summary>
            Load data from the file.
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="T:UMapx.Core.Complex">
            <summary>
            Defines a complex number.
            </summary>
        </member>
        <member name="F:UMapx.Core.Complex.Real">
            <summary>
            The real part of the complex number.
            </summary>
        </member>
        <member name="F:UMapx.Core.Complex.Imag">
            <summary>
            The imaginary part of a complex number.
            </summary>
        </member>
        <member name="M:UMapx.Core.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the complex number.
            </summary>
            <param name="re">Real part of the complex number</param>
            <param name="im">Imaginary part of a complex number</param>
        </member>
        <member name="P:UMapx.Core.Complex.Abs">
            <summary>
            Gets the value of the module.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex.Angle">
            <summary>
            Gets the value of the phase.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex.I">
            <summary>
            Returns the imaginary one.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex.One">
            <summary>
            Returns the real one.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex.Zero">
            <summary>
            Returns the complex zero.
            </summary>
        </member>
        <member name="P:UMapx.Core.Complex.Conjugate">
            <summary>
            Returns the complex conjugate number.
            </summary>
        </member>
        <member name="M:UMapx.Core.Complex.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the given value of type Complex.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Complex.ToString">
            <summary>
            Converts complex number to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Complex.ToString(System.String)">
            <summary>
            Converts complex number to its corresponding string representation.
            </summary>
            <param name="format">Format string</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Equality(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            Checks if two complex numbers are equal.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Inequality(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            Checks if two complex numbers are not equal.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Addition(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            The sum of two complex numbers.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Addition(UMapx.Core.Complex,System.Double)">
            <summary>
            The sum of a complex number and a real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Addition(System.Double,UMapx.Core.Complex)">
            <summary>
            The sum of a complex number and a real number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Subtraction(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            The difference of two complex numbers.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Subtraction(UMapx.Core.Complex,System.Double)">
            <summary>
            The difference between a complex number and a real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Subtraction(System.Double,UMapx.Core.Complex)">
            <summary>
            The difference between a complex number and a real number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_UnaryNegation(UMapx.Core.Complex)">
            <summary>
            Inverts complex number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Multiply(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            Multiplies one complex number by another.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Multiply(System.Double,UMapx.Core.Complex)">
            <summary>
            Multiplies real number by complex number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Multiply(UMapx.Core.Complex,System.Double)">
            <summary>
            Multiplies complex number by real number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Division(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            Divides one complex number by another.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Division(UMapx.Core.Complex,System.Double)">
            <summary>
            Divides complex number by real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Division(System.Double,UMapx.Core.Complex)">
            <summary>
            Divides real number by complex number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Double)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Single)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Int64)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.UInt64)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Int16)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.UInt16)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Int32)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.UInt32)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Byte)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.SByte)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.op_Implicit(System.Decimal)~UMapx.Core.Complex">
            <summary>
            Defines an explicit conversion of a number to complex number.
            </summary>
            <param name="value">Value to be converted to complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.Parse(System.String)">
            <summary>
            Parses the string to complex number.
            <remarks>
            Example: "1 + 2i", "0.321 + 11i", ".1i".
            </remarks>
            </summary>
            <param name="s">Input string</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Complex.TryParse(System.String,UMapx.Core.Complex@)">
            <summary>
            Tries to parse the string to complex number.
            </summary>
            <param name="complex">Input string</param>
            <param name="result">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Complex.System#ICloneable#Clone">
            <summary>
            Creates a copy of a complex number.
            </summary>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Complex.Clone">
            <summary>
            Creates a copy of a complex number.
            </summary>
            <returns>Complex number</returns>
        </member>
        <member name="T:UMapx.Core.IDouble">
            <summary>
            Defines the delegate of a continuous function that depends on a single argument.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Core.IComplex">
            <summary>
            Defines the delegate of a continuous function that depends on a single argument.
            </summary>
            <param name="x">Argument</param>
            <returns>Complex number</returns>
        </member>
        <member name="T:UMapx.Core.IDoubleMesh">
            <summary>
            Defines the delegate of a continuous function that depends on two arguments.
            </summary>
            <param name="x">First argument</param>
            <param name="y">Second argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Core.IComplexMesh">
            <summary>
            Defines the delegate of a continuous function that depends on two arguments.
            </summary>
            <param name="x">First argument</param>
            <param name="y">Second argument</param>
            <returns>Complex number</returns>
        </member>
        <member name="T:UMapx.Core.Direction">
            <summary>
            Defines the direction of processing.
            </summary>
        </member>
        <member name="F:UMapx.Core.Direction.Horizontal">
            <summary>
            Horizontal direction.
            </summary>
        </member>
        <member name="F:UMapx.Core.Direction.Vertical">
            <summary>
            Vertical direction.
            </summary>
        </member>
        <member name="F:UMapx.Core.Direction.Both">
            <summary>
            Both direction.
            </summary>
        </member>
        <member name="T:UMapx.Core.Distance">
            <summary>
            Uses to calculate distances.
            </summary>
        </member>
        <member name="M:UMapx.Core.Distance.Euclidean(System.Double[],System.Double[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Chebyshev(System.Double[],System.Double[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Manhattan(System.Double[],System.Double[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Angular(System.Double[],System.Double[])">
            <summary>
            Returns distance value. 
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.BrayCurtis(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Canberra(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Dice(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Hellinger(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Jaccard(System.Double[],System.Double[])">
            <summary>
            Returns distance value".
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Kulczynski(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Minkowski(System.Double[],System.Double[],System.Double)">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <param name="order">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.RusselRao(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.SokalMichener(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.SokalSneath(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.Yule(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Distance.SquareEuclidian(System.Double[],System.Double[])">
            <summary>
            Returns distance value.
            </summary>
            <param name="p">Array</param>
            <param name="q">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Core.Jagged">
            <summary>
            Uses to work with gear arrays.
            </summary>
        </member>
        <member name="M:UMapx.Core.Jagged.ToJagged(System.Double[0:,0:])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Matrix</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.FromJagged(System.Double[][])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.ToJagged(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Matrix</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.FromJagged(UMapx.Core.Complex[][])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="F:UMapx.Core.Jagged.rnd">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Core.Jagged.Rand(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of random numbers, the values of which are distributed UMapxing to a uniform distribution.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randc(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of random numbers, the values of which are distributed UMapxing to a uniform distribution.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randi(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randi(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randic(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Randic(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Zero(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a zero matrix.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.One(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of ones.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Eye(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a eye matrix.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Parse(System.Double[][],System.String)">
            <summary>
            Parses the original string into a matrix of double numbers.
            <remarks>
            Example: "[1, 2, 3; 4, 5, 6; 7, 8, 9]";
            </remarks>
            </summary>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.TryParse(System.String,System.Double[][]@)">
            <summary>
            Tries to parse the original row into a matrix of double numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Parse(UMapx.Core.Complex[][],System.String)">
            <summary>
            Parses the original string into a matrix of complex numbers.
            </summary>
            <remarks>
            Example: "[1 + 2i, 2 + 4i; 3 + 6i, 4 + 8i]";
            </remarks>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.TryParse(System.String,UMapx.Core.Complex[][]@)">
            <summary>
            Tries to parse the original row into a matrix of complex numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Negate(System.Double[][])">
            <summary>
            Negates all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Negate(UMapx.Core.Complex[][])">
            <summary>
            Negates all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.ToComplex(System.Double[][])">
            <summary>
            Returns a complex matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.ToByte(System.Double[][])">
            <summary>
            Returns a matrix whose values belong to the interval [0, 255].
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.ToDouble(System.Double[][])">
            <summary>
            Returns a matrix whose values belong to the interval [0, 1].
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Abs(System.Double[][])">
            <summary>
            Takes a module for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Abs(UMapx.Core.Complex[][])">
            <summary>
            Takes a module for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Angle(UMapx.Core.Complex[][])">
            <summary>
            Takes an angle for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Real(UMapx.Core.Complex[][])">
            <summary>
            Takes the real part for all elements of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Jagged.Imag(UMapx.Core.Complex[][])">
            <summary>
            Takes the imaginary part for all elements of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Core.Kernel">
            <summary>
            Uses to work with kernel functions.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Kernel_(statistics)
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Core.Kernel.Bicubic(System.Double)">
            <summary>
            Returns the value of a bicubic function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Gaussian(System.Double,System.Double)">
            <summary>
            Returns the value of a Gaussian function.
            </summary>
            <param name="x">Argument</param>
            <param name="sigma">Standard deviation (0, +inf)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Gaussian(System.Double)">
            <summary>
            Returns the value of a Gaussian function σ = 1.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Lanczos(System.Double,System.Double)">
            <summary>
            Returns the value of the Lanczos function.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Parameter</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Lanczos(System.Double)">
            <summary>
            Returns the value of the Lanczos function, with a = 1.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Uniform(System.Double)">
            <summary>
            Returns the value of a uniform function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Triangular(System.Double)">
            <summary>
            Returns the value of a triangular function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Trapezoid(System.Double)">
            <summary>
            Returns the value of the trapezoid function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Epanechnikov(System.Double)">
            <summary>
            Returns the value of the Epanechnikov function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Quartic(System.Double)">
            <summary>
            Returns the value of a Q function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Triweight(System.Double)">
            <summary>
            Returns the value of a T-function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Tricube(System.Double)">
            <summary>
            Returns the value of a tricubic function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Cosine(System.Double)">
            <summary>
            Returns the value of the cosine function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Logistic(System.Double)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Sigmoid(System.Double)">
            <summary>
            Returns the value of a sigmoid function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Kernel.Silverman(System.Double)">
            <summary>
            Returns the value of the Silverman function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Core.LinealgOptions">
            <summary>
            Defines the class of optimizations of matrix operations.
            </summary>
        </member>
        <member name="F:UMapx.Core.LinealgOptions.exception">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Determinant(System.Double*,System.Int32)">
            <summary>
            Iterative calculation of the determinant.
            </summary>
            <param name="element">"Element</param>
            <param name="n">Radius</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Determinant(UMapx.Core.Complex*,System.Int32)">
            <summary>
            Iterative calculation of the determinant.
            </summary>
            <param name="element">"Element</param>
            <param name="n">Radius</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Mul(System.Single[][],System.Single[][])">
            <summary>
            Implements the multiplication of matrices presented in the form of jagged arrays.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Mul(UMapx.Core.LinealgOptions.Complex32[][],UMapx.Core.LinealgOptions.Complex32[][])">
            <summary>
            Implements the multiplication of matrices presented in the form of jagged arrays.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Mul(UMapx.Core.LinealgOptions.Complex32[][],System.Single[][])">
            <summary>
            Implements the multiplication of matrices presented in the form of jagged arrays.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Mul(System.Single[][],UMapx.Core.LinealgOptions.Complex32[][])">
            <summary>
            Implements the multiplication of matrices presented in the form of jagged arrays.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Conv(System.Double[0:,0:],System.Double[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Conv(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Conv(System.Double[0:,0:],UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Conv(UMapx.Core.Complex[0:,0:],System.Double[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvHorizontal(System.Double[0:,0:],System.Double[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvVertical(System.Double[0:,0:],System.Double[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvHorizontal(System.Double[0:,0:],UMapx.Core.Complex[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvVertical(System.Double[0:,0:],UMapx.Core.Complex[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvHorizontal(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvVertical(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvHorizontal(UMapx.Core.Complex[0:,0:],System.Double[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ConvVertical(UMapx.Core.Complex[0:,0:],System.Double[],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="B">Jagged array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphHorizontal(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Implements discrete morphology of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r1">Size</param>
            <param name="threshold">Threshold</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MorphVertical(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Implements discrete morphology of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r0">Size</param>
            <param name="threshold">Threshold</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MinHorizontal(System.Double[0:,0:],System.Int32)">
            <summary>
            Implements discrete morphology minimum of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r1">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MinVertical(System.Double[0:,0:],System.Int32)">
            <summary>
            Implements discrete morphology minimum of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r0">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MaxHorizontal(System.Double[0:,0:],System.Int32)">
            <summary>
            Implements discrete morphology maximum of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r1">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MaxVertical(System.Double[0:,0:],System.Int32)">
            <summary>
            Implements discrete morphology maximum of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r0">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanHorizontal(System.Double[0:,0:],System.Int32)">
            <summary>
            Implements local average of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r1">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanVertical(System.Double[0:,0:],System.Int32)">
            <summary>
            Implements local average of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r0">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanHorizontal(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            Implements local average of matrices (horizontal).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r1">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.MeanVertical(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            Implements local average of matrices (vertical).
            </summary>
            <param name="A">Jagged array</param>
            <param name="r0">Size</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ToJagged(System.Double[0:,0:])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Matrix</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.FromJagged(System.Single[][])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ToJagged(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Matrix</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.FromJagged(UMapx.Core.LinealgOptions.Complex32[][])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ToJagged(System.Double[])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.FromJagged(System.Single[])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.ToJagged(UMapx.Core.Complex[])">
            <summary>
            Returns jagged array.
            </summary>
            <param name="m">Array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.FromJagged(UMapx.Core.LinealgOptions.Complex32[])">
            <summary>
            Returns matrix.
            </summary>
            <param name="jagged">Jagged array</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Core.LinealgOptions.Complex32">
            <summary>
            Complex (32 bit).
            </summary>
        </member>
        <member name="F:UMapx.Core.LinealgOptions.Complex32.Real">
            <summary>
            Real part.
            </summary>
        </member>
        <member name="F:UMapx.Core.LinealgOptions.Complex32.Imag">
            <summary>
            Imaginary part.
            </summary>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.#ctor(System.Single,System.Single)">
            <summary>
            Complex (32 bit).
            </summary>
            <param name="re">Real part of the complex number</param>
            <param name="im">Imaginary part of a complex number</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the given value of type Complex32.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Equality(UMapx.Core.LinealgOptions.Complex32,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Checks if two objects of type Complex are equal to each other.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Inequality(UMapx.Core.LinealgOptions.Complex32,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Checks if two objects of type Complex are not equal to each other.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Addition(UMapx.Core.LinealgOptions.Complex32,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            The sum of two complex numbers.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Addition(UMapx.Core.LinealgOptions.Complex32,System.Single)">
            <summary>
            The sum of a complex number and a real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Addition(System.Single,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            The sum of a complex number and a real number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Subtraction(UMapx.Core.LinealgOptions.Complex32,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            The difference of two complex numbers.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Subtraction(UMapx.Core.LinealgOptions.Complex32,System.Single)">
            <summary>
            The difference between a complex number and a real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Subtraction(System.Single,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            The difference between a complex number and a real number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_UnaryNegation(UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Inverts complex number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Multiply(UMapx.Core.LinealgOptions.Complex32,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Multiplies one complex number by another.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Multiply(System.Single,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Multiplies real number by complex number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Multiply(UMapx.Core.LinealgOptions.Complex32,System.Single)">
            <summary>
            Multiplies complex number by real number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Division(UMapx.Core.LinealgOptions.Complex32,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Divides one complex number by another.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Division(UMapx.Core.LinealgOptions.Complex32,System.Single)">
            <summary>
            Divides complex number by real number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Complex32.op_Division(System.Single,UMapx.Core.LinealgOptions.Complex32)">
            <summary>
            Divides real number by complex number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Whittle_Mul(System.Single[],System.Single[][],System.Single[],System.Int32,System.Int32)">
            <summary>
            Implements matrix multiplication using modified Whittle optimization.
            </summary>
            <param name="iRowA">Row of A</param>
            <param name="B">Matrix B</param>
            <param name="iRowC">Row of C</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Whittle_Mul(UMapx.Core.LinealgOptions.Complex32[],UMapx.Core.LinealgOptions.Complex32[][],UMapx.Core.LinealgOptions.Complex32[],System.Int32,System.Int32)">
            <summary>
            Implements matrix multiplication using modified Whittle optimization.
            </summary>
            <param name="iRowA">Row of A</param>
            <param name="B">Matrix B</param>
            <param name="iRowC">Row of C</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Whittle_Mul(UMapx.Core.LinealgOptions.Complex32[],System.Single[][],UMapx.Core.LinealgOptions.Complex32[],System.Int32,System.Int32)">
            <summary>
            Implements matrix multiplication using modified Whittle optimization.
            </summary>
            <param name="iRowA">Row of A</param>
            <param name="B">Matrix B</param>
            <param name="iRowC">Row of C</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
        </member>
        <member name="M:UMapx.Core.LinealgOptions.Whittle_Mul(System.Single[],UMapx.Core.LinealgOptions.Complex32[][],UMapx.Core.LinealgOptions.Complex32[],System.Int32,System.Int32)">
            <summary>
            Implements matrix multiplication using modified Whittle optimization.
            </summary>
            <param name="iRowA">Row of A</param>
            <param name="B">Matrix B</param>
            <param name="iRowC">Row of C</param>
            <param name="length">Length</param>
            <param name="width">Width</param>
        </member>
        <member name="T:UMapx.Core.Maths">
            <summary>
            Uses to implement basic algebraic, trigonometric and hyperbolic operations.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.E">
            <summary>
            Exponent.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Pi">
            <summary>
            Pi.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Phi">
            <summary>
            Phi (golden number).
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Tau">
            <summary>
            Double pi.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Gamma">
            <summary>
            Euler-Mascheroni constant.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.Sqrt2">
            <summary>
            Square root of number 2.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.G">
            <summary>
            Catalan's constant.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.A">
            <summary>
            Apery's constant.
            </summary>
        </member>
        <member name="F:UMapx.Core.Maths.I">
            <summary>   
            Imaginary one.
            </summary>
        </member>
        <member name="M:UMapx.Core.Maths.Byte(System.Double)">
            <summary>
            Converts a value to a Byte type.
            </summary>
            <param name="x">Value</param>
            <returns>Byte</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Byte(System.Int32)">
            <summary>
            Converts a value to a Byte type.
            </summary>
            <param name="x">Value</param>
            <returns>Byte</returns>
        </member>
        <member name="M:UMapx.Core.Maths.sByte(System.Double)">
            <summary>
            Converts a value to a Byte type.
            </summary>
            <param name="x">Value</param>
            <returns>Byte</returns>
        </member>
        <member name="M:UMapx.Core.Maths.sByte(System.Int32)">
            <summary>
            Converts a value to a Byte type.
            </summary>
            <param name="x">Value</param>
            <returns>Byte</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Double(System.Double)">
            <summary>
            Converts a value to a type Double.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsRange(System.Double,System.Double,System.Double)">
            <summary>
            Checks if value is in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if value is in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Range(System.Double,System.Double,System.Double)">
            <summary>
            Crops value in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Range(System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops value in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Crops value in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Scale(System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops value in the specified range.
            </summary>
            <param name="x">Value</param>
            <param name="xmin">Minimum value</param>
            <param name="xmax">Maximum value</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsSingular(System.Double)">
            <summary>
            Checks a number for an exception.
            </summary>
            <param name="a">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsSingular(UMapx.Core.Complex)">
            <summary>
            Checks a number for an exception.
            </summary>
            <param name="a">Complex number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsSquare(System.Double)">
            <summary>
            Checks if a number is a full square.
            </summary>
            <param name="n">Integer number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsPower(System.Double,System.Double)">
            <summary>
            Checks whether a number is a power of another number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsInteger(System.Double)">
            <summary>
            Checks whether a number is an integer.
            </summary>
            <param name="a">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsEven(System.Double)">
            <summary>
            Checks whether a number is even.
            </summary>
            <param name="a">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsNotEven(System.Double)">
            <summary>
            Checks whether a number is odd.
            </summary>
            <param name="a">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pow(System.Double)">
            <summary>
            Returns the number raised to the second power.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pow(System.Double,System.Double)">
            <summary>
            Returns the number raised to the power.
            </summary>
            <param name="a">Number</param>
            <param name="b">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Exp(System.Double)">
            <summary>
            Returns the exponent raised to the power.
            </summary>
            <param name="a">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log(System.Double)">
            <summary>
            Returns the natural logarithm of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log10(System.Double)">
            <summary>
            Returns the decimal logarithm of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log2(System.Double)">
            <summary>
            Returns the binary logarithm of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log(System.Double,System.Double)">
            <summary>
            Returns the logarithm of a number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Base</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sqrt(System.Double)">
            <summary>
            Returns the square root of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sqrt(System.Double,System.Double)">
            <summary>
            Returns the root of a number.
            </summary>
            <param name="a">Number</param>
            <param name="b">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Abs(System.Double)">
            <summary>
            Returns the modulus of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Max(System.Double,System.Double)">
            <summary>
            Returns the largest of two numbers.
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Max(System.Double,System.Double,System.Double)">
            <summary>
            Returns the largest of three numbers.
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <param name="c">Third number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Min(System.Double,System.Double)">
            <summary>
            Returns the smallest of two numbers.
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Min(System.Double,System.Double,System.Double)">
            <summary>
            Returns the smallest of three numbers.
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <param name="c">Third number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sign(System.Double)">
            <summary>
            Returns the sign of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Floor(System.Double)">
            <summary>
            Returns the rounded number down.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ceil(System.Double)">
            <summary>
            Returns the rounded number up.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Round(System.Double)">
            <summary>
            Returns the rounded number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Round(System.Double,System.Int32)">
            <summary>
            Returns the rounded number.
            </summary>
            <param name="a">Number</param>
            <param name="dig">Digits</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Fix(System.Double)">
            <summary>
            Returns number with the fractional part discarded.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Abs(UMapx.Core.Complex)">
            <summary>
            Returns the modulus of a complex number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Angle(UMapx.Core.Complex)">
            <summary>
            Returns the angle of a complex number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log(UMapx.Core.Complex)">
            <summary>
            Returns the natural logarithm of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log10(UMapx.Core.Complex)">
            <summary>
            Returns the decimal logarithm of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log2(UMapx.Core.Complex)">
            <summary>
            Returns the binary logarithm of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Log(UMapx.Core.Complex,System.Double)">
            <summary>
            Returns the logarithm of a number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Base</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Exp(UMapx.Core.Complex)">
            <summary>
            Returns the exponent raised to a complex degree.
            </summary>
            <param name="a">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pow(System.Double,UMapx.Core.Complex)">
            <summary>
            Returns the number raised to a complex power.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pow(UMapx.Core.Complex,System.Double)">
            <summary>
            Returns the number raised to the power.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sqrt(UMapx.Core.Complex)">
            <summary>
            Returns the square root of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sqrt(UMapx.Core.Complex,System.Double)">
            <summary>
            Returns the root of a number.
            </summary>
            <param name="a">Complex number</param>
            <param name="b">Power</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.FromPolar(System.Double,System.Double)">
            <summary>
            Returns complex number.
            </summary>
            <param name="abs">Module</param>
            <param name="angle">Angle</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Round(UMapx.Core.Complex)">
            <summary>
            Returns the rounded number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Round(UMapx.Core.Complex,System.Int32)">
            <summary>
            Returns the rounded number.
            </summary>
            <param name="a">Complex number</param>
            <param name="dig">Digits</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Fix(UMapx.Core.Complex)">
            <summary>
            Returns number with the fractional part discarded.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cos(System.Double)">
            <summary>
            Returns the cosine of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sin(System.Double)">
            <summary>
            Returns the sine of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Tg(System.Double)">
            <summary>
            Returns the tangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ctg(System.Double)">
            <summary>
            Returns the cotangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sec(System.Double)">
            <summary>
            Returns the secant of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cosc(System.Double)">
            <summary>
            Returns the cosecant of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asin(System.Double)">
            <summary>
            Returns the arcsine of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acos(System.Double)">
            <summary>
            Returns the arccosine of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Atg(System.Double)">
            <summary>
            Returns the arctangent of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Actg(System.Double)">
            <summary>
            Returns the arccotangent of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asec(System.Double)">
            <summary>
            Returns the arcsecance of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acosc(System.Double)">
            <summary>
            Returns the arccosecant of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cos(UMapx.Core.Complex)">
            <summary>
            Returns the cosine of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sin(UMapx.Core.Complex)">
            <summary>
            Returns the sine of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Tg(UMapx.Core.Complex)">
            <summary>
            Returns the tangent of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ctg(UMapx.Core.Complex)">
            <summary>
            Returns the cotangent of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sec(UMapx.Core.Complex)">
            <summary>
            Returns the secant of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cosc(UMapx.Core.Complex)">
            <summary>
            Returns the cosecant of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acos(UMapx.Core.Complex)">
            <summary>
            Returns the arccosine of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asin(UMapx.Core.Complex)">
            <summary>
            Returns the arcsine of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Atg(UMapx.Core.Complex)">
            <summary>
            Returns the arctangent of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Actg(UMapx.Core.Complex)">
            <summary>
            Returns the arccotangent of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asec(UMapx.Core.Complex)">
            <summary>
            Returns the arcsecance of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acosc(UMapx.Core.Complex)">
            <summary>
            Returns the arccosecant of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sh(System.Double)">
            <summary>
            Returns the hyperbolic sine of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ch(System.Double)">
            <summary>
            Returns the hyperbolic cosine of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Th(System.Double)">
            <summary>
            Returns the hyperbolic tangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cth(System.Double)">
            <summary>
            Returns the hyperbolic cotangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sch(System.Double)">
            <summary>
            Returns the hyperbolic secant of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Csch(System.Double)">
            <summary>
            Returns the hyperbolic cosecant of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ash(System.Double)">
            <summary>
            Returns the hyperbolic arcsine of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ach(System.Double)">
            <summary>
            Returns the hyperbolic arccosine of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ath(System.Double)">
            <summary>
            Returns the hyperbolic arctangent of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acth(System.Double)">
            <summary>
            Returns the hyperbolic arccotangent of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asch(System.Double)">
            <summary>
            Returns the hyperbolic arcsecance of a number.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acsch(System.Double)">
            <summary>
            Returns the hyperbolic arccosecant of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sh(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic sine of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ch(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic cosine of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Th(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic tangent of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cth(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic cotangent of an angle.
            </summary>
            <param name="a">Angle in radians</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sch(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic secant of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Csch(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic cosecant of an angle.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ash(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic arcsine of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ach(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic arccosine of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Ath(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic arctangent of a number.
            </summary>
            <param name="a">Number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acth(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic arccotangent of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Asch(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic arcsecance of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Acsch(UMapx.Core.Complex)">
            <summary>
            Returns the hyperbolic arccosecant of a number.
            </summary>
            <param name="a">Complex number</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsPrime(System.Int32)">
            <summary>
            Checks if number is prime.
            <remarks>
            This method is based on enumerating all the divisors.
            </remarks>
            </summary>
            <param name="p">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.IsPrime(System.Int64)">
            <summary>
            Checks if number is prime.
            <remarks>
            This method is based on enumerating all the divisors.
            </remarks>
            </summary>
            <param name="p">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Coprime(System.Int32,System.Int32)">
            <summary>
            Returns coprime number.
            </summary>
            <param name="a">Integer number</param>
            <param name="increment">Increment</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Coprime(System.Int64,System.Int64)">
            <summary>
            Returns coprime number.
            </summary>
            <param name="a">Integer number</param>
            <param name="increment">Increment</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Mod(System.Int32,System.Int32)">
            <summary>
            Returns the remainder of dividing one number by another.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Mod(System.Int64,System.Int64)">
            <summary>
            Returns the remainder of dividing one number by another.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Mod(System.Double,System.Double)">
            <summary>
            Returns the remainder of dividing one number by another.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.ModPow(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the result of raising the number "a" to the power of "x" modulo p.
            </summary>
            <param name="a">Number</param>
            <param name="x">Power</param>
            <param name="p">Modulo</param>
            <param name="modified">Use modified algorithm or not</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.ModPow(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Returns the result of raising the number "a" to the power of "x" modulo p.
            </summary>
            <param name="a">Number</param>
            <param name="x">Power</param>
            <param name="p">Modulo</param>
            <param name="modified">Use modified algorithm or not</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.leftmodexp(System.Int64,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Maths.rightmodexp(System.Int64,System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Maths.ModInv(System.Int32,System.Int32)">
            <summary>
            Returns the inverse number modulo.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.ModInv(System.Int64,System.Int64)">
            <summary>
            Returns the inverse number modulo.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Euclidean(System.Int32,System.Int32)">
            <summary>
            Implements a generalized Euclidean algorithm.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Euclidean(System.Int64,System.Int64)">
            <summary>
            Implements a generalized Euclidean algorithm.
            </summary>
            <param name="a">Number</param>
            <param name="n">Modulo</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Gcd(System.Int32,System.Int32)">
            <summary>
            Returns the value of the greatest common divisor of two numbers.
            </summary>
            <param name="a">Integer number</param>
            <param name="b">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Gcd(System.Int64,System.Int64)">
            <summary>
            Returns the value of the greatest common divisor of two numbers.
            </summary>
            <param name="a">Integer number</param>
            <param name="b">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Lcm(System.Int32,System.Int32)">
            <summary>
            Returns the value of the least common multiple of two numbers.
            </summary>
            <param name="a">Integer number</param>
            <param name="b">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Lcm(System.Int64,System.Int64)">
            <summary>
            Returns the value of the least common multiple of two numbers.
            </summary>
            <param name="a">Integer number</param>
            <param name="b">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Itf(System.Int32,System.Boolean)">
            <summary>
            Returns an array of factors that number consists of.
            </summary>
            <param name="n">Integer number</param>
            <param name="onlyPrimes">Only prime factors or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Itf(System.Int64,System.Boolean)">
            <summary>
            Returns an array of factors that number consists of.
            </summary>
            <param name="n">Integer number</param>
            <param name="onlyPrimes">Only prime factors or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pollard(System.Int32)">
            <summary>
            Returns the P0-divider.
            </summary>
            <param name="n">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Pollard(System.Int64)">
            <summary>
            Returns the P0-divider.
            </summary>
            <param name="n">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Etf(System.Int32)">
            <summary>
            Returns the value of the Euler function.
            </summary>
            <param name="n">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Etf(System.Int64)">
            <summary>
            Returns the value of the Euler function.
            </summary>
            <param name="n">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Sieve(System.Int32)">
            <summary>
            Implements a sieve for finding prime numbers.
            <remarks>
            Recursive implementation of a memory-optimized segmented sieve of Eratosthenes. 
            The operational complexity of the O(N* logN) algorithm.The memory complexity is O(Δ), where Δ = sqrt(N).
            </remarks>
            </summary>
            <param name="limit">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Radical(System.Int32)">
            <summary>
            Returns the radical of an integer.
            </summary>
            <param name="n">Number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Radical(System.Int64)">
            <summary>
            Returns the radical of an integer.
            </summary>
            <param name="n">Number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Decimal2Base(System.Int64,System.Int32)">
            <summary>
            Returns a vector representing the decimal number in the given number system.
            <remarks>
            Example: 10[10] = {1,0,1,0}[2].
            </remarks>
            </summary>
            <param name="x">Byte</param>
            <param name="newbase">Base</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Base2Decimal(System.Int32[],System.Int32)">
            <summary>
            Returns the decimal Number represented in decimal notation.
            <remarks>
            Example: {1,0,1,0}[2] = 10[10].
            </remarks>
            </summary>
            <param name="x">Array</param>
            <param name="thisbase">Base</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Vector2Numeral(System.Int32[])">
            <summary>
            Returns a number that interprets the specified vector in decimal.
            <remarks>
            Example: {1,0,1,0}[2] = 1010[10].
            </remarks>
            </summary>
            <param name="x">Array</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Numeral2Vector(System.Int64)">
            <summary>
            Returns a vector representing the decomposition of a decimal number into components.
            <remarks>
            Example: 1010[10] = {1,0,1,0}[2]
            </remarks>
            </summary>
            <param name="x">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.NumLength(System.Int64,System.Int32)">
            <summary>
            Returns the value of the digit capacity of a number in the given number system.
            </summary>
            <param name="x">Byte</param>
            <param name="numbase">Base</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Hypotenuse(System.Double,System.Double)">
            <summary>
            Returns the value of the hypotenuse.
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Cubic(System.Double,System.Double,System.Double)">
            <summary>
            Implements the solution of a cubic equation of the form:
            x^3 + a*x^2 + b*x + c = 0.
            </summary>
            <param name="a">Coefficient "a"</param>
            <param name="b">Coefficient "b"</param>
            <param name="c">Coefficient "c"</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Quadratic(System.Double,System.Double,System.Double)">
            <summary>
            Implements a solution to a quadratic equation of the form: 
            a*x^2 + b*x + c = 0.
            </summary>
            <param name="a">Coefficient "a"</param>
            <param name="b">Coefficient "b"</param>
            <param name="c">Coefficient "c"</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.BiQuadratic(System.Double,System.Double,System.Double)">
            <summary>
            Implements the solution of a biquadratic equation of the form:
            a*x^4 + b*x^2 + c = 0.
            </summary>
            <param name="a">Coefficient "a"</param>
            <param name="b">Coefficient "b"</param>
            <param name="c">Coefficient "c"</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Rotation(System.Double,System.Double)">
            <summary>
            Implements the construction of the Givens rotation matrix for a pair of real numbers.
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Rotation(UMapx.Core.Complex,UMapx.Core.Complex)">
            <summary>
            Implements the construction of the Givens rotation matrix for a pair of real numbers.
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Normalize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Normalizes a variable relative to the {min, max} range.
            </summary>
            <param name="x">Value</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Maths.Normalize(System.Double,System.Double,System.Double)">
            <summary>
            Normalizes a variable relative to the {min, max} range.
            </summary>
            <param name="x">Value</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Core.Matrice">
            <summary>
            Uses to implement standard algebraic operations on matrices and vectors.
            </summary>
        </member>
        <member name="M:UMapx.Core.Matrice.IsEquals(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Checks the equality of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsEquals(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Checks the equality of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsVector(System.Double[0:,0:])">
            <summary>
            Checks if the matrix is a vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSquare(System.Double[0:,0:])">
            <summary>
            Checks if the matrix is square.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsPositive(System.Double[0:,0:])">
            <summary>
            Checks if the matrix is positive.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSymmetric(System.Double[0:,0:])">
            <summary>
            Checks if the matrix is symmetric.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSkewSymmetric(System.Double[0:,0:])">
            <summary>
            Checks if the matrix is skew-symmetric.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsDiagonal(System.Double[0:,0:])">
            <summary>
            Checks if the matrix is diagonal.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsVector(UMapx.Core.Complex[0:,0:])">
            <summary>
            Checks if the matrix is a vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSquare(UMapx.Core.Complex[0:,0:])">
            <summary>
            Checks if the matrix is square.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSymmetric(UMapx.Core.Complex[0:,0:])">
            <summary>
            Checks if the matrix is symmetric (Hermitian).
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsSkewSymmetric(UMapx.Core.Complex[0:,0:])">
            <summary>
            Checks if the matrix is skew-symmetric (anti-Hermitian).
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsDiagonal(UMapx.Core.Complex[0:,0:])">
            <summary>
            Checks if the matrix is diagonal.
            </summary>
            <param name="m">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Invert(System.Double[0:,0:])">
            <summary>
            Implements the matrix inversion operation.
            </summary>
            <param name="m">Square matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Transponate(System.Double[0:,0:])">
            <summary>
            Implements the transpose of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Invert(UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements the matrix inversion operation.
            </summary>
            <param name="m">Square matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Transponate(UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements the transpose of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conjugate(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the complex conjugate matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hermitian(UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements the Hermitian-conjugation operation of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Trace(System.Double[0:,0:])">
            <summary>
            Returns the trace value of a square matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Det(System.Double[0:,0:])">
            <summary>
            Returns the value of the matrix determinant.
            </summary>
            <param name="m">Matrix</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(System.Double[0:,0:],System.Double)">
            <summary>
            Returns the P-norm of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="p">Parameter p</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(System.Double[0:,0:])">
            <summary>
            Returns the norm of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Round(System.Double[0:,0:],System.Int32,System.MidpointRounding)">
            <summary>
            Selects the integer part of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="digits">Digits</param>
            <param name="mode">Midpoint rounding</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Permutation(System.Double[0:,0:])">
            <summary>
            Implements the construction of a square permutation matrix.
            </summary>
            <param name="m">Square matrix</param>
            <returns>Square matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Trace(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the trace value of a square matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Det(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the value of the matrix determinant.
            </summary>
            <param name="m">Matrix</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Returns the P-norm of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="p">Parameter p</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the norm of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Round(UMapx.Core.Complex[0:,0:],System.Int32,System.MidpointRounding)">
            <summary>
            Selects the integer part of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="digits">Digits</param>
            <param name="mode">Midpoint rounding</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Kronecker(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the Kronecker matrix product.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Kronecker(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the Kronecker matrix product.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Kronecker(UMapx.Core.Complex[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the Kronecker matrix product.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Kronecker(System.Double[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the Kronecker matrix product.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the sum of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the sum of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the sum of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the sum of two matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[0:,0:],System.Double)">
            <summary>
            Returns the sum of a matrix and a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex)">
            <summary>
            Returns the sum of a matrix and a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Returns the sum of a matrix and a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[0:,0:],UMapx.Core.Complex)">
            <summary>
            Returns the sum of a matrix and a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double,System.Double[0:,0:])">
            <summary>
            Returns the sum of a number and a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex,UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the sum of a number and a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex,System.Double[0:,0:])">
            <summary>
            Returns the sum of a number and a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double,UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the sum of a number and a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[0:,0:],System.Double[0:,0:])">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Subtracts one matrix from another.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[0:,0:],System.Double)">
            <summary>
            Subtracts a number from the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex)">
            <summary>
            Subtracts a number from the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Subtracts a number from the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[0:,0:],UMapx.Core.Complex)">
            <summary>
            Subtracts a number from the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double,System.Double[0:,0:])">
            <summary>
            Subtracts a matrix from a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex,UMapx.Core.Complex[0:,0:])">
            <summary>
            Subtracts a matrix from a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex,System.Double[0:,0:])">
            <summary>
            Subtracts a matrix from a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double,UMapx.Core.Complex[0:,0:])">
            <summary>
            Subtracts a matrix from a number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[0:,0:],System.Double[0:,0:])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements matrix multiplication.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[0:,0:],System.Double)">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex)">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[0:,0:],UMapx.Core.Complex)">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double,System.Double[0:,0:])">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex,UMapx.Core.Complex[0:,0:])">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex,System.Double[0:,0:])">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double,UMapx.Core.Complex[0:,0:])">
            <summary>
            Multiplies all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Divides a matrix by a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Divides a matrix by a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[0:,0:],System.Double[0:,0:])">
            <summary>
            Divides a matrix by a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Divides a matrix by a matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[0:,0:],System.Double)">
            <summary>
            Divides all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex)">
            <summary>
            Divides all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Divides all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[0:,0:],UMapx.Core.Complex)">
            <summary>
            Divides all matrix elements by number.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double,System.Double[0:,0:])">
            <summary>
            Divides number into matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex,UMapx.Core.Complex[0:,0:])">
            <summary>
            Divides number into matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex,System.Double[0:,0:])">
            <summary>
            Divides number into matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double,UMapx.Core.Complex[0:,0:])">
            <summary>
            Divides number into matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Raises all matrix elements to a power.
            </summary>
            <param name="m">Matrix</param>
            <param name="pow">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double[0:,0:],UMapx.Core.Complex)">
            <summary>
            Raises all matrix elements to a power.
            </summary>
            <param name="m">Matrix</param>
            <param name="pow">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double[0:,0:],System.Double)">
            <summary>
            Raises all matrix elements to a power.
            </summary>
            <param name="m">Matrix</param>
            <param name="pow">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double,System.Double[0:,0:])">
            <summary>
            Raises the number to the power of the matrix.
            </summary>
            <param name="a">Number</param>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(UMapx.Core.Complex,System.Double[0:,0:])">
            <summary>
            Raises the number to the power of the matrix.
            </summary>
            <param name="a">Number</param>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double,UMapx.Core.Complex[0:,0:])">
            <summary>
            Raises the number to the power of the matrix.
            </summary>
            <param name="a">Number</param>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Log(System.Double[0:,0:],System.Double)">
            <summary>
            Logarithms all elements of the matrix at the base.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Exp(System.Double[0:,0:])">
            <summary>
            Takes an exponent from all matrix values.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Log(UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Logarithms all elements of the matrix at the base.
            </summary>
            <param name="m">Matrix</param>
            <param name="a">Number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Exp(UMapx.Core.Complex[0:,0:])">
            <summary>
            Takes an exponent from all matrix values.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Negate(System.Double[0:,0:])">
            <summary>
            Negates all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Negate(UMapx.Core.Complex[0:,0:])">
            <summary>
            Negates all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToComplex(System.Double[0:,0:])">
            <summary>
            Returns a complex matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToByte(System.Double[0:,0:])">
            <summary>
            Returns a matrix whose values belong to the interval [0, 255].
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToDouble(System.Double[0:,0:])">
            <summary>
            Returns a matrix whose values belong to the interval [0, 1].
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Abs(System.Double[0:,0:])">
            <summary>
            Takes a module for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Abs(UMapx.Core.Complex[0:,0:])">
            <summary>
            Takes a module for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(UMapx.Core.Complex[0:,0:])">
            <summary>
            Takes an angle for all matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Real(UMapx.Core.Complex[0:,0:])">
            <summary>
            Takes the real part for all elements of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Imag(UMapx.Core.Complex[0:,0:])">
            <summary>
            Takes the imaginary part for all elements of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sort(System.Double[0:,0:])">
            <summary>
            Sorts the matrix.
            </summary>
            <param name="m">Matrix</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Sum(System.Double[0:,0:])">
            <summary>
            Returns the vector of matrix sums.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sum(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the vector of matrix sums.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[0:,0:])">
            <summary>
            Returns the matrix product vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the matrix product vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[0:,0:])">
            <summary>
            Returns the matrix divide vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the matrix divide vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Double[0:,0:])">
            <summary>
            Returns the maximum matrix vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Double[0:,0:])">
            <summary>
            Returns the minimum matrix vector.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Morph(System.Double[0:,0:],System.Int32)">
            <summary>
            Returns the matrix vector corresponding to the specified threshold value.
            </summary>
            <param name="m">Matrix</param>
            <param name="threshold">Threshold</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Double[0:,0:])">
            <summary>
            Returns the vector of means of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the vector of means of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(System.Double[0:,0:])">
            <summary>
            Returns the vector of variances of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the vector of variances of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the vector of variances of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the vector of variances of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(System.Double[0:,0:])">
            <summary>
            Returns the standard deviation vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the standard deviation vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Returns the standard deviation vector of the matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the standard deviation vector of the matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cov(System.Double[0:,0:])">
            <summary>
            Returns the covariance matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cov(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns the covariance matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Entropy(System.Double[0:,0:])">
            <summary>
            Returns the entropy vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Implements a scalar product of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements a scalar product of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[0:,0:],System.Double[0:,0:])">
            <summary>
            Implements a scalar product of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements a scalar product of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Double[0:,0:],System.Double[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex[0:,0:],System.Double[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Double[0:,0:],UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Double[0:,0:],System.Double[],UMapx.Core.Direction,System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Double[0:,0:],UMapx.Core.Complex[],UMapx.Core.Direction,System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex[0:,0:],System.Double[],UMapx.Core.Direction,System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[],UMapx.Core.Direction,System.Boolean)">
            <summary>
            Implements discrete convolution of matrices.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <param name="direction">Processing direction</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the matrix result of morphological minimum.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the matrix result of morphological maximum.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Morph(System.Double[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the matrix result of morphology.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
            <param name="threshold">Threshold</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the result matrix of local averaging.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns the result matrix of local averaging.
            </summary>
            <param name="m">Matrix</param>
            <param name="r0">Height radius</param>
            <param name="r1">Width radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.IsEquals(System.Double[],System.Double[])">
            <summary>
            Checks the equality of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsEquals(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Checks the equality of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsPositive(System.Double[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="v">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsCollinear(System.Double[],System.Double[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsCollinear(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsCollinear(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.IsCollinear(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Checks if vectors are collinear.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(System.Double[],System.Double)">
            <summary>
            Returns the P-norm of the vector.
            </summary>
            <param name="a">Array</param>
            <param name="p">Parameter p</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(System.Double[])">
            <summary>
            Returns the norm of the vector.
            </summary>
            <param name="a">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(UMapx.Core.Complex[],System.Double)">
            <summary>
            Returns the P-norm of the vector.
            </summary>
            <param name="a">Array</param>
            <param name="p">Parameter p</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Norm(UMapx.Core.Complex[])">
            <summary>
            Returns the norm of the vector.
            </summary>
            <param name="a">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Round(System.Double[],System.Int32,System.MidpointRounding)">
            <summary>
            Selects the integer part of the matrix.
            </summary>
            <param name="m">Array</param>
            <param name="digits">Digits</param>
            <param name="mode">Midpoint rounding</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Round(UMapx.Core.Complex[],System.Int32,System.MidpointRounding)">
            <summary>
            Selects the integer part of the matrix.
            </summary>
            <param name="m">Array</param>
            <param name="digits">Digits</param>
            <param name="mode">Midpoint rounding</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(System.Double[],System.Double[])">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the angle between two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Proj(System.Double[],System.Double[])">
            <summary>
            Returns the projection of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Proj(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Returns the projection of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Proj(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Returns the projection of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Proj(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the projection of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cosines(System.Double[])">
            <summary>
            Returns the direction cosines of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cosines(UMapx.Core.Complex[])">
            <summary>
            Returns the direction cosines of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[],System.Double[])">
            <summary>
            Returns the sum of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the sum of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Returns the sum of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Returns the sum of two vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[],System.Double)">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex[],System.Double)">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double[],UMapx.Core.Complex)">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double,System.Double[])">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex,UMapx.Core.Complex[])">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(System.Double,UMapx.Core.Complex[])">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Add(UMapx.Core.Complex,System.Double[])">
            <summary>
            Returns the sum of a vector and a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Subtracts one vector from another.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[],System.Double[])">
            <summary>
            Subtracts one vector from another.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Subtracts one vector from another.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Subtracts one vector from another.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[],System.Double)">
            <summary>
            Subtracts a number from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            Subtracts a number from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex[],System.Double)">
            <summary>
            Subtracts a number from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double[],UMapx.Core.Complex)">
            <summary>
            Subtracts a number from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double,System.Double[])">
            <summary>
            Subtracts a vector from a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex,UMapx.Core.Complex[])">
            <summary>
            Subtracts a vector from a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(UMapx.Core.Complex,System.Double[])">
            <summary>
            Subtracts a vector from a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sub(System.Double,UMapx.Core.Complex[])">
            <summary>
            Subtracts a vector from a number.
            </summary>
            <param name="a">Array</param>
            <param name="b">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[],System.Double[])">
            <summary>
            Implements element-wise product of vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Implements element-wise product of vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Implements element-wise product of vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Implements element-wise product of vectors.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[],System.Double)">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[],UMapx.Core.Complex)">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[],System.Double)">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double,System.Double[])">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex,UMapx.Core.Complex[])">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex,System.Double[])">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double,UMapx.Core.Complex[])">
            <summary>
            Implements the multiplication of the vector by number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[],System.Double[])">
            <summary>
            Divides a vector by a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Divides a vector by a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Divides a vector by a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Divides a vector by a vector.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[],System.Double)">
            <summary>
            Divides a vector by a number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[],UMapx.Core.Complex)">
            <summary>
            Divides a vector by a number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[],System.Double)">
            <summary>
            Divides a vector by a number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[],UMapx.Core.Complex)">
            <summary>
            Divides a vector by a number.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double,System.Double[])">
            <summary>
            Divides a number by a vector.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex,UMapx.Core.Complex[])">
            <summary>
            Divides a number by a vector.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double,UMapx.Core.Complex[])">
            <summary>
            Divides a number by a vector.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex,System.Double[])">
            <summary>
            Divides a number by a vector.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double[],System.Double)">
            <summary>
            Raises the elements of a vector to a power.
            </summary>
            <param name="v">Array</param>
            <param name="power">Power</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(UMapx.Core.Complex[],System.Double)">
            <summary>
            Raises the elements of a vector to a power.
            </summary>
            <param name="v">Array</param>
            <param name="power">Power</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double[],UMapx.Core.Complex)">
            <summary>
            Raises the elements of a vector to a power.
            </summary>
            <param name="v">Array</param>
            <param name="power">Power</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double,System.Double[])">
            <summary>
            Raises the number to the power of the vector.
            </summary>
            <param name="a">Number</param>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(UMapx.Core.Complex,System.Double[])">
            <summary>
            Raises the number to the power of the vector.
            </summary>
            <param name="a">Number</param>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Pow(System.Double,UMapx.Core.Complex[])">
            <summary>
            Raises the number to the power of the vector.
            </summary>
            <param name="a">Number</param>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Log(System.Double[],System.Double)">
            <summary>
            Logarithms the elements of the vector base.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Log(UMapx.Core.Complex[],System.Double)">
            <summary>
            Logarithms the elements of the vector base.
            </summary>
            <param name="v">Array</param>
            <param name="a">Number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Exp(System.Double[])">
            <summary>
            Takes an exponent from all vector values.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Exp(UMapx.Core.Complex[])">
            <summary>
            Takes an exponent from all vector values.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToDouble(System.Double[])">
            <summary>
            Returns a vector whose values belong to the interval [0, 1].
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToByte(System.Double[])">
            <summary>
            Returns a vector whose values belong to the interval [0, 255].
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Abs(System.Double[])">
            <summary>
            Returns the module of the elements of the vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Negate(System.Double[])">
            <summary>
            Negates all elements of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Negate(UMapx.Core.Complex[])">
            <summary>
            Negates all elements of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ToComplex(System.Double[])">
            <summary>
            Returns a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Abs(UMapx.Core.Complex[])">
            <summary>
            Returns the module of elements of a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Angle(UMapx.Core.Complex[])">
            <summary>
            Returns the angle of the elements of a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Real(UMapx.Core.Complex[])">
            <summary>
            Returns the real part of the elements of a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Imag(UMapx.Core.Complex[])">
            <summary>
            Returns the imaginary part of the elements of a complex vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conjugate(UMapx.Core.Complex[])">
            <summary>
            Returns a complex conjugate vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cov(System.Double[])">
            <summary>
            Returns the covariance value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cov(UMapx.Core.Complex[])">
            <summary>
            Returns the covariance value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sum(System.Double[])">
            <summary>
            Returns the total value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sum(UMapx.Core.Complex[])">
            <summary>
            Returns the total value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(System.Double[])">
            <summary>
            Returns the total product of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mul(UMapx.Core.Complex[])">
            <summary>
            Returns the total product of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(System.Double[])">
            <summary>
            Returns the common quotient of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Div(UMapx.Core.Complex[])">
            <summary>
            Returns the common quotient of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Entropy(System.Double[])">
            <summary>
            Returns the entropy of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Double[])">
            <summary>
            Returns the average value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex[])">
            <summary>
            Returns the average value of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(System.Double[])">
            <summary>
            Returns the variance value.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(UMapx.Core.Complex[])">
            <summary>
            Returns the variance value.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(System.Double[],System.Double[])">
            <summary>
            Returns the variance value.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Var(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the variance value.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(System.Double[])">
            <summary>
            Returns the standard deviation.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(UMapx.Core.Complex[])">
            <summary>
            Returns the standard deviation.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(System.Double[],System.Double[])">
            <summary>
            Returns the standard deviation.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.StnDev(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the standard deviation.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mode(System.Double[])">
            <summary>
            Returns the value of the vector mode.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mode(UMapx.Core.Complex[])">
            <summary>
            Returns the value of the vector mode.
            </summary>
            <param name="v">Array</param>
            <returns>Complex number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extremum(System.Double[])">
            <summary>
            Returns the minimum and maximum values of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Double[])">
            <summary>
            Gets the value of the minimum element of the vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Double[])">
            <summary>
            Gets the value of the maximum element of the vector.
            </summary>
            <param name="v">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Morph(System.Double[],System.Int32)">
            <summary>
            Gets the value of the vector element corresponding to the threshold value.
            </summary>
            <param name="v">Array</param>
            <param name="threshold">Threshold</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Sort(System.Double[])">
            <summary>
            Sorts the vector.
            </summary>
            <param name="v">Array</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Sort(System.Double[],System.Int32,System.Int32)">
            <summary>
            Sorts the vector.
            </summary>
            <param name="v">Array</param>
            <param name="r">Start</param>
            <param name="l">End</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[0:,0:],System.Double[],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: A * diag(v).
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: A * diag(v).
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[0:,0:],System.Double[],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: A * diag(v).
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[0:,0:],UMapx.Core.Complex[],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: A * diag(v).
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[],System.Double[0:,0:],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: diag(v) * A.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[],UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: diag(v) * A.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[],System.Double[0:,0:],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: diag(v) * A.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[],UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Implements the scalar product of a matrix by a vector of the form: diag(v) * A.
            </summary>
            <param name="m">Matrix</param>
            <param name="v">Array</param>
            <param name="inverse">Use inverse to diagonal matrix or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[],System.Double[])">
            <summary>
            Implements a scalar product of vectors of the form: a * b'.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Implements a scalar product of vectors of the form: a * b'.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Implements a scalar product of vectors of the form: a * b'.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Implements a scalar product of vectors of the form: a * b'.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[],System.Double[0:,0:])">
            <summary>
            Implements scalar multiplication of a vector by a matrix.
            </summary>
            <param name="v">Array</param>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(System.Double[],UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements scalar multiplication of a vector by a matrix.
            </summary>
            <param name="v">Array</param>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[],UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements scalar multiplication of a vector by a matrix.
            </summary>
            <param name="v">Array</param>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dot(UMapx.Core.Complex[],System.Double[0:,0:])">
            <summary>
            Implements scalar multiplication of a vector by a matrix.
            </summary>
            <param name="v">Array</param>
            <param name="m">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dotp(System.Double[],System.Double[])">
            <summary>
            Implements a scalar product of vectors of the form: a' * b, 
            where ' is the transpose sign.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dotp(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Implements a scalar product of vectors of the form: a' * b, 
            where ' is the transpose sign.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dotp(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Implements a scalar product of vectors of the form: a' * b, 
            where ' is the transpose sign.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Dotp(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Implements a scalar product of vectors of the form: a' * b, 
            where ' is the transpose sign.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Double[],System.Double[],System.Boolean)">
            <summary>
            Implements discrete convolution of vectors.
            </summary>
            <param name="v">Array</param>
            <param name="u">Array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Boolean)">
            <summary>
            Implements discrete convolution of vectors.
            </summary>
            <param name="v">Array</param>
            <param name="u">Array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(UMapx.Core.Complex[],System.Double[],System.Boolean)">
            <summary>
            Implements discrete convolution of vectors.
            </summary>
            <param name="v">Array</param>
            <param name="u">Array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Conv(System.Double[],UMapx.Core.Complex[],System.Boolean)">
            <summary>
            Implements discrete convolution of vectors.
            </summary>
            <param name="v">Array</param>
            <param name="u">Array</param>
            <param name="normalize">Normalized convolution or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Max(System.Double[],System.Int32)">
            <summary>
            Returns the vector result of morphology maximum.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Min(System.Double[],System.Int32)">
            <summary>
            Returns the vector result of morphology minimum.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Morph(System.Double[],System.Int32,System.Int32)">
            <summary>
            Returns the vector result of morphology.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
            <param name="threshold">Threshold</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(System.Double[],System.Int32)">
            <summary>
            Returns the result vector of local averaging.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Mean(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Returns the result vector of local averaging.
            </summary>
            <param name="v">Array</param>
            <param name="r">Radius</param>
        </member>
        <member name="M:UMapx.Core.Matrice.GetCol(System.Double[0:,0:],System.Int32)">
            <summary>
            Returns the matrix column vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="r">Column number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.SetCol(System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
            Specifies the matrix column vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Array</param>
            <param name="r">Column number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GetRow(System.Double[0:,0:],System.Int32)">
            <summary>
            Returns the row vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="r">Row number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.SetRow(System.Double[0:,0:],System.Double[],System.Int32)">
            <summary>
            Specifies the row vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Array</param>
            <param name="r">Row number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GetCol(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            Returns the matrix column vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="r">Column number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.SetCol(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[],System.Int32)">
            <summary>
            Specifies the matrix column vector.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Array</param>
            <param name="r">Column number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GetRow(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            Returns the row vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="r">Row number</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.SetRow(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[],System.Int32)">
            <summary>
            Specifies the row vector of the matrix.
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Array</param>
            <param name="r">Row number</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Shift(UMapx.Core.Complex[0:,0:],System.Int32,System.Int32)">
            <summary>
            Implements block matrix rearrangement.
            </summary>
            <param name="a">Matrix</param>
            <param name="m">The number of positions to which a shift in height occurs</param>
            <param name="l">The number of positions by which the shift occurs in width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Shift(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Implements block matrix rearrangement.
            </summary>
            <param name="a">Matrix</param>
            <param name="m">The number of positions to which a shift in height occurs</param>
            <param name="l">The number of positions by which the shift occurs in width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Shift(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Implements a shift of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="l">Number of positions to shift</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Shift(System.Double[],System.Int32)">
            <summary>
            Implements a shift of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="l">Number of positions to shift</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Flip(System.Double[0:,0:],UMapx.Core.Direction)">
            <summary>
            Flips matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="direction">Processing direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Flip(UMapx.Core.Complex[0:,0:],UMapx.Core.Direction)">
            <summary>
            Flips matrix elements.
            </summary>
            <param name="m">Matrix</param>
            <param name="direction">Processing direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Flip(System.Double[])">
            <summary>
            Flips vector elements.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Flip(UMapx.Core.Complex[])">
            <summary>
            Flips vector elements.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(System.Double[],System.Double[])">
            <summary>
            Implements vector merging.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Implements vector merging.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(UMapx.Core.Complex[],System.Double[])">
            <summary>
            Implements vector merging.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Merge(System.Double[],UMapx.Core.Complex[])">
            <summary>
            Implements vector merging.
            </summary>
            <param name="a">Array</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cut(System.Double[],System.Int32,System.Int32)">
            <summary>
            Returns the specified part of the vector.
            </summary>
            <param name="a">Array</param>
            <param name="start">Starting position</param>
            <param name="length">Vector length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cut(UMapx.Core.Complex[],System.Int32,System.Int32)">
            <summary>
            Returns the specified part of the vector.
            </summary>
            <param name="a">Array</param>
            <param name="start">Starting position</param>
            <param name="length">Vector length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cut(System.Double[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops the matrix to the specified size.
            </summary>
            <param name="m">Matrix</param>
            <param name="y">Starting position in height</param>
            <param name="x">Starting position in width</param>
            <param name="height">Height</param>
            <param name="width">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cut(UMapx.Core.Complex[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops the matrix to the specified size.
            </summary>
            <param name="m">Matrix</param>
            <param name="y">Starting position in height</param>
            <param name="x">Starting position in width</param>
            <param name="height">Height</param>
            <param name="width">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Reshape(System.Double[],System.Int32)">
            <summary>
            Returns a matrix formed from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="height">Height</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Reshape(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Returns a matrix formed from a vector.
            </summary>
            <param name="a">Array</param>
            <param name="height">Height</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Reshape(System.Double[0:,0:],System.Int32)">
            <summary>
            Returns a vector formed from a matrix.
            </summary>
            <param name="a">Matrix</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Reshape(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            Returns a vector formed from a matrix.
            </summary>
            <param name="a">Matrix</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diag(System.Double[])">
            <summary>
            Implements the reduction of a vector to a diagonal matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diag(UMapx.Core.Complex[])">
            <summary>
            Implements the reduction of a vector to a diagonal matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diag(System.Double[0:,0:])">
            <summary>
            Returns a vector whose elements lie on the diagonal of the matrix.
            </summary>
            <param name="a">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diag(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns a vector whose elements lie on the diagonal of the matrix.
            </summary>
            <param name="a">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Swap(System.Double[0:,0:],System.Int32,System.Int32,UMapx.Core.Direction)">
            <summary>
            Implements a permutation of the vectors of the matrix.
            </summary>
            <param name="a">Matrix</param>
            <param name="i">First row or column</param>
            <param name="j">Second row or column</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Swap(UMapx.Core.Complex[0:,0:],System.Int32,System.Int32,UMapx.Core.Direction)">
            <summary>
            Implements a permutation of the vectors of the matrix.
            </summary>
            <param name="a">Matrix</param>
            <param name="i">First row or column</param>
            <param name="j">Second row or column</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Swap(System.Double[],System.Int32,System.Int32)">
            <summary>
            Implements a permutation of the elements of the vector.
            </summary>
            <param name="v">Array</param>
            <param name="i">First element position</param>
            <param name="j">Second element position</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Swap(UMapx.Core.Complex[],System.Int32,System.Int32)">
            <summary>
            Implements a permutation of the elements of the vector.
            </summary>
            <param name="v">Array</param>
            <param name="i">First element position</param>
            <param name="j">Second element position</param>
        </member>
        <member name="M:UMapx.Core.Matrice.Remove(System.Double[0:,0:],System.Int32,System.Int32,UMapx.Core.Direction)">
            <summary>
            Implements the removal of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="i">First row or column</param>
            <param name="length">Length</param>
            <param name="direction">Processing direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Remove(UMapx.Core.Complex[0:,0:],System.Int32,System.Int32,UMapx.Core.Direction)">
            <summary>
            Implements the removal of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="i">First row or column</param>
            <param name="length">Length</param>
            <param name="direction">Processing direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Remove(System.Double[],System.Int32,System.Int32)">
            <summary>
            Implements the removal of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="i">Number of element</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Remove(UMapx.Core.Complex[],System.Int32,System.Int32)">
            <summary>
            Implements the removal of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="i">Number of element</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Minor(System.Double[0:,0:],System.Int32)">
            <summary>
            Implements the operation of taking the minor of the matrix.
            </summary>
            <param name="m">Square matrix</param>
            <param name="n">Row and column number</param>
            <returns>Square matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Minor(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            Implements the operation of taking the minor of the matrix.
            </summary>
            <param name="m">Square matrix</param>
            <param name="n">Row and column number</param>
            <returns>Square matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diff(System.Double[0:,0:],System.Int32,UMapx.Core.Direction,System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="n">Order</param>
            <param name="direction">Processing direction</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.DiffVertical(System.Double[0:,0:],System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.DiffHorizontal(System.Double[0:,0:],System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diff(UMapx.Core.Complex[0:,0:],System.Int32,UMapx.Core.Direction,System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="n">Order</param>
            <param name="direction">Processing direction</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.DiffVertical(UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.DiffHorizontal(UMapx.Core.Complex[0:,0:],System.Boolean)">
            <summary>
            Returns the difference of matrix elements.
            </summary>
            <param name="a">Matrix</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diff(System.Double[],System.Int32,System.Boolean)">
            <summary>
            Returns the difference of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="n">Order</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Diff(UMapx.Core.Complex[],System.Int32,System.Boolean)">
            <summary>
            Returns the difference of vector elements.
            </summary>
            <param name="v">Array</param>
            <param name="n">Order</param>
            <param name="reverse">Reverse processing or not</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extend(System.Double[],System.Int32)">
            <summary>
            Extends the vector to the specified length.
            </summary>
            <param name="v">Array</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extend(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Extends the matrix to the specified size.
            </summary>
            <param name="m">Matrix</param>
            <param name="height">Height</param>
            <param name="width">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ExtendVertical(System.Double[0:,0:],System.Int32)">
            <summary>
            extend vertical.
            </summary>
            <param name="m"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ExtendHorizontal(System.Double[0:,0:],System.Int32)">
            <summary>
            extend horizontal.
            </summary>
            <param name="m"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extend(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Extends the vector to the specified length.
            </summary>
            <param name="v">Array</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Extend(UMapx.Core.Complex[0:,0:],System.Int32,System.Int32)">
            <summary>
            Extends the matrix to the specified size.
            </summary>
            <param name="m">Matrix</param>
            <param name="height">Height</param>
            <param name="width">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ExtendVertical(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            extend vertical.
            </summary>
            <param name="m"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Matrice.ExtendHorizontal(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            extend horizontal.
            </summary>
            <param name="m"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Double,System.Double,System.Double)">
            <summary>
            Returns an array of function values.
            </summary>
            <param name="min">Minimum</param>
            <param name="max">Maximum</param>
            <param name="step">Step</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Double[],UMapx.Core.IDouble)">
            <summary>
            Returns an array of function values.
            </summary>
            <param name="v">Array</param>
            <param name="function">Continuous function delegate</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(UMapx.Core.Complex[],UMapx.Core.IComplex)">
            <summary>
            Returns an array of function values.
            </summary>
            <param name="v">Array</param>
            <param name="function">Continuous function delegate</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Double[],System.Double[],UMapx.Core.IDoubleMesh)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Double[],UMapx.Core.Complex[],UMapx.Core.IComplexMesh)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(UMapx.Core.Complex[],System.Double[],UMapx.Core.IComplexMesh)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(UMapx.Core.Complex[],UMapx.Core.Complex[],UMapx.Core.IComplexMesh)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="x">Array of values of the first argument</param>
            <param name="y">Array of values of the second argument</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(System.Double[0:,0:],UMapx.Core.IDouble)">
            <summary>
            Returns an array of function values.
            </summary>
            <param name="m">Matrix</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Compute(UMapx.Core.Complex[0:,0:],UMapx.Core.IComplex)">
            <summary>
            Returns a matrix of function values.
            </summary>
            <param name="m">Matrix</param>
            <param name="function">Continuous function delegate</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.One(System.Int32)">
            <summary>
            Implements the construction of a vector of ones.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Zero(System.Int32)">
            <summary>
            Implements the construction of a vector of zeros.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Householder(System.Double[])">
            <summary>
            Returns the Householder vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Companion(System.Double[])">
            <summary>
            Implements the construction of the companion matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Vander(System.Double[])">
            <summary>
            Implements the construction of the Vandermond matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hankeli(System.Double[])">
            <summary>
            Implements the construction of an incomplete Hankel matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hankel(System.Double[])">
            <summary>
            Implements the construction of the Hankel matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Toeplitz(System.Double[])">
            <summary>
            Implements the construction of the Toeplitz matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cauchy(System.Double[],System.Double[])">
            <summary>
            Implements the construction of the Cauchy matrix.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Circulant(System.Double[])">
            <summary>
            Implements the construction of a circulant matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Symmetric(System.Double[])">
            <summary>
            Implements the construction of a symmetric matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Companion(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of the companion matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Vander(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of the Vandermond matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hankeli(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of an incomplete Hankel matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hankel(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of the Hankel matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Toeplitz(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of the Toeplitz matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Cauchy(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Implements the construction of the Cauchy matrix.
            </summary>
            <param name="x">Array</param>
            <param name="y">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Circulant(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of a circulant matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Symmetric(UMapx.Core.Complex[])">
            <summary>
            Implements the construction of a symmetric matrix.
            </summary>
            <param name="v">Array</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Zero(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a zero matrix.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Eye(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a eye matrix.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.One(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of ones.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Exchange(System.Int32)">
            <summary>
            Implements the construction of the exchange matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Lehmer(System.Int32)">
            <summary>
            Implements the construction of the Lehmer matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Redheffer(System.Int32)">
            <summary>
            Implements the construction of the Redheffer matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Hilbert(System.Int32)">
            <summary>
            Implements the construction of a Hilbert matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Circulant(System.Int32)">
            <summary>
            Implements the construction of a cyclic matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Symmetric(System.Int32)">
            <summary>
            Implements the construction of a symmetric matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.GCD(System.Int32)">
            <summary>
            Implements the construction of a matrix of GCD.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Stirling(System.Int32,System.Boolean)">
            <summary>
            Implements the construction of the Stirling matrix of the first or second kind.
            </summary>
            <param name="n">Dimension</param>
            <param name="second">Second kind or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Magic(System.Int32)">
            <summary>
            Implements the construction of a magic square.
            </summary>
            <param name="n">Size (odd number)</param>
            <returns>Matrix</returns>
        </member>
        <member name="F:UMapx.Core.Matrice.rnd">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Core.Matrice.Rand(System.Int32)">
            <summary>
            Implements the construction of a vector of random numbers, the values of which are distributed UMapxing to a uniform distribution.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randc(System.Int32)">
            <summary>
            Implements the construction of a vector of random numbers, the values of which are distributed UMapxing to a uniform distribution.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Rand(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of random numbers, the values of which are distributed UMapxing to a uniform distribution.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randc(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of random numbers, the values of which are distributed UMapxing to a uniform distribution.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randi(System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randic(System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="n">Dimension</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randi(System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="n">Dimension</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randic(System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a vector of integer random numbers.
            </summary>
            <param name="n">Dimension</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randi(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randi(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randic(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Randic(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implements the construction of a matrix of integer random numbers.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="a">Lower bound</param>
            <param name="b">Upper bound</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Parse(System.Double[0:,0:],System.String)">
            <summary>
            Parses the original string into a matrix of double numbers.
            <remarks>
            Example: "[1, 2, 3; 4, 5, 6; 7, 8, 9]";
            </remarks>
            </summary>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.TryParse(System.String,System.Double[0:,0:]@)">
            <summary>
            Tries to parse the original row into a matrix of double numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Parse(UMapx.Core.Complex[0:,0:],System.String)">
            <summary>
            Parses the original string into a matrix of complex numbers.
            </summary>
            <remarks>
            Example: "[1 + 2i, 2 + 4i; 3 + 6i, 4 + 8i]";
            </remarks>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.TryParse(System.String,UMapx.Core.Complex[0:,0:]@)">
            <summary>
            Tries to parse the original row into a matrix of complex numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Parse(System.Double[],System.String)">
            <summary>
            Parses the original string into a vector of double numbers.
            <remarks>
            Example: "[1, 2, 3, 4]";
            </remarks>
            </summary>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.TryParse(System.String,System.Double[]@)">
            <summary>
            Tries to parse the original row into a matrix of double numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Parse(UMapx.Core.Complex[],System.String)">
            <summary>
            Parses the original string into a vector of complex numbers.
            <remarks>
            Example: "[1 + 2i, 2 + 0.3i, 3 + i, 4 - 11i]";
            </remarks>
            </summary>
            <param name="a">Matrix</param>
            <param name="s">Input string</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.TryParse(System.String,UMapx.Core.Complex[]@)">
            <summary>
            Tries to parse the original row into a matrix of complex numbers.
            </summary>
            <param name="s">Input string</param>
            <param name="result">Matrix</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Solve(System.Double[0:,0:])">
            <summary>
            Returns a vector corresponding to the solution of a system of linear algebraic equations: Ax = b.
            </summary>
            <param name="A">Extended matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Solve(System.Double[0:,0:],System.Double[])">
            <summary>
            Returns a vector corresponding to the solution of a system of linear algebraic equations: Ax = b.
            </summary>
            <param name="A">Square matrix</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Solve(UMapx.Core.Complex[0:,0:])">
            <summary>
            Returns a vector corresponding to the solution of a system of linear algebraic equations: Ax = b.
            </summary>
            <param name="A">Extended matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Core.Matrice.Solve(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[])">
            <summary>
            Returns a vector corresponding to the solution of a system of linear algebraic equations: Ax = b.
            </summary>
            <param name="A">Square matrix</param>
            <param name="b">Array</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Core.PointDouble">
            <summary>
            Defines a pair of double numbers representing an ordered pair of X and Y coordinates.
            </summary>
        </member>
        <member name="M:UMapx.Core.PointDouble.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a pair of double numbers representing an ordered pair of X and Y coordinates.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
        </member>
        <member name="P:UMapx.Core.PointDouble.X">
            <summary>
            Gets or sets the coordinate X.
            </summary>
        </member>
        <member name="P:UMapx.Core.PointDouble.Y">
            <summary>
            Gets or sets the coordinate Y.
            </summary>
        </member>
        <member name="M:UMapx.Core.PointDouble.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.PointDouble.ToString">
            <summary>
            Converts a PointDouble to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.PointDouble.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type PointDouble.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointDouble.op_Equality(UMapx.Core.PointDouble,UMapx.Core.PointDouble)">
            <summary>
            Checks if two PointDouble objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointDouble.op_Inequality(UMapx.Core.PointDouble,UMapx.Core.PointDouble)">
            <summary>
            Checks if two PointDouble objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointDouble.System#ICloneable#Clone">
            <summary>
            Creates a copy of PointDouble.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.PointDouble.Clone">
            <summary>
            Creates a copy of PointDouble.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.PointInt">
            <summary>
            Defines a pair of integer numbers representing an ordered pair of X and Y coordinates.
            </summary>
        </member>
        <member name="M:UMapx.Core.PointInt.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a pair of integer numbers representing an ordered pair of X and Y coordinates.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
        </member>
        <member name="P:UMapx.Core.PointInt.X">
            <summary>
            Gets or sets the coordinate X.
            </summary>
        </member>
        <member name="P:UMapx.Core.PointInt.Y">
            <summary>
            Gets or sets the coordinate Y.
            </summary>
        </member>
        <member name="M:UMapx.Core.PointInt.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.ToString">
            <summary>
            Converts a PointInt to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type PointInt.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.op_Equality(UMapx.Core.PointInt,UMapx.Core.PointInt)">
            <summary>
            Checks if two PointDouble objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.op_Inequality(UMapx.Core.PointInt,UMapx.Core.PointInt)">
            <summary>
            Checks if two PointDouble objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.System#ICloneable#Clone">
            <summary>
            Creates a copy of PointInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.PointInt.Clone">
            <summary>
            Creates a copy of PointInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.Quaternion">
            <summary>
            Defines a quaternion.
            <remarks>
            A quaternion is a system of hypercomplex numbers that forms a four-dimensional vector space over a field of real numbers.
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Core.Quaternion.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="F:UMapx.Core.Quaternion.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="F:UMapx.Core.Quaternion.Z">
            <summary>
            Z coordinate.
            </summary>
        </member>
        <member name="F:UMapx.Core.Quaternion.W">
            <summary>
            W coordinate.
            </summary>
        </member>
        <member name="M:UMapx.Core.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a quaternion based on the given coordinates.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
            <param name="z">Coordinate Z</param>
            <param name="w">Coordinate W</param>
        </member>
        <member name="P:UMapx.Core.Quaternion.Identity">
            <summary>
            Gets a quaternion that represents a lack of rotation.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion.IsIdentity">
            <summary>
            Gets a value indicating whether the current instance is a single Quaternion.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion.Abs">
            <summary>
            Returns the value of the quaternion module.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion.SquaredAbs">
            <summary>
            Calculates the quaternion modulus squared.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion.Normalize">
            <summary>
            Divides each coordinate of the specified quaternion by its length.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion.Conjugate">
            <summary>
            Returns the conjugate object of the specified quaternion.
            </summary>
        </member>
        <member name="P:UMapx.Core.Quaternion.Inverse">
            <summary>
            Returns the inverse object of the quaternion.
            </summary>
        </member>
        <member name="M:UMapx.Core.Quaternion.FromYPR(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new quaternion based on a given value of nutation, precession, and proper rotation.
            </summary>
            <param name="yaw">The nutation angle around the Y axis in radians</param>
            <param name="pitch">The precession angle around the X axis in radians</param>
            <param name="roll">The angle of rotation around the Z axis in radians</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Dot(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Computes the scalar product of two quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Slerp(UMapx.Core.Quaternion,UMapx.Core.Quaternion,System.Double)">
            <summary>
            Performs interpolation between two quaternions using spherical linear interpolation.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <param name="amount">Relative weight of the second quaternion in interpolation</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Lerp(UMapx.Core.Quaternion,UMapx.Core.Quaternion,System.Double)">
            <summary>
            Performs linear interpolation between two quaternions based on a value indicating the weighting of the second quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <param name="amount">Relative weight of the second quaternion in interpolation</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Concatenate(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Concatenates two quaternions.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_UnaryNegation(UMapx.Core.Quaternion)">
            <summary>
            Reverses the sign of each quaternion coordinate.
            </summary>
            <param name="q">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Addition(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Adds each element in one quaternion with the corresponding element in the second quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Subtraction(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Subtracts each element in the second quaternion from the corresponding element in the first quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Multiply(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Returns the quaternion resulting from the multiplication of two quaternions.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Multiply(UMapx.Core.Quaternion,System.Double)">
            <summary>
            Returns the quaternion obtained by scaling all the coordinates of the specified quaternion by a scalar factor.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Factor</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Division(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Divides one quaternion into a second quaternion.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Division(UMapx.Core.Quaternion,System.Double)">
            <summary>
            Returns the quaternion obtained by scaling all the coordinates of the specified quaternion by a scalar factor.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Factor</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Equality(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Checks if two quaternions are equal.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.op_Inequality(UMapx.Core.Quaternion,UMapx.Core.Quaternion)">
            <summary>
            Checks if two quaternions are not equal.
            </summary>
            <param name="a">Quaternion</param>
            <param name="b">Quaternion</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type quaternion.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.ToString">
            <summary>
            Converts quaternion to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.ToString(System.String)">
            <summary>
            Converts quaternion to its corresponding string representation.
            </summary>
            <param name="format">Format string</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.System#ICloneable#Clone">
            <summary>
            Creates a copy of quaternion.
            </summary>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Clone">
            <summary>
            Creates a copy of quaternion.
            </summary>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.Parse(System.String)">
            <summary>
            Parses the string to quaternion.
            </summary>
            <remarks>
            Example: "[1, -2; 3.2, -.13]";
            The dimension of the vector must be 4.
            </remarks>
            <param name="s">Input string</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:UMapx.Core.Quaternion.TryParse(System.String,UMapx.Core.Quaternion@)">
            <summary>
            Tries to parse the string into Quaternion.
            </summary>
            <param name="quaternion">Input string</param>
            <param name="result">Quaternion</param>
            <returns>Boolean</returns>
        </member>
        <member name="T:UMapx.Core.RangeDouble">
            <summary>
            Defines a pair of double numbers representing a line segment.
            </summary>
        </member>
        <member name="M:UMapx.Core.RangeDouble.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a pair of double numbers representing a line segment.
            </summary>
            <param name="min">Lower bound of the segment</param>
            <param name="max">Upper bound of the segment</param>
        </member>
        <member name="P:UMapx.Core.RangeDouble.Min">
            <summary>
            Gets or sets the lower bound of the line segment.
            </summary>
        </member>
        <member name="P:UMapx.Core.RangeDouble.Max">
            <summary>
            Gets or sets the upper bound of the line segment.
            </summary>
        </member>
        <member name="M:UMapx.Core.RangeDouble.IsOnRange(System.Double)">
            <summary>
            Checks if the value is in the specified interval.
            </summary>
            <param name="x">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.ToString">
            <summary>
            Converts RangeDouble to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type RangeDouble.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.op_Equality(UMapx.Core.RangeDouble,UMapx.Core.RangeDouble)">
            <summary>
            Checks if two RangeDouble objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.op_Inequality(UMapx.Core.RangeDouble,UMapx.Core.RangeDouble)">
            <summary>
            Checks if two RangeDouble objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.System#ICloneable#Clone">
            <summary>
            Creates a copy of RangeDouble.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.RangeDouble.Clone">
            <summary>
            Creates a copy of RangeDouble.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.RangeInt">
            <summary>
            Defines a pair of integer numbers representing a line segment.
            </summary>
        </member>
        <member name="M:UMapx.Core.RangeInt.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a pair of integer numbers representing a line segment.
            </summary>
            <param name="min">Lower bound of the segment</param>
            <param name="max">Upper bound of the segment</param>
        </member>
        <member name="P:UMapx.Core.RangeInt.Min">
            <summary>
            Gets or sets the lower bound of the line segment.
            </summary>
        </member>
        <member name="P:UMapx.Core.RangeInt.Max">
            <summary>
            Gets or sets the upper bound of the line segment.
            </summary>
        </member>
        <member name="M:UMapx.Core.RangeInt.IsOnRange(System.Int32)">
            <summary>
            Checks if the value is in the specified interval.
            </summary>
            <param name="x">Number</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.ToString">
            <summary>
            Converts RangeInt to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type RangeInt.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.op_Equality(UMapx.Core.RangeInt,UMapx.Core.RangeInt)">
            <summary>
            Checks if two RangeDouble objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.op_Inequality(UMapx.Core.RangeInt,UMapx.Core.RangeInt)">
            <summary>
            Checks if two RangeDouble objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.System#ICloneable#Clone">
            <summary>
            Creates a copy of RangeInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.RangeInt.Clone">
            <summary>
            Creates a copy of RangeInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.SizeDouble">
            <summary>
            Defines a pair of double numbers representing an ordered pair of width and height.
            </summary>
        </member>
        <member name="M:UMapx.Core.SizeDouble.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a pair of double numbers representing an ordered pair of width and height.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="P:UMapx.Core.SizeDouble.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:UMapx.Core.SizeDouble.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="M:UMapx.Core.SizeDouble.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.SizeDouble.ToString">
            <summary>
            Converts a SizeDouble to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.SizeDouble.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type SizeDouble.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeDouble.op_Equality(UMapx.Core.SizeDouble,UMapx.Core.SizeDouble)">
            <summary>
            Checks if two SizeDouble objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeDouble.op_Inequality(UMapx.Core.SizeDouble,UMapx.Core.SizeDouble)">
            <summary>
            Checks if two SizeDouble objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeDouble.System#ICloneable#Clone">
            <summary>
            Creates a copy of SizeDouble.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.SizeDouble.Clone">
            <summary>
            Creates a copy of SizeDouble.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.SizeInt">
            <summary>
            Defines a pair of integer numbers representing an ordered pair of width and height.
            </summary>
        </member>
        <member name="M:UMapx.Core.SizeInt.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a pair of integer numbers representing an ordered pair of width and height.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="P:UMapx.Core.SizeInt.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:UMapx.Core.SizeInt.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="M:UMapx.Core.SizeInt.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.ToString">
            <summary>
            Converts a SizeInt to its corresponding string representation.
            </summary>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance is equal to the specified value of type SizeInt.
            </summary>
            <param name="obj">Object</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.op_Equality(UMapx.Core.SizeInt,UMapx.Core.SizeInt)">
            <summary>
            Checks if two SizeInt objects are equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.op_Inequality(UMapx.Core.SizeInt,UMapx.Core.SizeInt)">
            <summary>
            Checks if two SizeInt objects are not equal.
            </summary>
            <param name="a">Pair of numbers</param>
            <param name="b">Pair of numbers</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.System#ICloneable#Clone">
            <summary>
            Creates a copy of SizeInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="M:UMapx.Core.SizeInt.Clone">
            <summary>
            Creates a copy of SizeInt.
            </summary>
            <returns>Pair of numbers</returns>
        </member>
        <member name="T:UMapx.Core.Special">
            <summary>
            Uses to implement special mathematical functions.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Special_functions
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.LogMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.LogMin">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.sqrtPI">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Core.Special.Ci(System.Double)">
            <summary>
            Returns the value of the integral cosine.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Si(System.Double)">
            <summary>
            Returns the value of the integral sine.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Ei(System.Double)">
            <summary>
            Returns the value of an integral exponential function.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Li(System.Double)">
            <summary>
            Returns the value of the integral logarithm.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Fresnelc(System.Double)">
            <summary>
            Returns the value of the Fresnel integral C (x).
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Fresnels(System.Double)">
            <summary>
            Returns the value of the Fresnel integral S(x).
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.H(System.Double,System.Int32)">
            <summary>
            Returns the value of the Struve function.
            </summary>
            <param name="x">Number</param>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.L(System.Double,System.Int32)">
            <summary>
            Returns the value of the modified Struve function.
            </summary>
            <param name="x">Number</param>
            <param name="v">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Beta(System.Double,System.Double)">
            <summary>
            Returns the value of the beta function: B(a, b) = Г(a) * Г(b) / Г(ab).
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Beta(System.Int32,System.Int32)">
            <summary>
            Returns the value of the beta function: B(m, n) = (m - 1)! * (n - 1)! / (m + n - 1)!.
            </summary>
            <param name="m">Integer number</param>
            <param name="n">Integer number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Beta(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of an incomplete beta function: Bx(a, b).
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.BetaDerivative(System.Double,System.Double)">
            <summary>
            Returns the value of a derivative beta function: B'(a, b).
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.BetaIncomplete(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of a regularized incomplete beta function: Ix(a, b).
            </summary>
            <param name="a">Number</param>
            <param name="b">Number</param>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Incbcf(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Special.Incbd(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Special.Series(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="F:UMapx.Core.Special.GammaMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.Px">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.Qx">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Core.Special.Gamma(System.Double)">
            <summary>
            Returns the value of the Euler Gamma function: Г(z).
            </summary>
            <param name="z">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaLog(System.Double)">
            <summary>
            Returns the value of the natural logarithm of the Euler Gamma function: ln[Г(z)].
            </summary>
            <param name="z">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.DiGamma(System.Double)">
            <summary>
            Returns the value of the Digamma function: ψ(z).
            </summary>
            <param name="z">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.TriGamma(System.Double)">
            <summary>
            Returns the value of the Trigamma function: ψ1(z).
            </summary>
            <param name="z">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gamma(System.Double,System.UInt32)">
            <summary>
            Returns the value of the degree of the Euler Gamma function: Г(z)^p.
            </summary>
            <param name="z">Number</param>
            <param name="p">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaQ(System.Double,System.Double)">
            <summary>
            Returns the value of the incomplete upper Gamma function: Q(s, x) = Γ(s, x) / Γ(s).
            </summary>
            <param name="s">Number</param>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaP(System.Double,System.Double)">
            <summary>
            Returns the value of an incomplete lower Gamma function: P(s, x) = γ(s, x) / Γ(s).
            </summary>
            <param name="s">Number</param>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaIncomplete(System.Double,System.Double)">
            <summary>
            Returns the value of an incomplete Gamma function: γ(s, x).
            </summary>
            <param name="s">Number</param>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaIncomplete(System.Double,System.Double,System.Boolean)">
            <summary>
            Returns the value of an incomplete Gamma function: γ(s, x).
            </summary>
            <param name="s">Number</param>
            <param name="x">Number</param>
            <param name="complemented">Additional function or not</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Polynomials(System.Double,System.Double[],System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="coef"></param>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Special.Stirling(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Special.GammaLogLanczos(System.Double)">
            <summary>
            
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(System.Double)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(System.Double,System.Boolean)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="inverse">Reverse function or not</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfi(System.Double)">
            <summary>
            Returns the value of the imaginary error function.
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="a">The lower boundary of the normalization</param>
            <param name="b">The upper limit of the normalization</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erf(System.Double,UMapx.Core.RangeDouble)">
            <summary>
            Returns the value of the Laplace integral (error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="range">A pair of fractional numbers</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfc(System.Double)">
            <summary>
            Returns the value of the Laplace integral (an additional error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfc(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of the Laplace integral (an additional error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="a">The lower boundary of the normalization</param>
            <param name="b">The upper limit of the normalization</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erfc(System.Double,UMapx.Core.RangeDouble)">
            <summary>
            Returns the value of the Laplace integral (an additional error function).
            </summary>
            <param name="x">The value of the upper limit of the integral</param>
            <param name="range">A pair of fractional numbers</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Q(System.Double,System.Boolean)">
            <summary>
            Returns the value of a Q function.
            </summary>
            <param name="x">Argument</param>
            <param name="inverse">Inverse function or not</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.J0(System.Double)">
            <summary>
            Returns the value of the Bessel function of the first kind at a = 0.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.J1(System.Double)">
            <summary>
            Returns the value of the Bessel function of the first kind at a = 1.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.J(System.Double,System.Int32)">
            <summary>
            Returns the value of a Bessel function of the first kind.
            </summary>
            <param name="x">Number</param>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Y0(System.Double)">
            <summary>
            Returns the value of the Bessel function of the second kind at a = 0.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Y1(System.Double)">
            <summary>
            Returns the value of the Bessel function of the second kind at a = 1.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Y(System.Double,System.Int32)">
            <summary>
            Returns the value of a Bessel function of the second kind.
            </summary>
            <param name="x">Number</param>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.I0(System.Double)">
            <summary>
            Returns the value of the modified Bessel function of the first kind at a = 0.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.I1(System.Double)">
            <summary>
            Returns the value of the modified Bessel function of the first kind at a = 1.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.I(System.Double,System.Int32)">
            <summary>
            Returns the value of the modified Bessel function of the first kind.
            </summary>
            <param name="x">Number</param>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.K0(System.Double)">
            <summary>
            Returns the value of the modified Bessel function of the second kind at a = 0.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.K1(System.Double)">
            <summary>
            Returns the value of the modified Bessel function of the second kind at a = 1.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.K(System.Double,System.Int32)">
            <summary>
            Returns the value of the modified Bessel function of the second kind.
            </summary>
            <param name="x">Number</param>
            <param name="a">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Owen(System.Double,System.Double)">
            <summary>
            Returns the value of the Owen T function.
            </summary>
            <param name="h">First argument</param>
            <param name="a">Second argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.owenhaah(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of the Owen T function.
            </summary>
            <param name="h">First argument</param>
            <param name="a">Second argument</param>
            <param name="ah">h * a</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="F:UMapx.Core.Special.arange">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.coefT">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.hrange">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.meth">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.ord">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.pts">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.select">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.wts">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Core.Special.Agd(System.Double)">
            <summary>
            Returns the value of the inverse Guderman function.
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gd(System.Double)">
            <summary>
            Returns the value of the Guderman function.
            </summary>
            <param name="x">Angle in radians</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Cas(System.Double)">
            <summary>
            Returns the value of the function Cas(x).
            </summary>
            <param name="theta">Theta</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Sinc(System.Double)">
            <summary>
            Returns the value of the normalized cardinal sine function: f(x) = sin(πx) / (πx).
            </summary>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Sinc(System.Double,System.Double)">
            <summary>
            Returns the value of the cardinal sine function with the parameter: f(x, a) = sin(ax) / (ax).
            </summary>
            <param name="x">Number</param>
            <param name="a">Parameter</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Binomial(System.Double,System.Double)">
            <summary>
            Returns the value of binomial coefficients: C(n, k) = n! / k! / (n-k)! для k > 0.
            </summary>
            <param name="n">Number</param>
            <param name="k">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.LogBinomial(System.Double,System.Double)">
            <summary>
            Returns the natural logarithm of binomial coefficients: log(C(n, k)) = log(n!) - log(k!) - log(n-k!).
            </summary>
            <param name="n">Number</param>
            <param name="k">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.LogFactorial(System.Double)">
            <summary>
            Returns the natural logarithm of the factorial of a number log(n!).
            </summary>
            <param name="n">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Factorial(System.Double)">
            <summary>
            Returns the factorial of a number.
            </summary>
            <param name="n">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.FactorialDown(System.Double,System.Double)">
            <summary>
            Returns the decreasing factorial of a number.
            </summary>
            <param name="n">Number</param>
            <param name="k">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.FactorialUp(System.Double,System.Double)">
            <summary>
            Returns the increasing factorial of a number (Pohhammer symbol).
            </summary>
            <param name="n">Number</param>
            <param name="k">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Fibonacci(System.Int32)">
            <summary>
            Returns the value of the Fibonacci number.
            </summary>
            <param name="n">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Lucas(System.Int32)">
            <summary>
            Returns the value of the Luca number.
            </summary>
            <param name="n">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Bernoulli(System.Int32)">
            <summary>
            Returns the Bernoulli number.
            </summary>
            <param name="n">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Bernoulli(System.Int32,System.Double)">
            <summary>
            Returns the value of the Bernoulli polynomial.
            </summary>
            <param name="n">Order</param>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Euler(System.Int32)">
            <summary>
            Returns the Euler number.
            </summary>
            <param name="n">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Euler(System.Int32,System.Double)">
            <summary>
            Returns the value of the Euler polynomial.
            </summary>
            <param name="n">Order</param>
            <param name="x">Number</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Harm(System.Int32)">
            <summary>
            Returns the harmonic number.
            </summary>
            <param name="n">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Harm(System.Int32,System.Double)">
            <summary>
            Returns the harmonic number.
            </summary>
            <param name="n">Order</param>
            <param name="m">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.ChebyshevT(System.Double,System.Int32)">
            <summary>
            Returns the value of the Chebyshev polynomial of the first kind.
            </summary>
            <param name="x">Argument</param>
            <param name="n">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.ChebyshevU(System.Double,System.Int32)">
            <summary>
            Returns the value of the Chebyshev polynomial of the second kind.
            </summary>
            <param name="x">Argument</param>
            <param name="n">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Abel(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the value of the Abel polynomial.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Power</param>
            <param name="n">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Laguerre(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the value of the Laguerre polynomial.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Power</param>
            <param name="k">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Legendre(System.Double,System.Int32)">
            <summary>
            Returns the value of the Legendre polynomial of the first kind.
            </summary>
            <param name="x">Argument</param>
            <param name="m">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Hermite(System.Double,System.Int32)">
            <summary>
            Returns the value of the Hermite polynomial.
            </summary>
            <param name="x">Argument</param>
            <param name="m">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gegenbauer(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the value of the Gegenbauer polynomial.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Power</param>
            <param name="n">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Mahler(System.Double,System.Double)">
            <summary>
            Returns the value of the Mahler polynomial.
            </summary>
            <param name="x">Number</param>
            <param name="t">Parameter</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gompertz(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the value of the Gompertz function.
            </summary>
            <param name="t">Argument</param>
            <param name="a">Upper asymptote</param>
            <param name="b">Growth parameter</param>
            <param name="c">Growth rate</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Heaviside(System.Double,System.Double)">
            <summary>
            Returns the value of the Heaviside delta function.
            </summary>
            <param name="x">Argument</param>
            <param name="k">Smoothing factor</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Logistic(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Lower asymptote</param>
            <param name="k">Upper asymptote</param>
            <param name="b">Growth rate</param>
            <param name="v">Affect</param>
            <param name="q">Central moment</param>
            <param name="c">Offset</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Logistic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Lower asymptote</param>
            <param name="k">Upper asymptote</param>
            <param name="b">Growth rate</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Logistic(System.Double)">
            <summary>
            Returns the value of a logistic function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Dirac(System.Double,System.Double)">
            <summary>
            Returns the value of the Dirac delta function.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Coefficient</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Dawson(System.Double,System.Boolean)">
            <summary>
            Returns the value of the D- / D + Dawson function.
            </summary>
            <param name="x">Argument</param>
            <param name="positive">D- или D+</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Hypergeom(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of a hypergeometric function.
            <remarks>
            This version of the hypergeometric function is found in the Russian literature and is indicated: F(a,b,c,z).
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hypergeometric_function
            </remarks>
            </summary>
            <param name="a">Parameter</param>
            <param name="b">Parameter</param>
            <param name="c">Parameter</param>
            <param name="z">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Hypergeom(System.Double,System.Double,System.Double)">
            <summary>
            Returns the value of a hypergeometric function.
            <remarks>
            The hypergeometric function can be used in several variations:
            F(a,b,z); F(a,~,z); F(~,b,z); F(~,~,z).
            Instead of the “~” sign, use the double.NaN value.
            More information can be found on the website:
            https://www.mathworks.com/help/symbolic/hypergeom.html#bt1nkmw-2
            </remarks>
            </summary>
            <param name="a">Parameter</param>
            <param name="b">Parameter</param>
            <param name="z">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gerf(System.Double,System.Int32)">
            <summary>
            Returns the value of the generalized error function.
            </summary>
            <param name="x">Argument (0, +inf)</param>
            <param name="n">Order [0, +inf)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Gerf(System.Double)">
            <summary>
            Returns the value of the generalized error function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Rademacher(System.Double,System.Int32)">
            <summary>
            Returns the value of the Radamecher function.
            </summary>
            <param name="t">Argument [0, 1]</param>
            <param name="n">Order</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erlang(System.Double,System.Int32,System.Double)">
            <summary>
            Returns the value of the Erlang C-function.
            </summary>
            <param name="y">Firset parameter</param>
            <param name="v">Second parameter</param>
            <param name="t">Time parameter</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Erlang(System.Double,System.Int32)">
            <summary>
            Returns the value of the Erlang B-function.
            </summary>
            <param name="y">Firset parameter</param>
            <param name="v">Second parameter</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.LambertW(System.Double,System.Boolean)">
            <summary>
            Returns the value of the Lambert W-function.
            </summary>
            <param name="x">Argument [-1/e,+inf)</param>
            <param name="branch">Function branch</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Ssqrt(System.Double,System.Boolean)">
            <summary>
            Returns the value of the square super-root.
            </summary>
            <param name="x">Argument [1,+inf)</param>
            <param name="branch">Function branch</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Core.Special.Minkowski(System.Double)">
            <summary>
            Returns the value of the Minkowski function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="F:UMapx.Core.Special.A027641">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.A000142">
            <summary>
            
            </summary>
        </member>
        <member name="F:UMapx.Core.Special.A122045">
            <summary>
            
            </summary>
        </member>
        <member name="T:UMapx.Core.StringOptions">
            <summary>
            Defines a class of string operations.
            </summary>
        </member>
        <member name="P:UMapx.Core.StringOptions.C">
            <summary>
            Complex number format.
            </summary>
        </member>
        <member name="P:UMapx.Core.StringOptions.Q">
            <summary>
            Quaternion format.
            </summary>
        </member>
        <member name="M:UMapx.Core.StringOptions.Disp(System.Double[],System.String,System.String[])">
            <summary>
            The function of converting an array of numbers to a string.
            </summary>
            <param name="v">Array</param>
            <param name="format">Format string</param>
            <param name="symbol">String array</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.StringOptions.Disp(System.Double,System.String,System.Boolean,System.String)">
            <summary>
            The function of converting number to a string
            </summary>
            <param name="v">Number</param>
            <param name="format">Format string</param>
            <param name="s">First in a row or not</param>
            <param name="symbol">Symbol</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="M:UMapx.Core.StringOptions.Matpar(System.String)">
            <summary>
            Defines a general method for casting the original row to the matrix form.
            </summary>
            <param name="s">Input string</param>
            <returns>String array</returns>
        </member>
        <member name="M:UMapx.Core.StringOptions.Compar(System.String)">
            <summary>
            Translates the original string to complex number.
            <remarks>
            Example: "1 + 2i", "0.321 + 11i", ".1i".
            </remarks>
            </summary>
            <param name="s">Input string</param>
            <returns>Text as a sequence of Unicode characters</returns>
        </member>
        <member name="T:UMapx.Core.Xml">
            <summary>
            Uses for Xml serialization of objects.
            </summary>
        </member>
        <member name="M:UMapx.Core.Xml.Save(System.IO.Stream,System.Object)">
            <summary>
            Save data from the file.
            </summary>
            <param name="stream">Stream</param>
            <param name="o">Object</param>
        </member>
        <member name="M:UMapx.Core.Xml.Save(System.String,System.Object)">
            <summary>
            Save data from the file.
            </summary>
            <param name="fileName">File name</param>
            <param name="o">Object</param>
        </member>
        <member name="M:UMapx.Core.Xml.Load(System.IO.Stream,System.Type)">
            <summary>
            Load data from the file.
            </summary>
            <param name="stream">Stream</param>
            <param name="type">Type</param>
        </member>
        <member name="M:UMapx.Core.Xml.Load(System.String,System.Type)">
            <summary>
            Load data from the file.
            </summary>
            <param name="fileName">File name</param>
            <param name="type">Type</param>
        </member>
        <member name="T:UMapx.Decomposition.Arnoldi">
            <summary>
            Defines Arnoldi transform.
            <remarks>
            This transformation is used to reduce the square matrix to the Hessenberg form.
            The matrix A is represented as the product of three matrices: A = Q * H * Q', where H is the upper Hessenberg triangular matrix, Q is the orthogonal matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Arnoldi_iteration
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Arnoldi.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes Arnoldi transformation.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Arnoldi.Q">
            <summary>
            Returns the orthogonal matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Arnoldi.H">
            <summary>
            Returns the upper triangular Hessenberg matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Arnoldi.arnoldi(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="n"></param>
            <param name="m"></param>
        </member>
        <member name="T:UMapx.Decomposition.Cholesky">
            <summary>
            Defines Cholesky decomposition.
            <remarks>
            This is a representation of a symmetric positive definite square matrix in the form of a product: A = L * L ', where L is a lower triangular matrix with strictly positive elements on the diagonal.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cholesky_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Cholesky.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes Cholesky decomposition.
            </summary>
            <param name="A">Square symmetric positive definite matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Cholesky.L">
            <summary>
            Gets the lower triangular matrix L.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Cholesky.U">
            <summary>
            Gets the upper triangular matrix U.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Cholesky.chol(System.Double[][])">
            <summary>
            
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:UMapx.Decomposition.Diagonal">
            <summary>
            Defines diagonal decomposition.
            <remarks>
            This is a representation of the square matrix A as the product of two matrices: A = B * D, where B is the Square matrix and D is the diagonal matrix.
            This decomposition is used to highlight diagonal matrices in other decompositions (for example, LDU-, LDL-decompositions).
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Diagonal.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes diagonal decomposition.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Diagonal.B">
            <summary>
            Gets the square matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Diagonal.D">
            <summary>
            Gets the vector of diagonal elements.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.EVD">
            <summary>
            Defines eigenvalue decomposition.
            <remarks>
            The eigenvalue decomposition is the representation of the square matrix A in the form of the product of three matrices A = V * D * inv (V), where V is the matrix of spectral vectors and D is the diagonal (generally complex) matrix of eigenvalues.
            The matrix A can also be represented as the product of three matrices: A = V * R * inv (V), where R is a real almost diagonal eigenvalue matrix.
            Not all matrices can be represented in this form, but only those that have a complete set of eigenvectors.
            Eigenvalue decomposition can be used to find the eigenvalues ​​and eigenvectors of the matrix, solve linear systems of equations, invert the matrix, find the determinant of the matrix, and calculate the analytic functions of the matrices.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.#ctor(System.Double[0:,0:],System.Double)">
            <summary>
            Initializes eigenvalue decomposition.
            </summary>
            <param name="A">Square matrix</param>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Decomposition.EVD.V">
            <summary>
            Gets eigenvectors.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.EVD.D">
            <summary>
            Gets eigenvalues.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.EVD.R">
            <summary>
            Gets the real diagonal eigenvalue matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.EVD.H">
            <summary>
            Gets the Hessenberg form.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.tred2">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.tql2">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.orthes">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.hqr2">
            <summary>
            
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.EVD.cdiv(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="xr"></param>
            <param name="xi"></param>
            <param name="yr"></param>
            <param name="yi"></param>
            <param name="cdivr"></param>
            <param name="cdivi"></param>
        </member>
        <member name="T:UMapx.Decomposition.GEVD">
            <summary>
            Defines generalized eigenvalue decomposition.
            <remarks>
            It is the task of finding a vector of values of V such that the representation: A * V = B * V * D.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix#Generalized_eigenvalue_problem
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.#ctor(System.Double[0:,0:],System.Double[0:,0:],System.Double)">
            <summary>
            Initializes generalized eigenvalue decomposition.
            </summary>
            <param name="a">Matrix A</param>
            <param name="b">Matrix B</param>
            <param name="eps">Epsilon [0, 1]</param>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.Alpha">
            <summary>
            Returns vector α.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.Beta">
            <summary>
            Returns vector β.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.Eigenvalues">
            <summary>
            Returns a vector of eigenvalues.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.D">
            <summary>
            Returns an eigenvalue matrix D.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.V">
            <summary>
            Returns a matrix of values V.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.GEVD.IsSingular">
            <summary>
            Checks whether one of the matrices is singular or not.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.qzhes(System.Int32,System.Double[][],System.Double[][],System.Boolean,System.Double[][])">
             <summary>
               Adaptation of the original Fortran QZHES routine from EISPACK.
             </summary>
             <remarks>
               This subroutine is the first step of the qz algorithm
               for solving generalized matrix eigenvalue problems,
               Siam J. Numer. anal. 10, 241-256(1973) by Moler and Stewart.
            
               This subroutine accepts a pair of real general matrices and
               reduces one of them to upper Hessenberg form and the other
               to upper triangular form using orthogonal transformations.
               it is usually followed by  qzit,  qzval  and, possibly,  qzvec.
               
               For the full documentation, please check the original function.
             </remarks>
             <param name="n"></param>
             <param name="a"></param>
             <param name="b"></param>
             <param name="matz"></param>
             <param name="z"></param>
             <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.qzit(System.Int32,System.Double[][],System.Double[][],System.Double,System.Boolean,System.Double[][],System.Int32@)">
            <summary>
              Adaptation of the original Fortran QZIT routine from EISPACK.
            </summary>
            <remarks>
              This subroutine is the second step of the qz algorithm
              for solving generalized matrix eigenvalue problems,
              Siam J. Numer. anal. 10, 241-256(1973) by Moler and Stewart,
              as modified in technical note nasa tn d-7305(1973) by ward.
              
              This subroutine accepts a pair of real matrices, one of them
              in upper Hessenberg form and the other in upper triangular form.
              it reduces the Hessenberg matrix to quasi-triangular form using
              orthogonal transformations while maintaining the triangular form
              of the other matrix.  it is usually preceded by  qzhes  and
              followed by  qzval  and, possibly,  qzvec.
              
              For the full documentation, please check the original function.
            </remarks>
            <param name="n"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="eps1"></param>
            <param name="matz"></param>
            <param name="z"></param>
            <param name="ierr"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.qzval(System.Int32,System.Double[][],System.Double[][],System.Double[],System.Double[],System.Double[],System.Boolean,System.Double[][])">
            <summary>
              Adaptation of the original Fortran QZVAL routine from EISPACK.
            </summary>
            <remarks>
              This subroutine is the third step of the qz algorithm
              for solving generalized matrix eigenvalue problems,
              Siam J. Numer. anal. 10, 241-256(1973) by Moler and Stewart.
              
              This subroutine accepts a pair of real matrices, one of them
              in quasi-triangular form and the other in upper triangular form.
              it reduces the quasi-triangular matrix further, so that any
              remaining 2-by-2 blocks correspond to pairs of complex
              Eigenvalues, and returns quantities whose ratios give the
              generalized eigenvalues.  it is usually preceded by  qzhes
              and  qzit  and may be followed by  qzvec.
              
              For the full documentation, please check the original function.
            </remarks>
            <param name="n"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="alfr"></param>
            <param name="alfi"></param>
            <param name="beta"></param>
            <param name="matz"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.qzvec(System.Int32,System.Double[][],System.Double[][],System.Double[],System.Double[],System.Double[],System.Double[][])">
            <summary>
              Adaptation of the original Fortran QZVEC routine from EISPACK.
            </summary>
            <remarks>
              This subroutine is the optional fourth step of the qz algorithm
              for solving generalized matrix eigenvalue problems,
              Siam J. Numer. anal. 10, 241-256(1973) by Moler and Stewart.
              
              This subroutine accepts a pair of real matrices, one of them in
              quasi-triangular form (in which each 2-by-2 block corresponds to
              a pair of complex eigenvalues) and the other in upper triangular
              form.  It computes the eigenvectors of the triangular problem and
              transforms the results back to the original coordinate system.
              it is usually preceded by  qzhes,  qzit, and  qzval.
              
              For the full documentation, please check the original function.
            </remarks>
            <param name="n"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="alfr"></param>
            <param name="alfi"></param>
            <param name="beta"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.Epsilon(System.Double)">
            <summary>
              Estimates unit round-off in quantities of size x.
            </summary>
            <remarks>
              This is a port of the epslon function from EISPACK.
            </remarks>
            
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Decomposition.GEVD.Sign(System.Double,System.Double)">
            <summary>
              Returns <paramref name="a"/> with the sign of <paramref name="b"/>. 
            </summary>
            
            <remarks>
              This is a port of the sign transfer function from EISPACK,
              and is is equivalent to C++'s std::copysign function.
            </remarks>
            
            <returns>If B > 0 then the result is ABS(A), else it is -ABS(A).</returns>
            
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="T:UMapx.Decomposition.GramSchmidt">
            <summary>
            Defines the Gram-Schmidt orthogonalization process.
            <remarks>
            In mathematics, in particular linear algebra and numerical analysis, the Gram-Schmidt process is a method of orthonormalizing a set of vectors
            in the space of internal works. This procedure is actively used for orthogonalization of bases.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.GramSchmidt.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes the Gram-Schmidt orthogonalization process.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.GramSchmidt.Q">
            <summary>
            Gets the orthogonal matrix Q.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.GramSchmidt.Proj(System.Double[],System.Double[])">
            <summary>
            Returns the projection of horizontal vectors.
            proj[e, a]' = (e * a') / (e * e') .* e
            </summary>
            <param name="e">Array</param>
            <param name="a">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Decomposition.GramSchmidt.Proj(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            Returns the projection of horizontal vectors.
            proj[e, a]' = (e * a') / (e * e') .* e
            </summary>
            <param name="e">Array</param>
            <param name="a">Array</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Decomposition.Hessenberg">
            <summary>
            Defines decomposition with a cast to Hessenberg form.
            <remarks>
            This is a representation of a square matrix in the form of a product of three matrices: A = P * H * P', where H is the Hessenberg form and P is the unitary matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hessenberg_matrix
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Hessenberg.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes decomposition to a Hessenberg form.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Hessenberg.P">
            <summary>
            Gets the unitary matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Hessenberg.H">
            <summary>
            Gets the Hessenberg form.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Hessenberg.orthes(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="A"></param>
        </member>
        <member name="T:UMapx.Decomposition.Householder">
            <summary>
            Defines Householder transformation.
            <remarks>
            This is a linear transformation H (u) of the vector space V, which describes its mapping with respect to the hyperplane,
            which passes through the origin. It was proposed in 1958 by the American mathematician Elston Scott Householder. Widely used in linear algebra for QR decomposition of a matrix.
            In addition, the Householder transform is actively used for orthogonalization of bases; ultimately, the Householder matrix has the following properties:
            H = H', H' * H = I; det(H) = -1.
            In this class, two types of the Householder transform are implemented: reduction to a three-diagonal matrix and construction of the Householder matrix from a given vector.
            In the first case, the original Square matrix is defined as: A = H * T * H '.
            More information can be found on the website: 
            https://en.wikipedia.org/wiki/Householder_transformation
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Householder.#ctor(System.Double[])">
            <summary>
            Initializes Householder transformation.
            </summary>
            <param name="v">Array</param>
        </member>
        <member name="M:UMapx.Decomposition.Householder.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes Householder transformation.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.Householder.H">
            <summary>
            Returns the Householder matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Householder.T">
            <summary>
            Gets the diagonal matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Householder.hmatx(System.Double[])">
            <summary>
            
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:UMapx.Decomposition.Householder.tred2(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:UMapx.Decomposition.Lanczos">
            <summary>
            Defines Lanczos transform.
            <remarks>
            This transformation is used to represent the symmetric matrix A as a product
            of three matrices: A = Q * T * Q', where T is a tridiagonal matrix, and Q is an orthogonal matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Lanczos_algorithm
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Lanczos.#ctor(System.Double[0:,0:],System.Boolean)">
            <summary>
            Initializes Lanczos transformation.
            </summary>
            <param name="A">Symmetric matrix</param>
            <param name="full">Full reorthogonalization or not</param>
        </member>
        <member name="P:UMapx.Decomposition.Lanczos.Q">
            <summary>
            Returns the orthogonal matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Lanczos.T">
            <summary>
            Returns a tridiagonal matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Lanczos.lanczos(System.Double[0:,0:],System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="n"></param>
            <param name="full"></param>
        </member>
        <member name="T:UMapx.Decomposition.LDL">
            <summary>
            Defines LDL decomposition.
            <remarks>
            This is a representation of a symmetric positive definite square matrix in the form of a product of three matrices: A = L * D * L ', where L is a lower triangular matrix with strictly positive elements on the diagonal,
            and D is the diagonal matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cholesky_decomposition#LDL_decomposition_2
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.LDL.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes LDL decomposition.
            </summary>
            <param name="A">Square symmetric positive definite matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.LDL.L">
            <summary>
            Gets the lower triangular matrix L.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LDL.U">
            <summary>
            Gets the upper triangular matrix U.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LDL.D">
            <summary>
            Gets the diagonal matrix.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.LDU">
            <summary>
            Defines LDU decomposition.
            <remarks>
            This is the representation of a square matrix A as the product of three matrices: A = L * D * U, where L is the lower triangular matrix, D is the diagonal matrix, and U is the upper triangular matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/LU_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.LDU.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes LDU decomposition.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.LDU.L">
            <summary>
            Gets the lower triangular matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LDU.U">
            <summary>
            Gets the upper triangular matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LDU.D">
            <summary>
            Gets the vector of diagonal elements.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.LQ">
            <summary>
            Defines LQ decomposition.
            <remarks>
            This is the representation of a matrix in the form of a product of two matrices: A = L * Q, where Q is a unitary (or orthogonal) matrix, and L is a lower triangular matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/QR_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.LQ.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes LQ decomposition.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.LQ.L">
            <summary>
            Returns the lower triangular matrix L.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LQ.Q">
            <summary>
            Returns the orthogonal matrix Q.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.LU">
            <summary>
            Defines LU decomposition.
            <remarks>
            This is a representation of the square matrix A as the product of two matrices: A = L * U, where L is the lower triangular matrix, U is the upper triangular matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/LU_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.LU.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes LU decomposition.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.LU.L">
            <summary>
            Gets the lower triangular matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.LU.U">
            <summary>
            Gets the upper triangular matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.LU.ludecomp(System.Double[][])">
            <summary>
            
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:UMapx.Decomposition.NMF">
            <summary>
            Defines non-negative matrix factorization.
            <remarks>
            This is a representation of a rectangular matrix A as the product of two matrices: A = W * H.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Non-negative_matrix_factorization
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.NMF.#ctor(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Initializes non-negative matrix factorization.
            </summary>
            <param name="A">Non-negative matrix</param>
            <param name="r">The dimension of new matrices</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="P:UMapx.Decomposition.NMF.W">
            <summary>
            Gets the left matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.NMF.H">
            <summary>
            Gets the right matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.NMF.nnmf(System.Double[0:,0:],System.Int32)">
            <summary>
            
            </summary>
            <param name="A"></param>
            <param name="iterations"></param>
        </member>
        <member name="T:UMapx.Decomposition.Polar">
            <summary>
            Defines polar decomposition.
            <remarks>
            This is a representation of a rectangular matrix A in the form of a product of two matrices: A = U * P, where U is a unitary matrix, P is a positive definite matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Polar_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Polar.#ctor(System.Double[0:,0:],System.Int32)">
            <summary>
            Initializes polar decomposition.
            </summary>
            <param name="A">Matrix</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="P:UMapx.Decomposition.Polar.U">
            <summary>
            Gets the unitary matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Polar.P">
            <summary>
            Gets a positive definite matrix.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.Power">
            <summary>
            Defines power iteration.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Power_iteration
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.Power.#ctor(System.Double[0:,0:],System.Int32)">
            <summary>
            Initializes power iteration.
            </summary>
            <param name="A">Matrix</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="P:UMapx.Decomposition.Power.V">
            <summary>
            Returns a vector of eigenvalues.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.Power.J">
            <summary>
            Returns the diagonalized matrix of eigenvalues.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.QL">
            <summary>
            Defines the QL decomposition of a square matrix.
            <remarks>
            This is a representation of a matrix in the form of a product of two matrices: A = Q * L, where Q is a unitary (or orthogonal) matrix and L is a lower triangular matrix.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/QR_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.QL.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes the QL decomposition of a square matrix.
            </summary>
            <param name="A">Square matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.QL.L">
            <summary>
            Returns the lower triangular matrix L.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.QL.Q">
            <summary>
            Returns the orthogonal matrix Q.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.QR">
            <summary>
            Defines QR decomposition.
            <remarks>
            This is a matrix representation in the form of a product of two matrices: A = Q * R, where Q is a unitary (or orthogonal) matrix, and R is an upper triangular matrix.
            QR decomposition is the basis of one of the search methods for eigenvectors and matrix numbers - the QR algorithm.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/QR_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.QR.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes QR decomposition.
            </summary>
            <param name="A">Matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.QR.H">
            <summary>
            Returns a matrix containing Householder reflection vectors.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.QR.R">
            <summary>
            Returns the upper triangular matrix R.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.QR.Q">
            <summary>
            Returns the orthogonal matrix Q.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.QR.qrdecomp(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="A"></param>
        </member>
        <member name="T:UMapx.Decomposition.RQ">
            <summary>
            Defines RQ decomposition.
            <remarks>
            This is a matrix representation in the form of a product of two matrices: A = R * Q, where Q is a unitary (or orthogonal) matrix, and R is an upper triangular matrix.
            RQ decomposition is one of the modifications of the QR algorithm.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/QR_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.RQ.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes RQ decomposition.
            </summary>
            <param name="A">Matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.RQ.R">
            <summary>
            Returns the lower triangular matrix R.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.RQ.Q">
            <summary>
            Returns the orthogonal matrix Q.
            </summary>
        </member>
        <member name="T:UMapx.Decomposition.SVD">
            <summary>
            Defines singular value decomposition.
            <remarks>
            This is a representation of a rectangular matrix A in the form of the product of three matrices A = U * S * V ', where U are left vectors, V are right vectors, and S are singular values.
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Singular_value_decomposition
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.SVD.#ctor(System.Double[0:,0:],System.Int32)">
            <summary>
            Initializes singular value decomposition.
            </summary>
            <param name="A">Matrix</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="P:UMapx.Decomposition.SVD.U">
            <summary>
            Gets the left vectors.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.SVD.S">
            <summary>
            Gets singular values.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.SVD.V">
            <summary>
            Gets the right vectors.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.SVD.P">
            <summary>
            Gets the pseudoinverse matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.SVD.svdcmp(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="A"></param>
        </member>
        <member name="M:UMapx.Decomposition.SVD.Sign(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Decomposition.UDL">
            <summary>
            Defines UDL decomposition.
            <remarks>
            This is the representation of a symmetric square matrix as the product of three matrices: A = U * D * L, where U is the upper triangular matrix, D is the diagonal matrix, and L is the lower triangular matrix.
            This decomposition is a specific form of Cholesky decomposition.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.UDL.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes UDL decomposition.
            </summary>
            <param name="A">Square symmetric matrix</param>
        </member>
        <member name="P:UMapx.Decomposition.UDL.U">
            <summary>
            Returns the top triangular matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.UDL.D">
            <summary>
            Returns the diagonal matrix.
            </summary>
        </member>
        <member name="P:UMapx.Decomposition.UDL.L">
            <summary>
            Returns the lower triangular matrix.
            </summary>
        </member>
        <member name="M:UMapx.Decomposition.UDL.udldecomp(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:UMapx.Distribution.Arcsine">
            <summary>
            Defines the arcsine distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Arcsine_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Arcsine.#ctor">
            <summary>
            Initializes the arcsine distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Arcsine.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Arcsine.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Arcsine.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Bayes">
            <summary>
            Defines the Bayes probability class.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Bayes.#ctor(System.Double[],System.Double[])">
            <summary>
            Initializes the Bayes probability class.
            </summary>
            <param name="stat">Array of statistical probabilities</param>
            <param name="prior">An array of a priori probabilities (before experiment)</param>
        </member>
        <member name="P:UMapx.Distribution.Bayes.General">
            <summary>
            Returns the value of the total probability.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bayes.Probabilities">
            <summary>
            Returns an array of values of posterior probabilities (after the experiment).
            </summary>
        </member>
        <member name="T:UMapx.Distribution.Bernoulli">
            <summary>
            Defines the distribution of Bernoulli.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Bernoulli_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Bernoulli.#ctor">
            <summary>
            Initializes a Bernoulli distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Bernoulli.#ctor(System.Double)">
            <summary>
            Initializes a Bernoulli distribution.
            </summary>
            <param name="p">Probability of success [0, 1]</param>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.P">
            <summary>
            Gets or sets the probability of success [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Bernoulli.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Bernoulli.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Bernoulli.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Beta">
            <summary>
            Defines the beta distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Beta_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Beta.#ctor">
            <summary>
            Initializes beta distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Beta.#ctor(System.Double,System.Double)">
            <summary>
            Initializes beta distribution.
            </summary>
            <param name="a">Parameter a</param>
            <param name="b">Parameter b</param>
        </member>
        <member name="P:UMapx.Distribution.Beta.A">
            <summary>
            Gets or sets the parameter a.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.B">
            <summary>
            Gets or sets the parameter b.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Beta.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Beta.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Beta.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Beta.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.BetaPrime">
            <summary>
            Defines the beta distribution of the second kind.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Beta_prime_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.BetaPrime.#ctor(System.Double,System.Double)">
            <summary>
            Initializes beta distribution of the second kind.
            </summary>
            <param name="alpha">Parameter α (0, +inf)</param>
            <param name="beta">Parameter β (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Alpha">
            <summary>
            Gets or sets the value of the parameter α ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Beta">
            <summary>
            Gets or sets the value of the parameter β ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BetaPrime.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.BetaPrime.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.BetaPrime.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Binomial">
            <summary>
            Defines the binomial distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Binomial_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Binomial.#ctor">
            <summary>
            Initializes the binomial distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Binomial.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the binomial distribution.
            </summary>
            <param name="n">Number of experiments (>0)</param>
            <param name="p">Probability of success [0, 1]</param>
        </member>
        <member name="P:UMapx.Distribution.Binomial.N">
            <summary>
            Gets or sets number of experiments.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.P">
            <summary>
            Gets or sets probability of success [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Binomial.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Binomial.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Binomial.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.BirnbaumSaunders">
            <summary>
            Defines the Birnbaum-Saunders distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Birnbaum–Saunders_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.BirnbaumSaunders.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the Birnbaum-Saunders distribution.
            </summary>
            <param name="mu">Shear rate μ ∈ (0, +inf)</param>
            <param name="beta">Scale factor β ∈ (0, +inf).</param>
            <param name="gamma">Shape factor γ ∈ (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Mu">
            <summary>
            Gets or sets the shift factor μ ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Beta">
            <summary>
            Gets or sets the scale factor β ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Gamma">
            <summary>
            Gets or sets the form factor γ ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.BirnbaumSaunders.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.BirnbaumSaunders.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.BirnbaumSaunders.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Burr">
            <summary>
            Defines the Burr distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Burr_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Burr.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Burr distribution.
            </summary>
            <param name="c">Form parameter c > 0</param>
            <param name="k">Scale parameter k > 0</param>
        </member>
        <member name="P:UMapx.Distribution.Burr.C">
            <summary>
            Gets or sets the value of the scale parameter c > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.K">
            <summary>
            Gets or sets the value of the scale parameter k > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Burr.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Burr.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Burr.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Cauchy">
            <summary>
            Defines the Cauchy distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cauchy_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Cauchy.#ctor">
            <summary>
            Initializes the Cauchy distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Cauchy.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Cauchy distribution.
            </summary>
            <param name="gamma">Scale factor (0, + inf)</param>
            <param name="x0">Shift coefficient</param>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Gamma">
            <summary>
            Gets or sets the value of the scale factor (0, + inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.X0">
            <summary>
            Gets or sets the value of the shift coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Cauchy.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Cauchy.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Cauchy.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.ChiSquare">
            <summary>
            Defines the xi-square distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Chi-squared_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ChiSquare.#ctor(System.Int32)">
            <summary>
            Initializes the xi-square distribution.
            </summary>
            <param name="k">Degrees of freedom (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.K">
            <summary>
            Gets or sets the degrees of freedom (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChiSquare.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ChiSquare.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.ChiSquare.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.ChoiWilliams">
            <summary>
            Defines the distribution of Choi Williams.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Choi%E2%80%93Williams_distribution_function
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ChoiWilliams.#ctor(System.Double)">
            <summary>
            Initializes the Choi-Williams distribution.
            </summary>
            <param name="a">Coefficient</param>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.A">
            <summary>
            Gets or sets the coefficient value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ChoiWilliams.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ChoiWilliams.Function(System.Double,System.Double)">
            <summary>
            Returns the value of the kernel density function.
            </summary>
            <param name="eta">Argument</param>
            <param name="tau">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.ChoiWilliams.Distribution(System.Double,System.Double)">
            <summary>
            Returns the value of the kernel distribution function.
            </summary>
            <param name="t">Argument</param>
            <param name="tau">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.ConeShape">
            <summary>
            Defines the distribution of the conical shape.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cone-shape_distribution_function
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ConeShape.#ctor(System.Double)">
            <summary>
            Initializes the distribution of the conical shape.
            </summary>
            <param name="a">Coefficient</param>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.A">
            <summary>
            Gets or sets the coefficient value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.ConeShape.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.ConeShape.Function(System.Double,System.Double)">
            <summary>
            Returns the value of the kernel density function.
            </summary>
            <param name="eta">Argument</param>
            <param name="tau">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.ConeShape.Distribution(System.Double,System.Double)">
            <summary>
            Returns the value of the kernel distribution function.
            </summary>
            <param name="t">Argument</param>
            <param name="tau">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Erlang">
            <summary>
            Defines the distribution of Erlang.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Erlang_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Erlang.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the distribution of Erlang.
            </summary>
            <param name="k">Form parameter k ∈ (0, +inf)</param>
            <param name="lambda">λ-parameter λ ∈ (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Erlang.K">
            <summary>
            Gets or sets the value of the parameter k ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Lambda">
            <summary>
            Gets or sets the value of the parameter λ ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Erlang.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Erlang.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Erlang.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Exponential">
            <summary>
            Defines the exponential distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Exponential_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Exponential.#ctor">
            <summary>
            Initializes an exponential distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Exponential.#ctor(System.Double)">
            <summary>
            Initializes an exponential distribution.
            </summary>
            <param name="lambda">Intensity parameter (0, + inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Lambda">
            <summary>
            Gets or sets the value of the intensity parameter (0, + inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Exponential.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Exponential.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Exponential.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.FisherSnedecor">
            <summary>
            Defines the Fisher distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/F-distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.FisherSnedecor.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the Fisher distribution.
            </summary>
            <param name="d1">First degree of freedom</param>
            <param name="d2">Second degree of freedom</param>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.D1">
            <summary>
            Gets the value of the first degree of freedom.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.D2">
            <summary>
            Gets the value of the second degree of freedom.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherSnedecor.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.FisherSnedecor.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.FisherSnedecor.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.FisherZ">
            <summary>
            Defines the Fisher's Z-distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Fisher%27s_z-distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.FisherZ.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Fisher Z-distribution.
            </summary>
            <param name="d1">Degree of freedom d1 > 0</param>
            <param name="d2">Degree of freedom d2 > 0</param>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.D1">
            <summary>
            Gets or sets the degree of freedom d1 > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.D2">
            <summary>
            Gets or sets the degree of freedom d2 > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.FisherZ.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.FisherZ.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.FisherZ.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Gamma">
            <summary>
            Defines the Gamma-distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gamma_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gamma.#ctor">
            <summary>
            Initializes the Gamma-distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gamma.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Gamma-distribution.
            </summary>
            <param name="thetta">Parameter θ (0, +inf)</param>
            <param name="k">Parameter k (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Thetta">
            <summary>
            Gets or sets the parameter θ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.K">
            <summary>
            Gets or sets the parameter k (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gamma.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Gamma.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Gamma.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Gaussian">
            <summary>
            Defines the Gaussian distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Normal_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gaussian.#ctor">
            <summary>
            Initializes the Gaussian distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gaussian.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Gaussian distribution.
            </summary>
            <param name="sigma">Standard deviation</param>
            <param name="mu">Mathematical expectation</param>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Sigma">
            <summary>
            Gets or sets the standard deviation.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Mu">
            <summary>
            Gets or sets the mathematical expectation.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gaussian.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Gaussian.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Gaussian.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Geometric">
            <summary>
            Defines the geometric distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Geometric_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Geometric.#ctor">
            <summary>
            Initializes the geometric distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Geometric.#ctor(System.Double)">
            <summary>
            Initializes the geometric distribution.
            </summary>
            <param name="p">Probability of "success" [0, 1]</param>
        </member>
        <member name="P:UMapx.Distribution.Geometric.P">
            <summary>
            Gets or sets the probability value of "success" [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Geometric.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Geometric.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Geometric.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Gompertz">
            <summary>
            Defines the Gompertz distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gompertz_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gompertz.#ctor(System.Double,System.Double)">
             <summary>
            Initializes the Gompertz distribution.
             </summary>
             <param name="eta">Form parameter η > 0</param>
             <param name="b">Scale parameter b > 0</param>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Eta">
            <summary>
            Gets or sets the value of the scale parameter η > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.B">
            <summary>
            Gets or sets the value of the scale parameter b > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gompertz.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gompertz.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Gompertz.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Gumbel">
            <summary>
            Defines the Gumbel distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gumbel_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gumbel.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Gumbel distribution.
            </summary>
            <param name="mu">Shear rate μ ∈ (-inf, +inf)</param>
            <param name="beta">Scale factor β ∈ (0, +inf).</param>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Mu">
            <summary>
            Gets or sets the shift factor μ ∈ (-inf, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Beta">
            <summary>
            Gets or sets the scale factor β ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Gumbel.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Gumbel.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Gumbel.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.HyperbolicSecant">
            <summary>
            Defines the hyperbolic secant distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hyperbolic_secant_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.HyperbolicSecant.#ctor">
            <summary>
            Initializes the hyperbolic secant distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.HyperbolicSecant.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.HyperbolicSecant.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.HyperbolicSecant.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Hypergeometric">
            <summary>
            Defines the hypergeometric distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hypergeometric_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Hypergeometric.#ctor">
            <summary>
            Initializes the hypergeometric distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Hypergeometric.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the hypergeometric distribution.
            </summary>
            <param name="n">Parameter N [0, +inf]</param>
            <param name="k">Parameter D [0, N]</param>
            <param name="d">Parameter K [0, N]</param>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.N">
            <summary>
            Gets or sets the value of the parameter N [0, +inf].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.D">
            <summary>
            Gets or sets the value of the parameter D [0, N].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.K">
            <summary>
            Gets or sets the value of the parameter k [0, N].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Hypergeometric.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Hypergeometric.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Hypergeometric.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.IDistribution">
            <summary>
            Defines the distribution interface.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.IDistribution.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Kumaraswamy">
            <summary>
            Defines the distribution of Kumaraswa.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Kumaraswamy_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Kumaraswamy.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the distribution of Kumarasva.
            </summary>
            <param name="a">Form parameter a > 0</param>
            <param name="b">Form parameter b > 0</param>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.A">
            <summary>
            Gets or sets form parameter a > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.B">
            <summary>
            Gets or sets form parameter b > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Kumaraswamy.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Kumaraswamy.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Kumaraswamy.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Kumaraswamy.momentGeneratingFunction(System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="n"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Distribution.Laplace">
            <summary>
            Defines the Laplace distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Laplace_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Laplace.#ctor">
            <summary>
            Initializes the Laplace distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Laplace.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Laplace distribution.
            </summary>
            <param name="alfa">Scale factor (0, + inf)</param>
            <param name="beta">Shift coefficient</param>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Alfa">
            <summary>
            Gets or sets the value of the scale factor (0, + inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Beta">
            <summary>
            Gets or sets the value of the shift coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Laplace.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Laplace.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Laplace.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Levy">
            <summary>
            Defines the Levy distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/L%C3%A9vy_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Levy.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Levy distribution.
            </summary>
            <param name="mu">Shear rate μ</param>
            <param name="c">Scale factor (>0)</param>
        </member>
        <member name="P:UMapx.Distribution.Levy.Mu">
            <summary>
            Gets or sets the shift factor.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.C">
            <summary>
            Gets or sets the scale factor (> 0).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Levy.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Levy.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Levy.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Logarithmic">
            <summary>
            Defines the logarithmic distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Logarithmic_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Logarithmic.#ctor(System.Double)">
            <summary>
            Initializes the logarithmic distribution.
            </summary>
            <param name="p">Parameter</param>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.P">
            <summary>
            Gets or sets the value of the parameter p ∈ (0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Logarithmic.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Logarithmic.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Logarithmic.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="T:UMapx.Distribution.LogGaussian">
            <summary>
            Defines the logarithmic Gaussian distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Log-normal_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogGaussian.#ctor">
            <summary>
            Initializes the logarithmic Gaussian distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogGaussian.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the logarithmic Gaussian distribution.
            </summary>
            <param name="sigma">Standard deviation</param>
            <param name="mu">Mathematical expectation</param>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Sigma">
            <summary>
            Gets or sets the standard deviation.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Mu">
            <summary>
            Gets or sets the value of the mathematical expectation.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogGaussian.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.LogGaussian.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.LogGaussian.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Logistic">
            <summary>
            Defines the logistic distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Logistic_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Logistic.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the logistic distribution.
            </summary>
            <param name="mu">Parameter μ</param>
            <param name="s">Parameter s (0, +inf]</param>
        </member>
        <member name="M:UMapx.Distribution.Logistic.#ctor">
            <summary>
            Initializes the logistic distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Mu">
            <summary>
            Gets or sets the value of the parameter μ.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.S">
            <summary>
            Gets or sets the value of the parameter s (0, +inf].
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Logistic.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Logistic.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Logistic.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.LogLogistic">
            <summary>
            Defines the log-logistic distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Log-logistic_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogLogistic.#ctor">
            <summary>
            Initializes the log-logistic distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogLogistic.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the log-logistic distribution.
            </summary>
            <param name="a">Parameter a</param>
            <param name="b">Parameter b</param>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.A">
            <summary>
            Gets or sets the value of parameter a.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.B">
            <summary>
            Gets or sets the value of parameter b.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.LogLogistic.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.LogLogistic.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.LogLogistic.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Nakagami">
            <summary>
            Defines the distribution of Nakagami.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Nakagami_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.#ctor">
             <summary>
            Initializes the distribution of Nakagami.
             </summary>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the distribution of Nakagami.
            </summary>
            <param name="mu">Shape factor</param>
            <param name="omega">Spread rate</param>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.Initialize(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="mu"></param>
            <param name="omega"></param>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Mu">
            <summary>
            Gets or sets the value of the shape factor.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Omega">
            <summary>
            Gets or sets the spread coefficient value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Nakagami.Entropy">
            <summary>
             Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Nakagami.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Pareto">
            <summary>
            Defines the Pareto distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Pareto_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Pareto.#ctor">
            <summary>
            Initializes the Pareto distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Pareto.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Pareto distribution.
            </summary>
            <param name="xm">Scale factor θ (0, +inf)</param>
            <param name="k">Parameter k (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Xm">
            <summary>
            Gets or sets the scale factor Xm (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.K">
            <summary>
            Gets or sets the scale factor k (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Pareto.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Pareto.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Pareto.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Poisson">
            <summary>
            Defines the Poisson distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Poisson_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Poisson.#ctor">
            <summary>
            Initializes the Poisson distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Poisson.#ctor(System.Double)">
            <summary>
            Initializes the Poisson distribution.
            </summary>
            <param name="lambda">Parameter λ (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Lambda">
            <summary>
            Gets or sets the value of the parameter λ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Poisson.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Poisson.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Poisson.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Poisson.Row(System.Double)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Distribution.Rademacher">
            <summary>
            Defines the Rademacher distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Rademacher_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Rademacher.#ctor">
            <summary>
            Initializes the Rademacher distribution.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Rademacher.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Rademacher.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Rademacher.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="T:UMapx.Distribution.Rayleigh">
            <summary>
            Defines the logarithmic distribution of Rayleigh.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Rayleigh_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Rayleigh.#ctor">
            <summary>
            Initializes the Rayleigh logarithmic distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Rayleigh.#ctor(System.Double)">
            <summary>
            Initializes the Rayleigh logarithmic distribution.
            </summary>
            <param name="sigma">Scale parameter</param>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Sigma">
            <summary>
            Gets or sets the value of the scale parameter.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Rayleigh.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Rayleigh.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Rayleigh.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Student">
            <summary>
            Defines the Student's distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Student%27s_t-distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Student.#ctor(System.Double)">
            <summary>
            Initializes the Student's distribution.
            </summary>
            <param name="n">Degrees of freedom n ∈ (0, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Student.N">
            <summary>
            Gets or sets degrees of freedom n ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Student.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Student.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Student.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Student.LogFunction(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Distribution.Triangular">
            <summary>
            Defines the triangular distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Triangular_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Triangular.#ctor">
            <summary>
            Initializes the triangular distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Triangular.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the triangular distribution.
            </summary>
            <param name="a">Parameter a ∈ (-inf, +inf)</param>
            <param name="b">Parameter b ∈ (-inf, +inf)</param>
            <param name="c">Parameter c ∈ (-inf, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Triangular.A">
            <summary>
            Gets or sets the value of the parameter a ∈ (-inf, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.B">
            <summary>
            Gets or sets the value of the parameter b ∈ (-inf, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.C">
            <summary>
            Gets or sets the value of the parameter c ∈ (-inf, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Triangular.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Triangular.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Triangular.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Uniform">
            <summary>
            Defines the uniform distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Uniform.#ctor">
            <summary>
            Initializes the uniform distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Uniform.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the uniform distribution.
            </summary>
            <param name="a">Shift parameter a</param>
            <param name="b">Shift parameter b</param>
        </member>
        <member name="P:UMapx.Distribution.Uniform.A">
            <summary>
            Gets or sets the shift parameter a.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.B">
            <summary>
            Gets or sets the shift parameter b.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Uniform.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Uniform.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Uniform.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.UQuadratic">
            <summary>
            Defines the U-quadratic distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/U-quadratic_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.UQuadratic.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the U-quadratic distribution.
            </summary>
            <param name="a">Parameter a ∈ (0, +inf)</param>
            <param name="b">Parameter b ∈ (a, +inf)</param>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.A">
            <summary>
            Gets or sets the value of the parameter a ∈ (0, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.B">
            <summary>
            Gets or sets the value of the parameter b ∈ (a, +inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.UQuadratic.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.UQuadratic.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.UQuadratic.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Weibull">
            <summary>
            Defines the Weibull distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Weibull_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Weibull.#ctor">
            <summary>
            Initializes the Weibull distribution.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Weibull.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the Weibull distribution.
            </summary>
            <param name="lambda">Scale factor (0, + inf)</param>
            <param name="k">Shape factor (0, + inf)</param>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Lambda">
            <summary>
            Gets or sets the value of the scale factor (0, + inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.K">
            <summary>
            Gets or sets the value of the form factor (0, + inf).
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Weibull.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Weibull.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Weibull.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.Wigner">
            <summary>
            Defines the Wiener semicircular distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wigner_semicircle_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Wigner.#ctor(System.Double)">
            <summary>
            Initializes the Wiener semicircular distribution.
            </summary>
            <param name="r">Radius</param>
        </member>
        <member name="P:UMapx.Distribution.Wigner.R">
            <summary>
            Gets or sets the radius value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.Wigner.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.Wigner.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Distribution.Wigner.Entropy">
            <summary>
            Returns the value of differential entropy.
            </summary>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Distribution.WrappedCauchy">
            <summary>
            Defines the compact Cauchy distribution.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wrapped_Cauchy_distribution
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Distribution.WrappedCauchy.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the compact Cauchy distribution.
            </summary>
            <param name="mu">Parameter μ</param>
            <param name="gamma">Parameter γ > 0</param>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Mu">
            <summary>
            Gets or sets the value of the parameter μ.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Gamma">
            <summary>
            Gets or sets the value of the parameter γ > 0.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Mean">
            <summary>
            Gets the mean value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Variance">
            <summary>
            Gets the variance value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Median">
            <summary>
            Gets the median value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Mode">
            <summary>
            Gets the mode value.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Support">
            <summary>
            Gets the support interval of the argument.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Skewness">
            <summary>
            Gets the value of the asymmetry coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Excess">
            <summary>
            Gets the kurtosis coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Distribution.WrappedCauchy.Entropy">
            <summary>
            Gets the value of entropy.
            </summary>
        </member>
        <member name="M:UMapx.Distribution.WrappedCauchy.Distribution(System.Double)">
            <summary>
            Returns the value of the probability distribution function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Distribution.WrappedCauchy.Function(System.Double)">
            <summary>
            Returns the value of the probability density function.
            </summary>
            <param name="x">Value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Imaging.AdditiveNoise">
            <summary>
            Defines the additive noise filter.
            <remarks>
            Filter usage example:
            https://en.wikipedia.org/wiki/Gaussian_noise
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.AdditiveNoise.#ctor">
            <summary>
            Initializes the additive noise filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.AdditiveNoise.#ctor(System.Int32)">
            <summary>
            Initializes the additive noise filter.
            </summary>
            <param name="amount">Amount [0, 100]</param>
        </member>
        <member name="P:UMapx.Imaging.AdditiveNoise.Amount">
            <summary>
            Gets or sets the amout value [0, 100].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.AdditiveNoise.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.AdditiveNoise.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.AlphaChannelFilter">
            <summary>
            Defines the alpha channel filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.AlphaChannelFilter.#ctor">
            <summary>
            Initializes the alpha channel filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.AlphaChannelFilter.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.AlphaChannelFilter.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.BitmapConverter">
            <summary>
            Uses to work with bitmaps.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToIco(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Converts Bitmap to icon file.
            </summary>
            <param name="b">Bitmap</param>
            <param name="size">Size</param>
            <returns>Icon</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToJpeg(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap to JPEG format.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToBmp(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap to BMP format.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToGif(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap to GIF format.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToPng(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap to PNG format.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToTiff(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap to TIFF format.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.Bitmap(System.Drawing.Imaging.BitmapData)">
            <summary>
            Gets the Bitmap from the BitmapData.
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.Bitmap(System.Drawing.Bitmap,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts Bitmap to a specific format
            </summary>
            <param name="b">Bitmap</param>
            <param name="pixelformat">Pixel format</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.Lock32bpp(System.Drawing.Bitmap)">
            <summary>
            Blocks Bitmap in system memory.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap data</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.Lock8bpp(System.Drawing.Bitmap)">
            <summary>
            Blocks Bitmap in system memory.
            </summary>
            <param name="b">Bitmap</param>
            <returns>Bitmap data</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.Unlock(System.Drawing.Bitmap,System.Drawing.Imaging.BitmapData)">
            <summary>
            Unblocks Bitmap in system memory.
            </summary>
            <param name="b">Bitmap</param>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToRGB(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts a Bitmap to an RGB structure with or without alpha-channel.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="alpha">Alpha-channel</param>
            <returns>RGBA structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToRGB(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
            Converts a Bitmap to an RGB structure with or without alpha-channel.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="alpha">Alpha-channel</param>
            <returns>RGBA structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromRGB(System.Double[0:,0:][])">
            <summary>
            Converts an RGB structure to a color image.
            </summary>
            <param name="array">RGBA structure array</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromRGB(System.Double[0:,0:][],System.Drawing.Imaging.BitmapData)">
            <summary>
            Converts an RGB structure to a color image.
            </summary>
            <param name="array">RGBA structure array</param>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromRGB(System.Double[0:,0:][],System.Drawing.Bitmap)">
            <summary>
            Converts an RGB structure to a color image.
            </summary>
            <param name="array">RGBA structure array</param>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToHSB(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts a Bitmap to an HSB structure with or without alpha-channel.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="alpha">Alpha-channel</param>
            <returns>HSB structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToHSB(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
            Converts a Bitmap to an HSB structure with or without alpha-channel.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="alpha">Alpha-channel</param>
            <returns>HSB structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromHSB(System.Double[0:,0:][])">
            <summary>
            Converts an HSB structure to a color image.
            </summary>
            <param name="array">HSB structure array</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromHSB(System.Double[0:,0:][],System.Drawing.Imaging.BitmapData)">
            <summary>
            Converts an HSB structure to a color image.
            </summary>
            <param name="array">HSB structure array</param>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromHSB(System.Double[0:,0:][],System.Drawing.Bitmap)">
            <summary>
            Converts an HSB structure to a color image.
            </summary>
            <param name="array">HSB structure array</param>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToHSL(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts a Bitmap to an HSL structure with or without alpha-channel.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="alpha">Alpha-channel</param>
            <returns>HSL structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToHSL(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
            Converts a Bitmap to an HSL structure with or without alpha-channel.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="alpha">Alpha-channel</param>
            <returns>HSL structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromHSL(System.Double[0:,0:][])">
            <summary>
            Converts an HSL structure to a color image.
            </summary>
            <param name="array">HSL structure array</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromHSL(System.Double[0:,0:][],System.Drawing.Imaging.BitmapData)">
            <summary>
            Converts an HSL structure to a color image.
            </summary>
            <param name="array">HSL structure array</param>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromHSL(System.Double[0:,0:][],System.Drawing.Bitmap)">
            <summary>
            Converts an HSL structure to a color image.
            </summary>
            <param name="array">HSL structure array</param>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToYCbCr(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Converts a Bitmap to an YCbCr structure with or without alpha-channel.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="alpha">Alpha-channel</param>
            <returns>YCbCr structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToYCbCr(System.Drawing.Imaging.BitmapData,System.Boolean)">
            <summary>
            Converts a Bitmap to an YCbCr structure with or without alpha-channel.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="alpha">Alpha-channel</param>
            <returns>YCbCr structure array</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromYCbCr(System.Double[0:,0:][])">
            <summary>
            Converts an YCbCr structure to a color image.
            </summary>
            <param name="array">YCbCr structure array</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromYCbCr(System.Double[0:,0:][],System.Drawing.Imaging.BitmapData)">
            <summary>
            Converts an YCbCr structure to a color image.
            </summary>
            <param name="array">YCbCr structure array</param>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromYCbCr(System.Double[0:,0:][],System.Drawing.Bitmap)">
            <summary>
            Converts an YCbCr structure to a color image.
            </summary>
            <param name="array">YCbCr structure array</param>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToGrayscale(System.Drawing.Bitmap)">
            <summary>
            Converts Bitmap to averaged channel value matrix.
            </summary>
            <param name="Data">Bitmap</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.ToGrayscale(System.Drawing.Imaging.BitmapData)">
            <summary>
            Converts Bitmap to averaged channel value matrix.
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromGrayscale(System.Double[0:,0:])">
            <summary>
            Converts a matrix of channel values to a monochrome Bitmap.
            </summary>
            <param name="m">Matrix</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromGrayscale(System.Double[0:,0:],System.Drawing.Imaging.BitmapData)">
            <summary>
            Converts a matrix of channel values to a monochrome Bitmap.
            </summary>
            <param name="m">Matrix</param>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapConverter.FromGrayscale(System.Double[0:,0:],System.Drawing.Bitmap)">
            <summary>
            Converts a matrix of channel values to a monochrome Bitmap.
            </summary>
            <param name="m">Matrix</param>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.BitmapFilter">
            <summary>
            Defines the bitmap filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.#ctor(UMapx.Transform.IFilter,UMapx.Imaging.Space)">
            <summary>
            Initializes the bitmap filter.
            </summary>
            <param name="filter">Filter</param>
            <param name="space">Color space</param>
        </member>
        <member name="P:UMapx.Imaging.BitmapFilter.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.BitmapFilter.Space">
            <summary>
            Gets or sets the color space.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Appy filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Appy filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.ApplyRGB(System.Drawing.Imaging.BitmapData)">
            <summary>
            Appy filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.ApplyHSB(System.Drawing.Imaging.BitmapData)">
            <summary>
            Appy filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.ApplyHSL(System.Drawing.Imaging.BitmapData)">
            <summary>
            Appy filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.ApplyYCbCr(System.Drawing.Imaging.BitmapData)">
            <summary>
            Appy filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BitmapFilter.ApplyGrayscale(System.Drawing.Imaging.BitmapData)">
            <summary>
            Appy filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.BlendMode">
            <summary>
            Used to blending layers.
            <remarks>
            More information can be found on the website:
            http://www.pegtop.net/delphi/articles/blendmodes/index.htm
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Average(System.Double,System.Double)">
            <summary>
            Implements the averaging function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Screen(System.Double,System.Double)">
            <summary>
            Implements the screening function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Difference(System.Double,System.Double)">
            <summary>
            Implements the difference function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Negation(System.Double,System.Double)">
            <summary>
            Implements the negation function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Exclusion(System.Double,System.Double)">
            <summary>
            Implements the exclusion function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Overlay(System.Double,System.Double)">
            <summary>
            Implements the overlaying function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.HardLight(System.Double,System.Double)">
            <summary>
            Implements the "hard light" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Dodge(System.Double,System.Double)">
            <summary>
            Implements the "dodge" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.SoftDodge(System.Double,System.Double)">
            <summary>
            Implements the "soft dodge" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Burn(System.Double,System.Double)">
            <summary>
            Implements the "burn" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.SoftBurn(System.Double,System.Double)">
            <summary>
            Implements the "soft burn" function".
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Reflect(System.Double,System.Double)">
            <summary>
            Implements the reflection function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Glow(System.Double,System.Double)">
            <summary>
            Implements the glow function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Stamp(System.Double,System.Double)">
            <summary>
            Implements the stamp function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Freeze(System.Double,System.Double)">
            <summary>
            Implements the "freeze" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Heat(System.Double,System.Double)">
            <summary>
            Implements the "heat" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Interpolation(System.Double,System.Double)">
            <summary>
            Implements the interpolation function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Photoshop(System.Double,System.Double)">
            <summary>
            Implements the function of "soft light" (Adobe Photoshop).
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Illusions(System.Double,System.Double)">
            <summary>
            Implements the function of "soft light" (Illusions.hu).
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Pegtop(System.Double,System.Double)">
            <summary>
            Implements the function of "soft light" (Pegtop).
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Fw3c(System.Double,System.Double)">
            <summary>
            Implements the "Cairo" function.
            </summary>
            <param name="a">First layer</param>
            <param name="b">Second layer</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.BlendMode.Gw3c(System.Double)">
            <summary>
            Implements the "Cairo" function.
            </summary>
            <param name="a">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Imaging.BottomHat">
            <summary>
            Defines the bottom-hat filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BottomHat.#ctor(System.Int32)">
            <summary>
            Initializes the bottom-hat filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.BottomHat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the bottom-hat filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.BottomHat.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the bottom-hat filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.BottomHat.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BottomHat.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BottomHat.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BottomHat.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.BoxBlur">
            <summary>
            Defines the box blur filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.#ctor(System.Int32)">
            <summary>
            Initializes the box blur filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the box blur filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the box blur filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.BoxBlur.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.ApplyVertical(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.BoxBlur.ApplyHorizontal(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.BrightnessCorrection">
            <summary>
            Defines the brightness correction filter.
            <remarks>
            More information can be found on the website:
            http://esate.ru/uroki/OpenGL/image_processing/_p4106/
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BrightnessCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the brightness correction filter.
            </summary>
            <param name="brightness">Brightness [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.BrightnessCorrection.#ctor">
            <summary>
            Initializes the brightness correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.BrightnessCorrection.Brightness">
            <summary>
            Gets or sets the brightness value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.BrightnessCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.CanvasColor">
            <summary>
            Defines the color canvas class.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CanvasColor.#ctor">
            <summary>
            Initializes the color canvas class.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CanvasColor.#ctor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Initializes the color canvas class.
            </summary>
            <param name="width">Canvas width</param>
            <param name="height">Canvas height</param>
            <param name="color">Color</param>
        </member>
        <member name="P:UMapx.Imaging.CanvasColor.Color">
            <summary>
            Gets or sets canvas color.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CanvasColor.Width">
            <summary>
            Gets or sets the width of the canvas.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CanvasColor.Height">
            <summary>
            Gets or sets the height of the canvas.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CanvasColor.Create">
            <summary>
            Creates canvas.
            </summary>
            <returns>Bitmap</returns>
        </member>
        <member name="T:UMapx.Imaging.CanvasGradient">
            <summary>
            Defines the gradient canvas class.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CanvasGradient.#ctor">
            <summary>
            Initializes the gradient canvas class.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CanvasGradient.#ctor(System.Int32,System.Int32,System.Double,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes the gradient canvas class.
            </summary>
            <param name="width">Canvas width</param>
            <param name="height">Canvas height</param>
            <param name="angle">Angle</param>
            <param name="color1">First color</param>
            <param name="color2">Second color</param>
        </member>
        <member name="P:UMapx.Imaging.CanvasGradient.Color1">
            <summary>
            Gets or sets the first color.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CanvasGradient.Color2">
            <summary>
            Gets or sets the second color.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CanvasGradient.Angle">
            <summary>
            Gets or sets the angle value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CanvasGradient.Width">
            <summary>
            Gets or sets the width of the canvas.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CanvasGradient.Height">
            <summary>
            Gets or sets the height of the canvas.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CanvasGradient.Create">
            <summary>
            Creates canvas.
            </summary>
            <returns>Bitmap</returns>
        </member>
        <member name="T:UMapx.Imaging.Chromakey">
            <summary>
            Defines the chromakey filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Chromakey.#ctor(UMapx.Imaging.RGBA)">
            <summary>
            Initializes the chromakey filter.
            </summary>
            <param name="channel">Channel</param>
        </member>
        <member name="P:UMapx.Imaging.Chromakey.Channel">
            <summary>
            Gets or sets channel.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Chromakey.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Chromakey.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Closing">
            <summary>
            Defines the closing filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Closing.#ctor(System.Int32)">
            <summary>
            Initializes the closing filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.Closing.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the closing filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.Closing.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the closing filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.Closing.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Closing.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Closing.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Closing.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.CMYKFilter">
            <summary>
            Defines the CMYK filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CMYKFilter.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the CMYK filter.
            </summary>
            <param name="cyan">Cyan [-1, 1]</param>
            <param name="magenta">Magenta [-1, 1]</param>
            <param name="yellow">Yellow [-1, 1]</param>
            <param name="keycolor">Keycolor [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.CMYKFilter.#ctor">
            <summary>
            Initializes the CMYK filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CMYKFilter.Cyan">
            <summary>
            Cyan [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CMYKFilter.Magenta">
            <summary>
            Magenta [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CMYKFilter.Yellow">
            <summary>
            Yellow [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CMYKFilter.Keycolor">
            <summary>
            Keycolor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CMYKFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.CMYKFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.ColorReplace">
            <summary>
            Defines the color replacement filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ColorReplace.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes the color replacement filter.
            </summary>
            <param name="input">Input color</param>
            <param name="output">Output color</param>
        </member>
        <member name="M:UMapx.Imaging.ColorReplace.#ctor">
            <summary>
            Initializes the color replacement filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ColorReplace.Input">
            <summary>
            Input color.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ColorReplace.Output">
            <summary>
            Output color.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ColorReplace.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.ColorReplace.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.ContrastCorrection">
            <summary>
            Defines the contrast correction filter.
            <remarks>
            More information can be found on the website:
            http://esate.ru/uroki/OpenGL/image_processing/_p4106/
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ContrastCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the contrast correction filter.
            </summary>
            <param name="value">Contrast [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.ContrastCorrection.#ctor">
            <summary>
            Initializes the contrast correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ContrastCorrection.Contrast">
            <summary>
            Gets or sets the contrast value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ContrastCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.ContrastEnhancement">
            <summary>
            Defines the global contrast enhancement filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ContrastEnhancement.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the global contrast enhancement filter.
            </summary>
            <param name="contrast">Contrast [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="P:UMapx.Imaging.ContrastEnhancement.Contrast">
            <summary>
            Gets or sets the contrast coefficent value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ContrastEnhancement.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Convolution">
            <summary>
            Defines the convolution filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Convolution.#ctor(System.Double[0:,0:],System.Double,System.Boolean)">
            <summary>
            Initializes the convolution filter.
            </summary>
            <param name="m">Matrix</param>
            <param name="offset">Offset</param>
            <param name="bilateral">Bilateral processing or not</param>
        </member>
        <member name="M:UMapx.Imaging.Convolution.#ctor">
            <summary>
            Initializes the convolution filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Convolution.Matrix">
            <summary>
            Gets or sets the convolution matrix.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Convolution.Offset">
            <summary>
            Gets or sets the offset value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Convolution.Bilateral">
            <summary>
            Bilateral processing or not.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Data(System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="m">Matrix</param>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Convolution.G(System.Double,System.Double)">
            <summary>
            Gets the value of the gradient operator.
            </summary>
            <param name="Gx">Gradient X</param>
            <param name="Gy">Gradient Y</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Tetta(System.Double,System.Double)">
            <summary>
            Gets the angle of the gradient operator.
            </summary>
            <param name="Gx">Gradient X</param>
            <param name="Gy">Gradient Y</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.LoGaussian(System.Int32,System.Int32,System.Double)">
            <summary>
            mplements the construction of the inverted Gausssian filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="sigma">Standard deviation (!=0)</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Gaussian(System.Int32,System.Int32,System.Double)">
            <summary>
            mplements the construction of the Gaussian blur filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="sigma">Standard deviation (!=0)</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Unsharp(System.Int32,System.Int32,System.Double)">
            <summary>
            Implements the construction of the "unsharp masking" filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="sigma">Standard deviation (!=0)</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.HighPass(System.Int32,System.Int32,System.Double)">
            <summary>
            Implements the construction of the high-pass filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="boost">Boost</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.LowPass(System.Int32,System.Int32)">
            <summary>
            Implements the construction of the low-pass filter.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Emboss(System.Int32)">
            <summary>
            Implements the construction of the emboss filter.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Roberts">
            <summary>
            Implements the construction of the Roberts operator [2 x 2].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Prewitt">
            <summary>
            Implements the construction of the Prewitt operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Sobel">
            <summary>
            Implements the construction of the Sobel operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Scharr">
            <summary>
            Implements the construction of the Scharr operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Laplacian">
            <summary>
            Implements the construction of the Laplacian operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.LaplacianDiagonal">
            <summary>
            Implements the construction of the diagonal Laplacian operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.LaplacianInvert">
            <summary>
            Implements the construction of the inverted Laplacian operator [3 x 3].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Kirsh(UMapx.Imaging.Gradient)">
            <summary>
            Implements the construction of the Kirsh operator [3 x 3].
            </summary>
            <param name="direction">Gradient direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Convolution.Roberts(UMapx.Imaging.Gradient)">
            <summary>
            Implements the construction of the Roberts operator [3 x 3]. [2 x 2].
            </summary>
            <param name="direction">Gradient direction</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Imaging.Correction">
            <summary>
            Defines the mask correction filter.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Correction.values">
            <summary>
            Values.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Correction.space">
            <summary>
            Color space.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Correction.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Correction.#ctor(System.Double[],UMapx.Imaging.Space)">
            <summary>
            Initializes the mask correction filter.
            </summary>
            <param name="values">Mask array</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.#ctor">
            <summary>
            Initializes the mask correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Correction.Values">
            <summary>
            Gets or sets the mask array.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Correction.Space">
            <summary>
            Gets or sets the color space.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Correction.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.ApplyRGB(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.ApplyHSL(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.ApplyHSB(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.ApplyYCbCr(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Correction.ApplyGrayscale(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.CosCorrection">
            <summary>
            Defines the cosine correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CosCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the cosine correction filter.
            </summary>
            <param name="delta">Delta [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.CosCorrection.#ctor">
            <summary>
            Initializes the cosine correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.CosCorrection.Delta">
            <summary>
            Gets or sets the delta value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.CosCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Crop">
            <summary>
            Defines the crop filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Crop.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes the crop filter.
            </summary>
            <param name="rectangle">Rectangle</param>
        </member>
        <member name="M:UMapx.Imaging.Crop.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the crop filter.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="P:UMapx.Imaging.Crop.Rectangle">
            <summary>
            Gets or sets rectangle.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Crop.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Crop.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Dilatation">
            <summary>
            Defines the dilatation filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.#ctor(System.Int32)">
            <summary>
            Initializes the dilatation filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the dilatation filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the dilatation filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.Dilatation.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.ApplyVertical(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Dilatation.ApplyHorizontal(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.EdgeGlow">
            <summary>
            Defines the edge glow filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.EdgeGlow.#ctor(System.Int32)">
            <summary>
            Initializes the edge glow filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.EdgeGlow.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the edge glow filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.EdgeGlow.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the edge glow filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.EdgeGlow.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.EdgeGlow.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.EdgeGlow.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.EdgeGlow.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.EqualizeChannel">
            <summary>
            Defines the channel equalization filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.EqualizeChannel.#ctor(UMapx.Imaging.RGBA)">
            <summary>
            Initializes the channel equalization filter.
            </summary>
            <param name="channel">Channel of RGBA model</param>
        </member>
        <member name="M:UMapx.Imaging.EqualizeChannel.#ctor">
            <summary>
            Initializes the channel equalization filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.EqualizeChannel.Channel">
            <summary>
            Gets or sets the channel of the RGBA model.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.EqualizeChannel.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.EqualizeChannel.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Erosion">
            <summary>
            Defines the erosion filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Erosion.#ctor(System.Int32)">
            <summary>
            Initializes the erosion filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.Erosion.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the erosion filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.Erosion.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the erosion filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.Erosion.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Erosion.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Erosion.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Erosion.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Erosion.ApplyVertical(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Erosion.ApplyHorizontal(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.ErrorDiffusionDithering">
            <summary>
            Defines the error diffusion dithering filter.
            <remarks>
            Filter usage example:
            https://en.wikipedia.org/wiki/Dither
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ErrorDiffusionDithering.#ctor(System.Int32,System.Double[][])">
            <summary>
            Initializes the error diffusion dithering filter.
            </summary>
            <param name="levels">Number of levels</param>
            <param name="matrix">Matrix</param>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Levels">
            <summary>
            Gets or sets the number of levels.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Matrix">
            <summary>
            Gets or sets the matrix.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ErrorDiffusionDithering.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.ErrorDiffusionDithering.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.ErrorDiffusionDithering.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ErrorDiffusionDithering.Diffuse(System.Int32,System.Int32,System.Int32,System.Byte*)">
            <summary>
            
            </summary>
            <param name="rError"></param>
            <param name="gError"></param>
            <param name="bError"></param>
            <param name="ptr"></param>
        </member>
        <member name="M:UMapx.Imaging.ErrorDiffusionDithering.GetColor(System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            
            </summary>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Atkinson">
            <summary>
            Initializes the Atkinson dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Burkes">
            <summary>
            Initializes the Burkes dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Fan">
            <summary>
            Initializes the Fan dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.SierraLite">
            <summary>
            Initializes the Sierra lite dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Sierra">
            <summary>
            Initializes the Sierra dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.SierraTowsRows">
            <summary>
            Initializes the Sierra lite dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.FloydSteinberg">
            <summary>
            Initializes the Flyd-Steinberg dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.JarvisJudiceNinke">
            <summary>
            Initializes the Jarvis-Judice-Ninke dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Stevenson">
            <summary>
            Initializes the Stevenson dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Shiau">
            <summary>
            Initializes the Shiau dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="P:UMapx.Imaging.ErrorDiffusionDithering.Stucki">
            <summary>
            Initializes the Stucki dithering filter.
            </summary>
            <returns>Error diffusion dithering filter</returns>
        </member>
        <member name="T:UMapx.Imaging.ExposureCorrection">
            <summary>
            Defines the exposure correction filter.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Exposure_(photography)
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ExposureCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the exposure correction filter.
            </summary>
            <param name="average">Average [0, 2500]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.ExposureCorrection.#ctor">
            <summary>
            Initializes the exposure correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ExposureCorrection.Average">
            <summary>
            Gets or sets the average [0, 2500].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ExposureCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.ExposureFusion">
            <summary>
            Defines the exposure fusion filter.
            <remarks>
            More information can be found on the website:
            https://web.stanford.edu/class/cs231m/project-1/exposure-fusion.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ExposureFusion.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the exposure fusion filter.
            </summary>
            <param name="levels">Number of levels</param>
            <param name="sigma">Sigma (0, 1)</param>
        </member>
        <member name="P:UMapx.Imaging.ExposureFusion.Levels">
            <summary>
            Gets or sets number of levels.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ExposureFusion.Sigma">
            <summary>
            Gets or sets the sigma value (0, 1).
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ExposureFusion.Apply(System.Drawing.Bitmap[])">
            <summary>
            Apply filter.
            </summary>
            <param name="images">Bitmap array</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.ExposureFusion.Apply(System.Drawing.Imaging.BitmapData[])">
            <summary>
            Apply filter.
            </summary>
            <param name="images">BitmapData array</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.ExposureFusion.Exp(System.Double[0:,0:][][],System.Double)">
            <summary>
            Exponent filter.
            </summary>
            <param name="I">Input data</param>
            <param name="sigma">Sigma</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Imaging.ExposureFusion.Mul(System.Double[0:,0:][],System.Double[0:,0:][])">
            <summary>
            Implements matrix array multiplication.
            </summary>
            <param name="A">Matrix array</param>
            <param name="B">Matrix array</param>
            <returns>Matrix array</returns>
        </member>
        <member name="T:UMapx.Imaging.FlatFieldCorrection">
            <summary>
            Defines the flat-field correction filter.
            <remarks>
            More information can be found on the website:
            http://imagej.net/Image_Intensity_Processing
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.#ctor(System.Int32)">
            <summary>
            Initializes the flat-field correction filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the flat-field correction filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the flat-field correction filter.
            </summary>
            <param name="size">Radius</param>
        </member>
        <member name="P:UMapx.Imaging.FlatFieldCorrection.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.flatfield(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Flat-field filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.FlatFieldCorrection.globalmeans(System.Drawing.Imaging.BitmapData)">
            <summary>
            Global means.
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Imaging.Flip">
            <summary>
            Defines the flip filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Flip.#ctor">
            <summary>
            Initializes the flip filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Flip.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes the flip filter.
            </summary>
            <param name="x">Flip X</param>
            <param name="y">Flip Y</param>
        </member>
        <member name="P:UMapx.Imaging.Flip.X">
            <summary>
            Gets or sets flip X.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Flip.Y">
            <summary>
            Gets or sets flip Y.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Flip.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Flip.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.GammaCorrection">
            <summary>
            Defines the gamma correction filter.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Gamma_correction
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.GammaCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the gamma correction filter.
            </summary>
            <param name="g">Gamma [0, 20]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.GammaCorrection.#ctor">
            <summary>
            Initializes the gamma correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.GammaCorrection.Gamma">
            <summary>
            Gets or sets the gamma value [0, 20].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.GammaCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Gradient">
            <summary>
            Defines the direction of the gradient vector.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.North">
            <summary>
            North direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.NorthWest">
            <summary>
            North-West direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.West">
            <summary>
            West direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.SouthWest">
            <summary>
            South-West direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.South">
            <summary>
            South direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.SouthEast">
            <summary>
            South-East direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.East">
            <summary>
            East direction.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Gradient.NorthEast">
            <summary>
            North-East direction.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Grayscale">
            <summary>
            Defines the grayscale filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Grayscale.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the grayscale filter.
            </summary>
            <param name="cr">Red</param>
            <param name="cg">Green</param>
            <param name="cb">Blue</param>
        </member>
        <member name="M:UMapx.Imaging.Grayscale.#ctor">
            <summary>
            Initializes the grayscale filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Grayscale.Cr">
            <summary>
            Gets or sets the red channel value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Grayscale.Cg">
            <summary>
            Gets or sets the green channel value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Grayscale.Cb">
            <summary>
            Gets or sets the blue channel value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Grayscale.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Grayscale.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="P:UMapx.Imaging.Grayscale.BT709">
            <summary>
            Initializes the grayscale filter (BT709).
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Grayscale.RY">
            <summary>
            Initializes the grayscale filter (R-Y).
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Grayscale.Y">
            <summary>
            Initializes the grayscale filter Y.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Grid">
            <summary>
            Defines the grid filter.
            <remarks>
            More information can be found on the website:
            https://www.codeproject.com/Articles/2122/Image-Processing-for-Dummies-with-C-and-GDI-Part
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Grid.#ctor(System.Int32)">
            <summary>
            Initializes the grid filter.
            </summary>
            <param name="value">Value [0, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.Grid.#ctor">
            <summary>
            Initializes the grid filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Grid.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Grid.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.HideChannel">
            <summary>
            Defines the channel hide filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HideChannel.#ctor(UMapx.Imaging.RGBA)">
            <summary>
            Initializes the channel hide filter.
            </summary>
            <param name="channel">Channel of RGBA model</param>
        </member>
        <member name="M:UMapx.Imaging.HideChannel.#ctor">
            <summary>
            Initializes the channel hide filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HideChannel.Channel">
            <summary>
            Gets or sets the channel of the RGBA model.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HideChannel.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HideChannel.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.HistogramEqualization">
            <summary>
            Defines the global histogram equalization filter.
            <remarks>
            More information can be found on the website:
            http://www.cromwell-intl.com/3d/histogram/
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HistogramEqualization.#ctor">
            <summary>
            Initializes the global histogram equalization filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HistogramEqualization.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HistogramEqualization.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.HistogramStretch">
            <summary>
            Defines the global histogram stretch filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HistogramStretch.#ctor(System.Double,System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the global histogram stretch filter.
            </summary>
            <param name="min">Minimum intensity [0, 1]</param>
            <param name="max">Maximum intensity [0, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.HistogramStretch.#ctor(UMapx.Core.RangeDouble,UMapx.Imaging.Space)">
            <summary>
            Initializes the global histogram stretch filter.
            </summary>
            <param name="range">Intensity range</param>
            <param name="space">Color space</param>
        </member>
        <member name="P:UMapx.Imaging.HistogramStretch.Range">
            <summary>
            Gets or sets the intensity range.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HistogramStretch.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.HomomorphicEnhancement">
            <summary>
            Defines the filter for homomorphic processing.
            <remarks>
            A homomorphic filter is most often used to equalize the illumination of images.
            It simultaneously normalizes the brightness of the image and increases the contrast.
            
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Homomorphic_filtering
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HomomorphicEnhancement.#ctor(System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the filter for homomorphic processing.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.HomomorphicEnhancement.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the filter for homomorphic processing.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.HomomorphicEnhancement.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the filter for homomorphic processing.
            </summary>
            <param name="size">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.HomomorphicEnhancement.A">
            <summary>
            Gets or sets the contrast value [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HomomorphicEnhancement.B">
            <summary>
            Gets or sets the offset value (0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HomomorphicEnhancement.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.HoughCircle">
            <summary>
            Defines the Hough circle.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughCircle.X">
            <summary>
            Coordinate X.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughCircle.Y">
            <summary>
            Coordinate Y.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughCircle.Radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughCircle.Intensity">
            <summary>
            Absolute line intensity (0, +inf).
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughCircle.RelativeIntensity">
            <summary>
            Relative line intensity (0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughCircle.#ctor(System.Int32,System.Int32,System.Int32,System.Int16,System.Double)">
            <summary>
            Initializes the Hough circle.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
            <param name="radius">Radius</param>
            <param name="intensity">Absolute line intensity (0, +inf)</param>
            <param name="relativeIntensity">Relative line intensity (0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.HoughCircle.CompareTo(System.Object)">
            <summary>
            Compares object to another instance of this class.
            </summary>
            <param name="value">Object</param>
            <returns>Integer number</returns>
        </member>
        <member name="T:UMapx.Imaging.HoughCircleTransform">
            <summary>
            Defines the Hough circle transform filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.#ctor(System.Int32)">
            <summary>
            Initializes the Hough circle transform filter.
            </summary>
            <param name="radiusToDetect">Radius</param>
        </member>
        <member name="P:UMapx.Imaging.HoughCircleTransform.MinCircleIntensity">
            <summary>
            Gets the minimum circle intensity.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughCircleTransform.LocalPeakRadius">
            <summary>
            Gets or sets the radius search for the local peak value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughCircleTransform.MaxIntensity">
            <summary>
            Gets the maximum line intensity.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughCircleTransform.CirclesCount">
            <summary>
            Gets the count of lines found.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.GetMostIntensiveCircles(System.Int32)">
            <summary>
            Returns an array of lines with absolute intensity.
            </summary>
            <param name="count">Count</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.GetCirclesByRelativeIntensity(System.Double)">
            <summary>
            Returns an array of lines with relative intensity.
            </summary>
            <param name="minRelativeIntensity">Minimum relative intensity</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.ToBitmap">
            <summary>
            Returns the Hough synogram.
            </summary>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.CollectCircles">
            <summary>
            Collect circles with intesities greater or equal then specified.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.DrawHoughCircle(System.Int32,System.Int32)">
            <summary>
            Draw Hough circle:
            http://www.cs.unc.edu/~mcmillan/comp136/Lecture7/circle.html
            TODO: more optimizations of circle drawing could be done.
            </summary>
            <param name="xCenter">Co. X</param>
            <param name="yCenter">Co. Y</param>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.SetHoughCirclePoints(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set circle points.
            </summary>
            <param name="cx">Cx</param>
            <param name="cy">Cy</param>
            <param name="x">Co. X</param>
            <param name="y">Co. Y</param>
        </member>
        <member name="M:UMapx.Imaging.HoughCircleTransform.SetHoughPoint(System.Int32,System.Int32)">
            <summary>
            Set point.
            </summary>
            <param name="x">Co. X</param>
            <param name="y">Co. Y</param>
        </member>
        <member name="T:UMapx.Imaging.HoughLine">
            <summary>
            Defines the Hough line.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughLine.Theta">
            <summary>
            Slope of the line [0, 180).
            <remarks>
            It is the angle between the polar axis and the radius of the line.
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughLine.Radius">
            <summary>
            Line distance from the center of the image (-inf, +inf).
            <remarks>
            A negative radius line means that the line is at the bottom of the polar coordinate system. Therefore
            the angle θ should be increased by 180 degrees, and Radius should be positive.
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughLine.Intensity">
            <summary>
            Absolute line intensity (0, +inf).
            </summary>
        </member>
        <member name="F:UMapx.Imaging.HoughLine.RelativeIntensity">
            <summary>
            Relative line intensity (0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughLine.#ctor(System.Double,System.Int16,System.Int16,System.Double)">
            <summary>
            Initializes the Hough line.
            </summary>
            <param name="theta">Slope of the line [0, 180)</param>
            <param name="radius">Radius (-inf, +inf)</param>
            <param name="intensity">Absolute line intensity (0, +inf)</param>
            <param name="relativeIntensity">Relative line intensity (0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.HoughLine.CompareTo(System.Object)">
            <summary>
            Compares object to another instance of this class.
            </summary>
            <param name="value">Object</param>
            <returns>Integer number</returns>
        </member>
        <member name="T:UMapx.Imaging.HoughLineTransform">
            <summary>
            Defines the Hough line transform filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.#ctor">
            <summary>
            Initializes the Hough line transform filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughLineTransform.StepsPerDegree">
            <summary>
            Gets or sets steps per degree.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughLineTransform.MinLineIntensity">
            <summary>
            Gets the minimum line intensity.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughLineTransform.MaxIntensity">
            <summary>
            Gets the maximum line intensity.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughLineTransform.LocalPeakRadius">
            <summary>
            Gets or sets the radius search for the local peak value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HoughLineTransform.LinesCount">
            <summary>
            Gets the count of lines found.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.GetMostIntensiveLines(System.Int32)">
            <summary>
            Returns an array of lines with absolute intensity.
            </summary>
            <param name="count">Count</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.GetLinesByRelativeIntensity(System.Double)">
            <summary>
            Returns an array of lines with relative intensity.
            </summary>
            <param name="minRelativeIntensity">Minimum relative intensity</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.ToBitmap">
            <summary>
            Returns the Hough synogram.
            </summary>
            <returns>Bitmap</returns>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HoughLineTransform.CollectLines">
            <summary>
            Collect lines with intesities greater or equal then specified.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.HSBFilter">
            <summary>
            Defines the HSB filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSBFilter.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Initializes the HSB filter.
            </summary>
            <param name="hue">Hue [-180, 180]</param>
            <param name="saturation">Saturation [-1, 1]</param>
            <param name="brightness">Brightness [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.HSBFilter.#ctor">
            <summary>
            Initializes the HSB filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HSBFilter.Hue">
            <summary>
            Hue [-180, 180].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HSBFilter.Saturation">
            <summary>
            Saturation [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HSBFilter.Brightness">
            <summary>
            Brightness [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSBFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HSBFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.HSBGrayscale">
            <summary>
            Defines the grayscale filter based on the HSB structure.
            <remarks>
            The filter discolors the specified part of the image.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSBGrayscale.#ctor(UMapx.Core.RangeInt)">
            <summary>
            Initializes the grayscale filter based on the HSB structure.
            </summary>
            <param name="hue">Hue range [0, 359]</param>
        </member>
        <member name="M:UMapx.Imaging.HSBGrayscale.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the grayscale filter based on the HSB structure.
            </summary>
            <param name="min">Lower bound [0, 359]</param>
            <param name="max">Upper bound [0, 359]</param>
        </member>
        <member name="P:UMapx.Imaging.HSBGrayscale.Hue">
            <summary>
            Gets or sets the hue range [0, 359].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSBGrayscale.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HSBGrayscale.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.HSLFilter">
            <summary>
            Defines the HSL filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSLFilter.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the HSL filter.
            </summary>
            <param name="hue">Hue [-180, 180]</param>
            <param name="saturation">Saturation [-1, 1]</param>
            <param name="lightness">Lightness [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.HSLFilter.#ctor">
            <summary>
            Initializes the HSL filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HSLFilter.Hue">
            <summary>
            Hue [-180, 180].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HSLFilter.Saturation">
            <summary>
            Saturation [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.HSLFilter.Lightness">
            <summary>
            Lightness [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSLFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.HSLFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.HSLGrayscale">
            <summary>
            Defines the grayscale filter based on the HSL structure.
            <remarks>
            The filter discolors the specified part of the image.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSLGrayscale.#ctor(UMapx.Core.RangeInt)">
            <summary>
            Initializes the grayscale filter based on the HSL structure.
            </summary>
            <param name="hue">Hue range [0, 359]</param>
        </member>
        <member name="M:UMapx.Imaging.HSLGrayscale.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the grayscale filter based on the HSL structure.
            </summary>
            <param name="min">Lower bound [0, 359]</param>
            <param name="max">Upper bound [0, 359]</param>
        </member>
        <member name="P:UMapx.Imaging.HSLGrayscale.Hue">
            <summary>
            Gets or sets the hue range [0, 359].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.HSLGrayscale.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.HSLGrayscale.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.IBitmapFilter">
            <summary>
            Defines the interface for bitmap filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.IBitmapFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.IBitmapFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.IBitmapFilter2">
            <summary>
            Defines the interface for two images bitmap filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.IBitmapFilter2.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.IBitmapFilter2.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.ICanvas">
            <summary>
            Defines the interface of canvas.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ICanvas.Width">
            <summary>
            Gets or sets the width of the canvas.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ICanvas.Height">
            <summary>
            Gets or sets the height of the canvas.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ICanvas.Create">
            <summary>
            Creates canvas.
            </summary>
            <returns>Bitmap</returns>
        </member>
        <member name="T:UMapx.Imaging.Intensity">
            <summary>
            Uses to work with brightness represented as a value belonging to the interval [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Intensity.SingleScaleRetinex(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the Single Scale Retinex algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="xlow">Filter brightness</param>
            <param name="nbase">Logarithm base</param>
            <param name="a">Factor [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.SingleScaleRetinex(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="nbase">Logarithm base</param>
            <param name="a">Factor (0, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LocalContrastInversion(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the local contrast inversion algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="xlow">Filter brightness</param>
            <param name="a">Factor (0, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LocalContrastInversion(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="a">Factor (0, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LocalContrastEnhancement(System.Double,System.Double,System.Double)">
            <summary>
            Implements the local contrast enhancement algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="xlow">Filter brightness</param>
            <param name="a">Factor [-1, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LocalContrastEnhancement(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="a">Factor [-1, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.HomomorphicEnhancement(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the homomorphic enhancement algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="mu">Filter brightness</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.HomomorphicEnhancement(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.KsiContrastEnchancement(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the ξ-contrast enhancement algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="mu">Filter brightness</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset [-1, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.KsiContrastEnchancement(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset [-1, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.SAUCE(System.Double,System.Double,System.Double)">
            <summary>
            Implements the SAUCE algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="mu">Filter brightness</param>
            <param name="d">Degree of difference [0, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.SAUCE(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="a">Factor [-1, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Bradley(System.Double,System.Double,System.Double)">
            <summary>
            Implements the Bradley threshold correction.
            </summary>
            <param name="x">Brightness</param>
            <param name="xlow">Filter brightness</param>
            <param name="difference">Difference [0, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Bradley(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="difference">Difference [0, 1]</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="F:UMapx.Imaging.Intensity.log05">
            <summary>
            Logarithm of 0.5.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Intensity.logEpsilon">
            <summary>
            Logarithmic epsilon.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LogStretch(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the logarithmic stretch algorithm.
            </summary>
            <param name="x">Brightness</param>
            <param name="mu">Filter brightness</param>
            <param name="s">Shadows</param>
            <param name="l">Highlights</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LogStretch(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="s">Shadows</param>
            <param name="l">Highlights</param>
            <param name="length">Length</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LogPow(System.Double,System.Double)">
            <summary>
            Returns the number raised to the logarithmic power.
            </summary>
            <param name="a">Number</param>
            <param name="power">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Gamma(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="g">Gamma</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Gamma(System.Double,System.Double)">
            <summary>
            Implements the gamma correction.
            </summary>
            <param name="x">Argument</param>
            <param name="g">Gamma</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Shift(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="b">Offset (-0.5, 0.5)</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Shift(System.Double,System.Double)">
            <summary>
            Implements the shift correction.
            </summary>
            <param name="x">Argument</param>
            <param name="b">Offset (-0.5, 0.5)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Bin(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="threshold">Threshold [0, 1]</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Bin(System.Double,System.Double)">
            <summary>
            Implements the threshold correction.
            </summary>
            <param name="x">Argument</param>
            <param name="threshold">Threshold [0, 1]</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Exposure(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="average">Average</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Exposure(System.Double,System.Double)">
            <summary>
            Implements the exposure correction.
            </summary>
            <param name="x">Argument</param>
            <param name="average">Average</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Sin(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="delta">Delta</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Sin(System.Double,System.Double)">
            <summary>
            Implements the sine correction.
            </summary>
            <param name="x">Argument</param>
            <param name="delta">Delta</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Cos(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="delta">Delta</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Cos(System.Double,System.Double)">
            <summary>
            Implements the cosine correction.
            </summary>
            <param name="x">Argument</param>
            <param name="delta">Delta</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Log(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="a">Logarithm base</param>
            <param name="delta">Delta</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Log(System.Double,System.Double,System.Double)">
            <summary>
            Implements the logarithmic correction.
            </summary>
            <param name="x">Argument</param>
            <param name="a">Logarithm base</param>
            <param name="delta">Delta</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Add(System.Double,System.Int32)">
            <summary>
            Returns the correction mask for formula: Y = (X + V).
            </summary>
            <param name="value">Value</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Contrast(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="value">Value</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Contrast(System.Double,System.Double)">
            <summary>
            Implements the contrast correction.
            </summary>
            <param name="x">Argument</param>
            <param name="value">Contrast</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LogContrast(System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="power">Value</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.LogContrast(System.Double,System.Double)">
            <summary>
            Implements the log-contrast correction.
            </summary>
            <param name="x">Brightness</param>
            <param name="power">Power</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Invert(System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Invert(System.Double)">
            <summary>
            Negates the value.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Equalize(System.Double,System.Double,System.Double)">
            <summary>
            Equalizes a value relative to the {min, max} range.
            </summary>
            <param name="x">Argument</param>
            <param name="max">Maximum value</param>
            <param name="min">Minimum value</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Equalize(System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="max">Maximum value</param>
            <param name="min">Minimum value</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Linear(UMapx.Core.RangeDouble,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="range">Pair of numbers Max и Min</param>
            <param name="delta">Delta</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Linear(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="xmax">Maximum value</param>
            <param name="xmin">Minimum value</param>
            <param name="delta">Delta</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Linear(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Implements the linear correction.
            </summary>
            <param name="x">Argument</param>
            <param name="xmax">Maximum value</param>
            <param name="xmin">Minimum value</param>
            <param name="delta">Delta</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Levels(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="xmin">Minimum value of the input range</param>
            <param name="xmax">Maximum value of the input range</param>
            <param name="ymin">Minimum value of the output range</param>
            <param name="ymax">Maximum value of the output range</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Levels(UMapx.Core.RangeDouble,UMapx.Core.RangeDouble,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="input">Input values</param>
            <param name="output">Output values</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Intensity.Quantize(System.Int32,System.Int32)">
            <summary>
            Returns the correction mask.
            </summary>
            <param name="levels">Number of levels</param>
            <param name="length">Length</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Imaging.InvertChannels">
            <summary>
            Defines the channels inversion filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.InvertChannels.#ctor(UMapx.Imaging.Space)">
            <summary>
            Initializes the channels inversion filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.InvertChannels.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Jitter">
            <summary>
            Defines the jitter filter.
            <remarks>
            More information can be found on the website:
            https://www.codeproject.com/Articles/2122/Image-Processing-for-Dummies-with-C-and-GDI-Part
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Jitter.#ctor(System.Int32)">
            <summary>
            Initializes the jitter filter.
            </summary>
            <param name="value">Value [0, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.Jitter.#ctor">
            <summary>
            Initializes the jitter filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Jitter.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Jitter.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.KsiContrastEnhancement">
            <summary>
            Defines the contrast enhancement filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.KsiContrastEnhancement.#ctor(System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the contrast enhancement filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.KsiContrastEnhancement.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the contrast enhancement filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.KsiContrastEnhancement.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the contrast enhancement filter.
            </summary>
            <param name="size">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset [-1, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.KsiContrastEnhancement.A">
            <summary>
            Gets or sets the contrast value [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.KsiContrastEnhancement.B">
            <summary>
            Gets or sets the offset value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.KsiContrastEnhancement.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LevelsCorrection">
            <summary>
            Defines the levels correction filter.
            <remarks>
            Filter usage example:
            https://digital-photography-school.com/using-levels-photoshop-image-correct-color-contrast/
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LevelsCorrection.#ctor(UMapx.Core.RangeDouble,UMapx.Core.RangeDouble,UMapx.Imaging.Space)">
            <summary>
            Initializes the levels correction filter.
            </summary>
            <param name="input">Input channel values</param>
            <param name="output">Output channel values</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.LevelsCorrection.#ctor">
            <summary>
            Initializes the levels correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LevelsCorrection.Input">
            <summary>
            Gets or sets input channel values.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LevelsCorrection.Output">
            <summary>
            Gets or sets output channel values.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LevelsCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LinearCorrection">
            <summary>
            Defines the linear correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LinearCorrection.#ctor(UMapx.Core.RangeDouble,System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the linear correction filter.
            </summary>
            <param name="range">Range values</param>
            <param name="delta">Delta [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.LinearCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the linear correction filter.
            </summary>
            <param name="delta">Delta [-100, 100]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.LinearCorrection.#ctor">
            <summary>
            Initializes the linear correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LinearCorrection.Range">
            <summary>
            Gets or sets range values.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LinearCorrection.Delta">
            <summary>
            Gets or sets the delta value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LinearCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LocalContrastEnhancement">
            <summary>
            Defines the local contrast enhancement filter.
            <remarks>
            This filter is also known as "Unsharp Masking."
            More information can be found on the website:
            http://www.cambridgeincolour.com/tutorials/local-contrast-enhancement.htm
            Filter usage example:
            http://www.knowhowtransfer.com/photoshop-professional-plugins/alce-local-contrast-enhancer/
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastEnhancement.#ctor(System.Int32,UMapx.Imaging.Space,System.Double)">
            <summary>
            Initializes the local contrast enhancement filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="contrast">Contrast [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastEnhancement.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double)">
            <summary>
            Initializes the local contrast enhancement filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="contrast">Contrast [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastEnhancement.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double)">
            <summary>
            Initializes the local contrast enhancement filter.
            </summary>
            <param name="size">Filter size</param>
            <param name="space">Color space</param>
            <param name="contrast">Contrast [-1, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.LocalContrastEnhancement.Contrast">
            <summary>
            Gets or sets the contrast value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastEnhancement.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LocalContrastInversion">
            <summary>
            Defines the local contrast inversion filter.
            <remarks>
            This filter is used to equalize the illumination of images by averaging the brightness.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastInversion.#ctor(System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the local contrast inversion filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast (0, 1]</param>
            <param name="b">Offset (0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastInversion.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the local contrast inversion filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="a">Contrast (0, 1]</param>
            <param name="b">Offset (0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastInversion.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the local contrast inversion filter.
            </summary>
            <param name="size">Filter size</param>
            <param name="space">Color space</param>
            <param name="a">Contrast (0, 1]</param>
            <param name="b">Offset (0, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.LocalContrastInversion.A">
            <summary>
            Gets or sets the contrast value (0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LocalContrastInversion.B">
            <summary>
            Gets or sets the offset value (0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalContrastInversion.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LocalCorrection">
            <summary>
            Defines the local mask correction filter.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.LocalCorrection.gb">
            <summary>
            Box blur filter.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.LocalCorrection.values">
            <summary>
            Contrast.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.LocalCorrection.space">
            <summary>
            Color space.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.#ctor">
            <summary>
            Initializes the local mask correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.#ctor(System.Int32,System.Double[0:,0:],UMapx.Imaging.Space)">
            <summary>
            Initializes the local mask correction filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="values">Matrix mask</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.#ctor(System.Int32,System.Int32,System.Double[0:,0:],UMapx.Imaging.Space)">
            <summary>
            Initializes the local mask correction filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="values">Matrix mask</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.#ctor(UMapx.Core.SizeInt,System.Double[0:,0:],UMapx.Imaging.Space)">
            <summary>
            Initializes the local mask correction filter.
            </summary>
            <param name="size">Filter size</param>
            <param name="space">Color space</param>
            <param name="values">Matrix mask</param>
        </member>
        <member name="P:UMapx.Imaging.LocalCorrection.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LocalCorrection.Space">
            <summary>
            Gets or sets the color space.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LocalCorrection.Values">
            <summary>
            Gets or sets the matrix mask.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.ApplyRGB(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.ApplyHSL(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.ApplyHSB(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.ApplyYCbCr(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalCorrection.ApplyGrayscale(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.LocalHistogramEqualization">
            <summary>
            Defines the local histogram equalization filter.
            <remarks>
            More information can be found on the website:
            http://angeljohnsy.blogspot.com/2011/06/local-histogram-equalization.html
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.#ctor(System.Int32)">
            <summary>
            Initializes the local histogram equalization filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the local histogram equalization filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the local histogram equalization filter.
            </summary>
            <param name="size">Radius</param>
        </member>
        <member name="P:UMapx.Imaging.LocalHistogramEqualization.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.Data(UMapx.Core.SizeInt)">
            <summary>
            
            </summary>
            <param name="size">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramEqualization.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.LocalHistogramStretch">
            <summary>
            Defines the local histogram stretch filter.
            <remarks>
            More information can be found on the website:
            http://www.academia.edu/7629047/Image_enhancement_by_local_histogram_stretching
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.#ctor(System.Int32,UMapx.Imaging.Space,System.Double,System.Boolean)">
            <summary>
            Initializes the local histogram stretch filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="contrast">Contrast [0, 1]</param>
            <param name="smoothing">Smoothing</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double,System.Boolean)">
            <summary>
            Initializes the local histogram stretch filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="contrast">Contrast [0, 1]</param>
            <param name="smoothing">Smoothing</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double,System.Boolean)">
            <summary>
            Initializes the local histogram stretch filter.
            </summary>
            <param name="size">Radius</param>
            <param name="space">Color space</param>
            <param name="contrast">Contrast [0, 1]</param>
            <param name="smoothing">Smoothing</param>
        </member>
        <member name="P:UMapx.Imaging.LocalHistogramStretch.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LocalHistogramStretch.Space">
            <summary>
            Gets or sets the color space.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LocalHistogramStretch.Contrast">
            <summary>
            Gets or sets the contrast value [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LocalHistogramStretch.Smoothing">
            <summary>
            Smoothing.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmMax">Bitmap data</param>
            <param name="bmMin">Bitmap data</param> 
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.ApplyRGB(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmMax">Bitmap data</param>
            <param name="bmMin">Bitmap data</param> 
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.ApplyHSB(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmMax">Bitmap data</param>
            <param name="bmMin">Bitmap data</param> 
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.ApplyHSL(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmMax">Bitmap data</param>
            <param name="bmMin">Bitmap data</param> 
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.ApplyYCbCr(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmMax">Bitmap data</param>
            <param name="bmMin">Bitmap data</param> 
        </member>
        <member name="M:UMapx.Imaging.LocalHistogramStretch.ApplyGrayscale(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmMax">Bitmap data</param>
            <param name="bmMin">Bitmap data</param> 
        </member>
        <member name="T:UMapx.Imaging.LocalThreshold">
            <summary>
            Defines the Bradley local threshold filter.
            <remarks>
            More information can be found on the website:
            http://www.scs.carleton.ca/~roth/iit-publications-iti/docs/gerh-50002.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalThreshold.#ctor(System.Int32,UMapx.Imaging.Space,System.Double)">
            <summary>
            Initializes the Bradley local threshold filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="difference">Difference [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.LocalThreshold.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double)">
            <summary>
            Initializes the Bradley local threshold filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="difference">Difference [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.LocalThreshold.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double)">
            <summary>
            Initializes the Bradley local threshold filter.
            </summary>
            <param name="size">Radius</param>
            <param name="space">Color space</param>
            <param name="difference">Difference [0, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.LocalThreshold.Difference">
            <summary>
            Gets or sets the difference [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LocalThreshold.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.LogCorrection">
            <summary>
            Defines the logarithmic correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LogCorrection.#ctor(System.Double,System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the logarithmic correction filter.
            </summary>
            <param name="nbase">Logarithm base</param>
            <param name="delta">Delta [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.LogCorrection.#ctor">
            <summary>
            Initializes the logarithmic correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LogCorrection.Base">
            <summary>
            Gets or sets the base value of the logarithm.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.LogCorrection.Delta">
            <summary>
            Gets or sets the delta value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.LogCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Merge">
            <summary>
            Defines the merge filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Merge.#ctor(System.Int32)">
            <summary>
            Initializes the merge filter.
            </summary>
            <param name="transparency">Transparency [0, 255]</param>
        </member>
        <member name="M:UMapx.Imaging.Merge.#ctor(UMapx.Core.PointInt,System.Int32)">
            <summary>
            Initializes the merge filter.
            </summary>
            <param name="point">A pair of integers representing an ordered pair of X and Y coordinates</param>
            <param name="transparency">Transparency [0, 255]</param>
        </member>
        <member name="M:UMapx.Imaging.Merge.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the merge filter.
            </summary>
            <param name="x">Coordinate X</param>
            <param name="y">Coordinate Y</param>
            <param name="transparency">Transparency [0, 255]</param>
        </member>
        <member name="P:UMapx.Imaging.Merge.Transparency">
            <summary>
            Gets or sets the transparency value [0, 255].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Merge.Point">
            <summary>
            Gets or sets a pair of integers representing an ordered pair of X and Y coordinates.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Merge.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Merge.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Merge.merge(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            Merge function.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="a0"></param>
            <param name="a1"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Imaging.Morphology">
            <summary>
            Defines the morphology filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Morphology.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the morphology filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="threshold">Threshold</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the morphology filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="threshold">Threshold</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.#ctor(UMapx.Core.SizeInt,System.Int32)">
            <summary>
            Initializes the morphology filter.
            </summary>
            <param name="size">Filter size</param>
            <param name="threshold">Threshold</param>
        </member>
        <member name="P:UMapx.Imaging.Morphology.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Morphology.Threshold">
            <summary>
            Gets or sets the threshold.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Morphology.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.ApplyVertical(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.ApplyHorizontal(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.Median(System.Int32)">
            <summary>
            Initializes the median filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.Erosion(System.Int32)">
            <summary>
            Initializes the erosion filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.Morphology.Dilatation(System.Int32)">
            <summary>
            Initializes the dilatation filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="T:UMapx.Imaging.MotionDetector">
            <summary>
            Defines the motion detector.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.MotionDetector.#ctor(System.Byte)">
            <summary>
            Initializes motion detector.
            </summary>
            <param name="threshold">Threshold [0, 255]</param>
        </member>
        <member name="P:UMapx.Imaging.MotionDetector.Threshold">
            <summary>
            Gets or sets threshold.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.MotionDetector.Reset">
            <summary>
            Reset motion detector.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.MotionDetector.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter and returns motion level in range [0, 1].
            </summary>
            <param name="Data">Bitmap</param>
            <returns>Motion level</returns>
        </member>
        <member name="M:UMapx.Imaging.MotionDetector.ProcessFrame(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Process frame.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="T:UMapx.Imaging.Noise">
            <summary>
            Defines the noise filter.
            <remarks>
            More information can be found on the website:
            https://www.codeproject.com/Articles/2122/Image-Processing-for-Dummies-with-C-and-GDI-Part
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Noise.#ctor(System.Int32)">
            <summary>
            Initializes the noise filter.
            </summary>
            <param name="value">Value [0, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.Noise.#ctor">
            <summary>
            Initializes the noise filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Noise.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Noise.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.OilPainting">
            <summary>
            Defines the oil filter.
            <remarks>
            More information can be found on the website:
            https://www.codeproject.com/articles/471994/oilpainteffect
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.OilPainting.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the oil filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="depth">Value [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.OilPainting.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes the oil filter.
            </summary>
            <param name="height">Filter height</param>
            <param name="width">Filter width</param>
            <param name="depth">Value [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.OilPainting.#ctor(UMapx.Core.SizeInt,System.Double)">
            <summary>
            Initializes the oil filter.
            </summary>
            <param name="size">Radius</param>
            <param name="depth">Value [0, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.OilPainting.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.OilPainting.Depth">
            <summary>
            Gets or sets the depth value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.OilPainting.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.OilPainting.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.OilPainting.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Opening">
            <summary>
            Defines the opening filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Opening.#ctor(System.Int32)">
            <summary>
            Initializes the opening filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.Opening.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the opening filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.Opening.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the opening filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.Opening.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Opening.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Opening.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Opening.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Operation">
            <summary>
            Defines the linear operation filter.
            <remarks>
            This filter works UMapxing to the following algorithm: C (x, y) = a * A (x, y) + b * B (x, y), where A, B are the original images,
            a, b are the coefficients.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Operation.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the linear operation filter.
            </summary>
            <param name="a">First image coefficient</param>
            <param name="b">Second image coefficient</param>
        </member>
        <member name="P:UMapx.Imaging.Operation.A">
            <summary>
            Gets or sets the first image coefficient.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Operation.B">
            <summary>
            Gets or sets the second image coefficient.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Operation.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Operation.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="P:UMapx.Imaging.Operation.Addition">
            <summary>
            Addition filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Operation.Subtraction">
            <summary>
            Subtraction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Operation.Averaging">
            <summary>
            Averaging filter.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.PerlinNoise">
            <summary>
            Defines the Perlin noise.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Perlin_noise
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the Perlin noise.   
            </summary>
            <param name="octaves">Octaves[1, 32]</param>
            <param name="persistence">Persistence</param>
            <param name="frequency">Frequency</param>
            <param name="amplitude">Amplitude</param>
        </member>
        <member name="P:UMapx.Imaging.PerlinNoise.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PerlinNoise.Amplitude">
            <summary>
            Gets or sets the amplitude value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PerlinNoise.Persistence">
            <summary>
            Gets or sets the persistence value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PerlinNoise.Octaves">
            <summary>
            Gets or sets the number of octaves[1, 32].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.Function(System.Double)">
            <summary>
            One-dimensional Perlin noise function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.Function2D(System.Double,System.Double)">
            <summary>
            Two-dimensional Perlin noise function.
            </summary>
            <param name="x">Argument</param>
            <param name="y">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.Noise(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.Noise(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.SmoothedNoise(System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.SmoothedNoise(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Imaging.PerlinNoise.CosineInterpolate(System.Double,System.Double,System.Double)">
            
        </member>
        <member name="T:UMapx.Imaging.PhotoFilter">
            <summary>
            Defines the color photo filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PhotoFilter.#ctor(UMapx.Core.IDoubleMesh,System.Drawing.Color,System.Double)">
            <summary>
            Initializes the color photo filter.
            </summary>
            <param name="blendf">Blend function</param>
            <param name="color">Color</param>
            <param name="strength">Strenght [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.PhotoFilter.#ctor(System.Drawing.Color,System.Double)">
            <summary>
            Initializes the color photo filter.
            </summary>
            <param name="color">Color</param>
            <param name="strength">Strenght [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.PhotoFilter.#ctor">
            <summary>
            Initializes the color photo filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.BlendFunction">
            <summary>
            Gets or sets the blend function.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Color">
            <summary>
            gets or sets the filter color.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Strength">
            <summary>
            Gets or sets filter strenght [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PhotoFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.PhotoFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Cold82">
            <summary>
            Initializes the cold filter (82).
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.ColdLBB">
            <summary>
            Initializes the cold filter LBB.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Warm81">
            <summary>
            Initializes the hot filter (81).
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.WarmLBA">
            <summary>
            Initializes the hot filter LBA.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Sepia">
            <summary>
            Initializes the sepia filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Red">
            <summary>
            Initializes the red filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Blue">
            <summary>
            Initializes the blue filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Green">
            <summary>
            Initializes the green filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Underwater">
            <summary>
            Initializes the "underwater" filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Purple">
            <summary>
            Initializes the purple filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Orange">
            <summary>
            Initializes the orange filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PhotoFilter.Yellow">
            <summary>
            Initializes the yellow filter.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Pixelate">
            <summary>
            Defines the pixelation filter.
            <remarks>
            More information can be found on the website:
            https://www.codeproject.com/Articles/2122/Image-Processing-for-Dummies-with-C-and-GDI-Part
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Pixelate.#ctor(System.Int32)">
            <summary>
            Initializes the pixelation filter.
            </summary>
            <param name="value">Value [0, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.Pixelate.#ctor">
            <summary>
            Initializes the pixelation filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Pixelate.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Pixelate.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.PointAddition">
            <summary>
            Defines the point addition filter.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.PointAddition.points">
            <summary>
            Point matrix.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.PointAddition.width">
            <summary>
            Image width.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.PointAddition.height">
            <summary>
            Image height.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointAddition.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointAddition.#ctor(UMapx.Core.PointInt[0:,0:])">
            <summary>
            Initializes the point addition filter.
            </summary>
            <param name="points">Array of ordered pairs of X and Y</param>
        </member>
        <member name="M:UMapx.Imaging.PointAddition.#ctor">
            <summary>
            Initializes the point addition filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PointAddition.Points">
            <summary>
            Gets or sets point matrix.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointAddition.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.PointAddition.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.PointAddition.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.PointMatrix">
            <summary>
            Uses to work with point matrices.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.FlipY(System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.FlipX(System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.ShiftX(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="value">Offset</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.ShiftY(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="value">Offset</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.Noise(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="value">Value [0, 100]</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.Pixelate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="value">Value [0, 100]</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.Grid(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="value">Value [0, 100]</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="M:UMapx.Imaging.PointMatrix.Water(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the point matrix.
            </summary>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="value">Value [0, 100]</param>
            <returns>Array of ordered pairs of X and Y</returns>
        </member>
        <member name="T:UMapx.Imaging.PointMultiplication">
            <summary>
            Defines the point multiplication filter.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.PointMultiplication.points">
            <summary>
            Point matrix.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.PointMultiplication.width">
            <summary>
            Image width.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.PointMultiplication.height">
            <summary>
            Image height.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointMultiplication.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointMultiplication.#ctor(UMapx.Core.PointInt[0:,0:])">
            <summary>
            Initializes the point multiplication filter.
            </summary>
            <param name="points">Array of ordered pairs of X and Y</param>
        </member>
        <member name="M:UMapx.Imaging.PointMultiplication.#ctor">
            <summary>
            Initializes the point multiplication filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.PointMultiplication.Points">
            <summary>
            Gets or sets point matrix.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.PointMultiplication.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.PointMultiplication.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.PointMultiplication.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Quantization">
            <summary>
            Defines the quantization filter.
            <remarks>
            More information can be found on the website:
            http://en.wikipedia.org/wiki/Posterization
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Quantization.#ctor(System.Int32,UMapx.Imaging.Space)">
            <summary>
            Initializes the quantization filter.
            </summary>
            <param name="levels">Number of levels</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.Quantization.#ctor">
            <summary>
            Initializes the quantization filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Quantization.Levels">
            <summary>
            Gets or sets number of levels.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Quantization.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Rebuilder">
            <summary>
            Defines an abstract data rebuilding class.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Rebuilder.rebuild">
            <summary>
            Use data rebuilding or not.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Rebuilder.Rebuild">
            <summary>
            Implements the rebuilding of class data.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Resize">
            <summary>
            Defines the resize filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Resize.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the resize filter.
            </summary>
            <param name="width">Width</param>
            <param name="height">Height</param>
        </member>
        <member name="M:UMapx.Imaging.Resize.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the resize filter.
            </summary>
            <param name="size">Size</param>
        </member>
        <member name="P:UMapx.Imaging.Resize.Size">
            <summary>
            Gets or sets image size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Resize.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Resize.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.RGBA">
            <summary>
            Defines the channel of RGBA model.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.RGBA.Alpha">
            <summary>
            Alpha.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.RGBA.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.RGBA.Green">
            <summary>
            Green.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.RGBA.Blue">
            <summary>
            Blue.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.RGBFilter">
            <summary>
            Defines the RGB filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RGBFilter.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the RGB filter.
            </summary>
            <param name="red">Red [-255, 255]</param>
            <param name="green">Green [-255, 255]</param>
            <param name="blue">Blue [-255, 255]</param>
        </member>
        <member name="M:UMapx.Imaging.RGBFilter.#ctor">
            <summary>
            Initializes the RGB filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.RGBFilter.Red">
            <summary>
            Red [-255, 255].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.RGBFilter.Green">
            <summary>
            Green [-255, 255].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.RGBFilter.Blue">
            <summary>
            Blue [-255, 255].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RGBFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.RGBFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Rotate">
            <summary>
            Defines the rotation filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Rotate.#ctor(System.Double,System.Drawing.Color)">
            <summary>
            Initializes the rotation filter.
            </summary>
            <param name="angle">Angle</param>
            <param name="color">Background color</param>
        </member>
        <member name="P:UMapx.Imaging.Rotate.Angle">
            <summary>
            Gets or sets angle value.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Rotate.Color">
            <summary>
            Gets or sets background color.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Rotate.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Rotate.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Rotate.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.RotateChannel">
            <summary>
            Defines the channel rotation filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RotateChannel.#ctor">
            <summary>
            Initializes the channel rotation filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.RotateChannel.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.RotateChannel.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.SaltAndPepper">
            <summary>
            Defines the salt and pepper noise filter.
            <remarks>
            Filter usage example:
            https://en.wikipedia.org/wiki/Salt-and-pepper_noise
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SaltAndPepper.#ctor">
            <summary>
            Initializes the salt and pepper noise filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SaltAndPepper.#ctor(System.Double)">
            <summary>
            Initializes the salt and pepper noise filter.
            </summary>
            <param name="amount">Amount [0, 100].</param>
        </member>
        <member name="P:UMapx.Imaging.SaltAndPepper.Amount">
            <summary>
            Gets or sets the amout value [0, 100].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SaltAndPepper.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.SaltAndPepper.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.SaturationCorrection">
            <summary>
            Defines the saturation correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SaturationCorrection.#ctor(System.Double)">
            <summary>
            Initializes the saturation correction filter.
            </summary>
            <param name="saturation">Saturation [-100, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.SaturationCorrection.#ctor">
            <summary>
            Initializes the saturation correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.SaturationCorrection.Saturation">
            <summary>
            Gets or sets the saturation value [-100, 100].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SaturationCorrection.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.SaturationCorrection.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.ShadowsHighlightsCorrection">
            <summary>
            Defines the shadows and lights correction filter.
            <remarks>
            Shadow-Highlights correction is used to correct unevenly lit images. Unlike other local algorithms
            (for example, Single Scale Retinex, Homomorphic Enhancement, Flat-Field Correction) filter allows you to adjust the brightness values separately in dark and bright areas
            Images.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShadowsHighlightsCorrection.#ctor(System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the shadows and lights correction filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="shadows">Shadows [0, 1]</param>
            <param name="highlights">Highlights [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.ShadowsHighlightsCorrection.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the shadows and lights correction filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="shadows">Shadows [0, 1]</param>
            <param name="highlights">Highlights [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.ShadowsHighlightsCorrection.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double,System.Double)">
            <summary>
            Initializes the shadows and lights correction filter.
            </summary>
            <param name="size">Radius</param>
            <param name="space">Color space</param>
            <param name="shadows">Shadows [0, 1]</param>
            <param name="highlights">Highlights [0, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.ShadowsHighlightsCorrection.Shadows">
            <summary>
            Gets or sets the shadows value [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ShadowsHighlightsCorrection.Highlights">
            <summary>
            Gets or sets the highlights value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShadowsHighlightsCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShadowsHighlightsCorrection.value2gamma(System.Double)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Imaging.Shift">
            <summary>
            Defines the shift filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Shift.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the shift filter.
            </summary>
            <param name="x">Offset value of axis X</param>
            <param name="y">Offset value of axis Y</param>
        </member>
        <member name="M:UMapx.Imaging.Shift.#ctor(UMapx.Core.PointInt)">
            <summary>
            Initializes the shift filter.
            </summary>
            <param name="point">A pair of integers representing an ordered pair of X and Y coordinates</param>
        </member>
        <member name="M:UMapx.Imaging.Shift.#ctor">
            <summary>
            Initializes the shift filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Shift.X">
            <summary>
            Gets or sets the offset value of axis X.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Shift.Y">
            <summary>
            Gets or sets the offset value of axis Y.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Shift.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Shift.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Shift.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Shift.ShiftY(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Int32,System.Int32,System.Int32)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="stride">Stride</param>
        </member>
        <member name="M:UMapx.Imaging.Shift.ShiftX(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Int32,System.Int32,System.Int32)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <param name="stride">Stride</param>
        </member>
        <member name="T:UMapx.Imaging.ShiftCorrection">
            <summary>
            Defines the shift correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShiftCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the shift correction filter.
            </summary>
            <param name="offset">Offset (-0.5, 0.5)</param>
            <param name="space">Color space</param>
        </member>
        <member name="P:UMapx.Imaging.ShiftCorrection.Offset">
            <summary>
            Gets or sets the offset value (-0.5, 0.5).
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShiftCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.ShowChannel">
            <summary>
            Defines the channel show filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShowChannel.#ctor(UMapx.Imaging.RGBA)">
            <summary>
            Initializes the channel show filter.
            </summary>
            <param name="channel">Channel of RGBA model</param>
        </member>
        <member name="M:UMapx.Imaging.ShowChannel.#ctor">
            <summary>
            Initializes the channel show filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.ShowChannel.Channel">
            <summary>
            Gets or sets the channel of the RGBA model.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ShowChannel.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.ShowChannel.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.SinCorrection">
            <summary>
            Defines the sine correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SinCorrection.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the sine correction filter.
            </summary>
            <param name="delta">Delta [-1, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.SinCorrection.#ctor">
            <summary>
            Initializes the sine correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.SinCorrection.Delta">
            <summary>
            Gets or sets the delta value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SinCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.SingleScaleRetinex">
            <summary>
            Defines the Single Scale Retinex filter.
            <remarks>
            More information can be found on the website:
            https://dragon.larc.nasa.gov/background/pubabs/papers/gspx1.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SingleScaleRetinex.#ctor(System.Int32,UMapx.Imaging.Space,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the Single Scale Retinex filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <param name="nbase">Logarithm base</param>
        </member>
        <member name="M:UMapx.Imaging.SingleScaleRetinex.#ctor(System.Int32,System.Int32,UMapx.Imaging.Space,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the Single Scale Retinex filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <param name="nbase">Logarithm base</param>
        </member>
        <member name="M:UMapx.Imaging.SingleScaleRetinex.#ctor(UMapx.Core.SizeInt,UMapx.Imaging.Space,System.Double,System.Double,System.Double)">
            <summary>
            Initializes the Single Scale Retinex filter.
            </summary>
            <param name="size">Radius</param>
            <param name="space">Color space</param>
            <param name="a">Contrast [-1, 1]</param>
            <param name="b">Offset (0, 1]</param>
            <param name="nbase">Logarithm base</param>
        </member>
        <member name="P:UMapx.Imaging.SingleScaleRetinex.A">
            <summary>
            Gets or sets the contrast [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.SingleScaleRetinex.B">
            <summary>
            Gets or sets the offset value (0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.SingleScaleRetinex.Base">
            <summary>
            Gets or sets the logarithm base.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.SingleScaleRetinex.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Space">
            <summary>
            Defines the color space.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Space.RGB">
            <summary>
            Color space RGB.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Space.HSB">
            <summary>
            Color space HSB.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Space.HSL">
            <summary>
            Color space HSB.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Space.YCbCr">
            <summary>
            Color space YCbCr.
            </summary>
        </member>
        <member name="F:UMapx.Imaging.Space.Grayscale">
            <summary>
            Grayscale.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Statistics">
            <summary>
            Uses to work with the statistical characteristics of the image.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Histogram(System.Drawing.Imaging.BitmapData)">
            <summary>
            Gets a histogram of the image.
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Histogram(System.Drawing.Imaging.BitmapData,UMapx.Imaging.RGBA)">
            <summary>
            Gets a histogram of the image.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="channel">Channel of RGBA model</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Histogram(System.Drawing.Bitmap)">
            <summary>
            Gets a histogram of the image.
            </summary>
            <param name="Data">Bitmap</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Histogram(System.Drawing.Bitmap,UMapx.Imaging.RGBA)">
            <summary>
            Gets a histogram of the image.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="channel">Channel of RGBA model</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.CDF(System.Int32[])">
            <summary>
            Gets an array of values of the density function.
            </summary>
            <param name="H">Histogram</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Equalize(System.Int32[])">
            <summary>
            Gets an array of equalized histogram values by recalculating the brightness density function.
            </summary>
            <param name="H">Histogram</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.OtsuThreshold(System.Drawing.Imaging.BitmapData)">
            <summary>
            Calculates the optimal threshold using the Otsu method for the original bitmap.
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.OtsuThreshold(System.Drawing.Bitmap)">
            <summary>
            Calculates the optimal threshold using the Otsu method for the original bitmap.
            </summary>
            <param name="Data">Bitmap</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.SISThreshold(System.Drawing.Imaging.BitmapData)">
            <summary>
            Calculates the optimal threshold for the original bitmap.
            </summary>
            <param name="bmData">Bitmap data</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.SISThreshold(System.Drawing.Bitmap)">
            <summary>
            Calculates the optimal threshold for the original bitmap.
            </summary>
            <param name="Data">Bitmap</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.MaxIndex(System.Double[])">
            <summary>
            Gets the index of the maximum element of the array.
            </summary>
            <param name="data">Array</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.MaxIndex(System.Int32[])">
            <summary>
            Gets the index of the maximum element of the array.
            </summary>
            <param name="data">Array</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.MinIndex(System.Double[])">
            <summary>
            Gets the index of the minimum element of the array.
            </summary>
            <param name="data">Array</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.MinIndex(System.Int32[])">
            <summary>
            Gets the index of the minimum element of the array.
            </summary>
            <param name="data">Array</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Omega(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Omega.
            </summary>
            <param name="init">Init</param>
            <param name="end">End</param>
            <param name="h">Histogram</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Mu(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Mean.
            </summary>
            <param name="init">Init</param>
            <param name="end">End</param>
            <param name="h">Histogram</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Sum(System.Int32[])">
            <summary>
            Returns the summary of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Mean(System.Int32[])">
            <summary>
            Returns the mean of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.StdDev(System.Int32[])">
            <summary>
            Returns the standart deviation of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.StdDev(System.Int32[],System.Double)">
            <summary>
            Returns the standart deviation of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <param name="mean">Mean</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Median(System.Int32[])">
            <summary>
            Returns the median of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.GetRange(System.Int32[],System.Double)">
            <summary>
            Returns range of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <param name="percent">Percent</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Entropy(System.Int32[])">
            <summary>
            Returns entropy of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <returns>Value</returns>
        </member>
        <member name="M:UMapx.Imaging.Statistics.Mode(System.Int32[])">
            <summary>
            Returns mode of a histogram.
            </summary>
            <param name="values">Histogram</param>
            <returns>Value</returns>
        </member>
        <member name="T:UMapx.Imaging.StereoAnaglyph">
            <summary>
            Defines the stereo effect filter for a pair of images.
            <remarks>
            More information can be found on the website:
            http://www.3dtv.at/Knowhow/AnaglyphComparison_en.aspx
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.StereoAnaglyph.#ctor(UMapx.Imaging.StereoAnaglyph.Anaglyph)">
            <summary>
            Initializes the stereo effect filter for a pair of images.
            </summary>
            <param name="algorithm">Algorithm</param>
        </member>
        <member name="P:UMapx.Imaging.StereoAnaglyph.Algorithm">
            <summary>
            Gets or sets the algorithm.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.StereoAnaglyph.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.StereoAnaglyph.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.StereoAnaglyph.Anaglyph">
            <summary>
            Defines the stereo effect creation algorithm.
            </summary>
            <remarks>
            More information can be found on the website:
            http://www.3dtv.at/Knowhow/AnaglyphComparison_en.aspx
            </remarks>
        </member>
        <member name="F:UMapx.Imaging.StereoAnaglyph.Anaglyph.True">
            <summary>
            Creates a stereo effect for a pair of images UMapxing to the following calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=0.299*R<sub>l</sub>+0.587*G<sub>l</sub>+0.114*B<sub>l</sub>;</item>
            <item>G<sub>a</sub>=0;</item>
            <item>B<sub>a</sub>=0.299*R<sub>r</sub>+0.587*G<sub>r</sub>+0.114*B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="F:UMapx.Imaging.StereoAnaglyph.Anaglyph.Gray">
            <summary>
            Creates a stereo effect for a pair of images UMapxing to the following calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=0.299*R<sub>l</sub>+0.587*G<sub>l</sub>+0.114*B<sub>l</sub>;</item>
            <item>G<sub>a</sub>=0.299*R<sub>r</sub>+0.587*G<sub>r</sub>+0.114*B<sub>r</sub>;</item>
            <item>B<sub>a</sub>=0.299*R<sub>r</sub>+0.587*G<sub>r</sub>+0.114*B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="F:UMapx.Imaging.StereoAnaglyph.Anaglyph.Color">
            <summary>
            Creates a stereo effect for a pair of images UMapxing to the following calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=R<sub>l</sub>;</item>
            <item>G<sub>a</sub>=G<sub>r</sub>;</item>
            <item>B<sub>a</sub>=B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="F:UMapx.Imaging.StereoAnaglyph.Anaglyph.HalfColor">
            <summary>
            Creates a stereo effect for a pair of images UMapxing to the following calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=0.299*R<sub>l</sub>+0.587*G<sub>l</sub>+0.114*B<sub>l</sub>;</item>
            <item>G<sub>a</sub>=G<sub>r</sub>;</item>
            <item>B<sub>a</sub>=B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="F:UMapx.Imaging.StereoAnaglyph.Anaglyph.Optimized">
            <summary>
            Creates a stereo effect for a pair of images UMapxing to the following calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=0.7*G<sub>l</sub>+0.3*B<sub>l</sub>;</item>
            <item>G<sub>a</sub>=G<sub>r</sub>;</item>
            <item>B<sub>a</sub>=B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="T:UMapx.Imaging.TemperatureCorrection">
            <summary>
            Defines the temperature correction filter.
            <remarks>
            The filter uses an approximation of the Planck curve.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TemperatureCorrection.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the temperature correction filter.
            </summary>
            <param name="temperature">Temperature [1E3K, 1E4K]</param>
            <param name="strength">Strenght [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.TemperatureCorrection.#ctor">
            <summary>
            Initializes the temperature correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.TemperatureCorrection.Temperature">
            <summary>
            Gets or sets the temperature [1E3K, 1E4K].
            </summary>
        </member>
        <member name="T:UMapx.Imaging.Texturer">
            <summary>
            Defines the texturing filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Texturer.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes the texturing filter.
            </summary>
            <param name="texture">Matrix</param>
        </member>
        <member name="M:UMapx.Imaging.Texturer.#ctor(System.Double[0:,0:],System.Double)">
            <summary>
            Initializes the texturing filter.
            </summary>
            <param name="texture">Matrix</param>
            <param name="depth">Depth [0, 1]</param>
        </member>
        <member name="P:UMapx.Imaging.Texturer.Texture">
            <summary>
            Gets or sets the texture matrix.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Texturer.Depth">
            <summary>
            Gets or sets the depth value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Wood(System.Int32,System.Int32,System.Double)">
            <summary>
            Implements the construction of a wood texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="rings">Rings</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Textile(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a textile texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Marble(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Implements the construction of a marble texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <param name="yPeriod">Y-period</param>
            <param name="xPeriod">X-period</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Labyrinth(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a labyrinth texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Imaging.Texturer.Clouds(System.Int32,System.Int32)">
            <summary>
            Implements the construction of a clouds texture.
            </summary>
            <param name="m">Height</param>
            <param name="l">Width</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Imaging.Threshold">
            <summary>
            Defines the threshold filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Threshold.#ctor(System.Double,UMapx.Imaging.Space)">
            <summary>
            Initializes the threshold filter.
            </summary>
            <param name="threshold">Threshold [0, 1]</param>
            <param name="space">Color space</param>
        </member>
        <member name="M:UMapx.Imaging.Threshold.#ctor">
            <summary>
            Initializes the threshold filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Threshold.Value">
            <summary>
            Gets or sets the threshold value [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Threshold.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.ToneDiffusionDithering">
            <summary>
            Defines the tone diffusion dithering filter.
            <remarks>
            Filter usage example:
            https://en.wikipedia.org/wiki/Dither
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.#ctor">
            <summary>
            Initializes the tone diffusion dithering filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.#ctor(System.Double[0:,0:])">
            <summary>
            Initializes the tone diffusion dithering filter.
            </summary>
            <param name="matrix">Matrix</param>
        </member>
        <member name="P:UMapx.Imaging.ToneDiffusionDithering.Matrix">
            <summary>
            Gets or sets the tone diffusion dithering matrix. 
            </summary>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Order(System.Int32)">
            <summary>
            Initializes the order dithering filter.
            <remarks>
            More information can be found on the website:
            http://en.wikipedia.org/wiki/Ordered_dithering
            Filter usage example:
            https://en.wikipedia.org/wiki/Dither
            </remarks>
            </summary>
            <param name="radius">Radius [0, 255]</param>
            <returns>Tone diffusion dithering filter</returns>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Random(System.Int32)">
            <summary>
            Initializes the random dithering filter.
            </summary>
            <param name="radius">Radius [0, 255]</param>
            <returns>Tone diffusion dithering filter</returns>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Basic">
            <summary>
            Initializes the classic dithering filter.
            </summary>
            <returns>Tone diffusion dithering filter</returns>
        </member>
        <member name="M:UMapx.Imaging.ToneDiffusionDithering.Bayer">
            <summary>
            Initializes the Bayer dithering filter.
            </summary>
            <returns>Tone diffusion dithering filter</returns>
        </member>
        <member name="T:UMapx.Imaging.TopHat">
            <summary>
            Defines the top-hat filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TopHat.#ctor(System.Int32)">
            <summary>
            Initializes the top-hat filter.
            </summary>
            <param name="radius">Radius</param>
        </member>
        <member name="M:UMapx.Imaging.TopHat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the top-hat filter.
            </summary>
            <param name="width">Filter width</param>
            <param name="height">Filter height</param>
        </member>
        <member name="M:UMapx.Imaging.TopHat.#ctor(UMapx.Core.SizeInt)">
            <summary>
            Initializes the top-hat filter.
            </summary>
            <param name="size">Filter size</param>
        </member>
        <member name="P:UMapx.Imaging.TopHat.Size">
            <summary>
            Gets or sets the filter size.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TopHat.Apply(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
            <param name="bmSrc">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.TopHat.Apply(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
            <param name="Src">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.TopHat.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.TransparencyCorrection">
            <summary>
            Defines the transparency correction filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TransparencyCorrection.#ctor(System.Double)">
            <summary>
            Initializes the transparency correction filter.
            </summary>
            <param name="transparency">Transparency [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.TransparencyCorrection.#ctor">
            <summary>
            Initializes the transparency correction filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.TransparencyCorrection.Transparency">
            <summary>
            Gets or sets the transparency value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TransparencyCorrection.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.TransparencyCorrection.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.TransparencyCorrection.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.Water">
            <summary>
            Defines the water filter.
            <remarks>
            More information can be found on the website:
            https://www.codeproject.com/Articles/2122/Image-Processing-for-Dummies-with-C-and-GDI-Part
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Water.#ctor(System.Int32)">
            <summary>
            Initializes the water filter.
            </summary>
            <param name="value">Value [0, 100]</param>
        </member>
        <member name="M:UMapx.Imaging.Water.#ctor">
            <summary>
            Initializes the water filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.Water.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.Water.Rebuild">
            <summary>
            Implements filter rebuilding.
            </summary>
        </member>
        <member name="T:UMapx.Imaging.YCbCrFilter">
            <summary>
            Defines the YCbCr filter.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.YCbCrFilter.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the YCbCr filter.
            </summary>
            <param name="y">Y [-1, 1]</param>
            <param name="cb">Cb [-1, 1]</param>
            <param name="cr">Cr [-1, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.YCbCrFilter.#ctor">
            <summary>
            Initializes the YCbCr filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YCbCrFilter.Y">
            <summary>
            Y [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YCbCrFilter.Cb">
            <summary>
            Cb [-1, 1].
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YCbCrFilter.Cr">
            <summary>
            Cr [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.YCbCrFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.YCbCrFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="T:UMapx.Imaging.YUVPhotoFilter">
            <summary>
            Defines the color filter based on the YUV structure.
            </summary>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.#ctor(System.Drawing.Color,System.Double)">
            <summary>
            Initializes the color filter based on the YUV structure.
            </summary>
            <param name="color">Color</param>
            <param name="strength">Strenght [0, 1]</param>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.#ctor">
            <summary>
            Initializes the color filter based on the YUV structure.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Color">
            <summary>
            Gets or sets the filter color.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Strength">
            <summary>
            Gets or sets the filter strength [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.Apply(System.Drawing.Imaging.BitmapData)">
            <summary>
            Apply filter.
            </summary>
            <param name="bmData">Bitmap data</param>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.Apply(System.Drawing.Bitmap)">
            <summary>
            Apply filter.
            </summary>
            <param name="Data">Bitmap</param>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.IsGrayColor(System.Drawing.Color)">
            <summary>
            Checks if the color is a shade of gray.
            </summary>
            <param name="color">Color</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:UMapx.Imaging.YUVPhotoFilter.AddColor(UMapx.Colorspace.YUV,UMapx.Colorspace.YUV)">
            <summary>
            Blend two colors in YUV space.
            </summary>
            <param name="yuv1">First color</param>
            <param name="yuv2">Second color</param>
            <returns>YUV</returns>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Sepia">
            <summary>
            Initializes the sepia filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Orange">
            <summary>
            Initializes the orange filter.
            </summary>
        </member>
        <member name="P:UMapx.Imaging.YUVPhotoFilter.Yellow">
            <summary>
            Initializes the yellow filter.
            </summary>
        </member>
        <member name="T:UMapx.Response.FIR">
            <summary>
            Defines a filter with a finite impulse response.
            <remarks>
            A filter with a finite impulse response (transverse filter, FIR filter or FIR filter) is one of the types of linear
            digital filters, a characteristic feature of which is the limited time of its impulse response
            (from some point in time it becomes exactly equal to zero). Such a filter is also called non-recursive due to the lack of feedback.
            The denominator of the transfer function of such a filter is a certain constant.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Response.FIR.#ctor">
            <summary>
            Initializes a filter with a finite impulse response.
            </summary>
        </member>
        <member name="M:UMapx.Response.FIR.#ctor(System.Double[])">
            <summary>
            Initializes a filter with a finite impulse response.
            </summary>
            <param name="b">Array of signal coefficients</param>
        </member>
        <member name="P:UMapx.Response.FIR.B">
            <summary>
            Gets or sets the array of signal coefficients.
            </summary>
        </member>
        <member name="M:UMapx.Response.FIR.Reaction(System.Double[])">
            <summary>
            Returns an array of filter response values when a discrete function is supplied.
            </summary>
            <param name="u">Array</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.FIR.Amplitude(System.Double[])">
            <summary>
            Returns the frequency response of the filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.FIR.Phase(System.Double[])">
            <summary>
            Returns the phase-frequency response of a filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.FIR.Amplitude(System.Double)">
            <summary>
            Returns the amplitude value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Response.FIR.Phase(System.Double)">
            <summary>
            Returns the phase value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Response.FIR.LowPass">
            <summary>
            Gets the finished low pass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.FIR.HighPass">
            <summary>
            Gets the finished high-pass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.FIR.BandPass">
            <summary>
            Gets the finished bandpass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.FIR.Notch">
            <summary>
            Gets the finished notch filter.
            </summary>
        </member>
        <member name="T:UMapx.Response.IIR">
            <summary>
            Defines a filter with an infinite impulse response.
            <remarks>
            Filter with infinite impulse response (recursive filter, IIR filter or IIR filter) - a linear electronic filter,
            using one or more of its outputs as an input, i.e. forms a feedback. The main property of such filters
            is that their impulse response is of infinite length in the time domain, and the transfer function
            has a fractional rational look.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Response.IIR.#ctor">
            <summary>
            Initializes a filter with an infinite impulse response.
            </summary>
        </member>
        <member name="M:UMapx.Response.IIR.#ctor(System.Double[],System.Double[])">
            <summary>
            Initializes a filter with an infinite impulse response.
            </summary>
            <param name="b">Array of signal coefficients</param>
            <param name="a">Array of feedback coefficients</param>
        </member>
        <member name="P:UMapx.Response.IIR.A">
            <summary>
            Gets or sets the array of feedback coefficients.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.B">
            <summary>
            Gets or sets the array of signal coefficients.
            </summary>
        </member>
        <member name="M:UMapx.Response.IIR.Reaction(System.Double[])">
            <summary>
            Returns an array of filter response values when a discrete function is supplied.
            </summary>
            <param name="u">Array</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IIR.Amplitude(System.Double[])">
            <summary>
            Returns the frequency response of the filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IIR.Phase(System.Double[])">
            <summary>
            Returns the phase-frequency response of a filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IIR.Amplitude(System.Double)">
            <summary>
            Returns the amplitude value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Response.IIR.Phase(System.Double)">
            <summary>
            Returns the phase value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="P:UMapx.Response.IIR.Stability">
            <summary>
            Checks if the specified filter is stable.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.LowPass">
            <summary>
            Gets the finished low pass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.HighPass">
            <summary>
            Gets the finished high-pass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.BandPass">
            <summary>
            Gets the finished bandpass filter.
            </summary>
        </member>
        <member name="P:UMapx.Response.IIR.Notch">
            <summary>
            Gets the finished notch filter.
            </summary>
        </member>
        <member name="T:UMapx.Response.IResponse">
            <summary>
            Defines the general interface of response Filters.
            </summary>
        </member>
        <member name="M:UMapx.Response.IResponse.Reaction(System.Double[])">
            <summary>
            Returns an array of filter response values when a discrete function is supplied.
            </summary>
            <param name="u">Array</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IResponse.Amplitude(System.Double[])">
            <summary>
            Returns the frequency response of the filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IResponse.Phase(System.Double[])">
            <summary>
            Returns the phase-frequency response of a filter.
            </summary>
            <param name="w">Array of frequencies (rad / s)</param>
            <returns>Discrete function in a Cartesian coordinate system</returns>
        </member>
        <member name="M:UMapx.Response.IResponse.Amplitude(System.Double)">
            <summary>
            Returns the amplitude value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Response.IResponse.Phase(System.Double)">
            <summary>
            Returns the phase value at the given frequency.
            </summary>
            <param name="w">Frequency (rad / s)</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Transform.CompressFilter">
            <summary>
            Defines the compression filter by threshold value.
            </summary>
        </member>
        <member name="F:UMapx.Transform.CompressFilter.threshold">
            <summary>
            Threshold value.
            </summary>
        </member>
        <member name="F:UMapx.Transform.CompressFilter.compresstype">
            <summary>
            Compress type.
            </summary>
        </member>
        <member name="M:UMapx.Transform.CompressFilter.#ctor">
            <summary>
            Initializes the compression filter by threshold value.
            </summary>
        </member>
        <member name="M:UMapx.Transform.CompressFilter.#ctor(System.Double,UMapx.Transform.CompressFilter.Compress)">
            <summary>
            Initializes the compression filter by threshold value.
            </summary>
            <param name="threshold">Threshold value</param>
            <param name="compresstype">Compress type</param>
        </member>
        <member name="P:UMapx.Transform.CompressFilter.CompressType">
            <summary>
            Gets or sets the compress type.
            </summary>
        </member>
        <member name="P:UMapx.Transform.CompressFilter.Threshold">
            <summary>
            Gets or sets the threshold value.
            </summary>
        </member>
        <member name="M:UMapx.Transform.CompressFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.CompressFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.CompressFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.CompressFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="T:UMapx.Transform.CompressFilter.Compress">
            <summary>
            Defines the compress type.
            </summary>
        </member>
        <member name="F:UMapx.Transform.CompressFilter.Compress.Abs">
            <summary>
            Absolute compression.
            </summary>
        </member>
        <member name="F:UMapx.Transform.CompressFilter.Compress.Under">
            <summary>
            ompression of values is less than threshold.
            </summary>
        </member>
        <member name="F:UMapx.Transform.CompressFilter.Compress.Over">
            <summary>
            Compression of values is greater than the threshold.
            </summary>
        </member>
        <member name="T:UMapx.Transform.CosineTransform">
            <summary>
            Defines the cosine transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_cosine_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.CosineTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Initializes the cosine transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.CosineTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Cosine(System.Int32)">
            <summary>
            Implements the construction of the cosine transform matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Forward(System.Double[])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Backward(System.Double[])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.CosineTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.DeltaTransform">
            <summary>
            Defines the delta transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Delta_encoding
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Initializes the delta transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.DeltaTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Forward(System.Double[])">
            <summary>
            Forward delta transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Backward(System.Double[])">
            <summary>
            Backward delta transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward delta transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward delta transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward delta transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward delta transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward delta transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.DeltaTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward delta transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.DomainTransformFilter">
            <summary>
            Defines the domain transform filter.
            <remarks>
            This filter is a computationally effective analogue of a bilateral filter.
            More information can be found on the website:
            http://www.inf.ufrgs.br/~eslgastal/DomainTransform/Gastal_Oliveira_SIGGRAPH2011_Domain_Transform.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.#ctor(System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Initializes the domain transform filter.
            </summary>
            <param name="sigma_s">σs</param>
            <param name="sigma_r">σr</param>
            <param name="iterations">Number of iterations</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.DomainTransformFilter.SigmaS">
            <summary>
            Gets or sets the value of σs.
            </summary>
        </member>
        <member name="P:UMapx.Transform.DomainTransformFilter.SigmaR">
            <summary>
            Gets or sets the value of σr.
            </summary>
        </member>
        <member name="P:UMapx.Transform.DomainTransformFilter.Iterations">
            <summary>
            Gets or sets the number of iterations.
            </summary>
        </member>
        <member name="P:UMapx.Transform.DomainTransformFilter.Factor">
            <summary>
            Gets or sets the factor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.domainfilter(System.Double[0:,0:],System.Double,System.Double,System.Int32)">
            <summary>
            Domain transform filter.
            </summary>
            <param name="I">Input signal</param>
            <param name="sigma_s">High sigma</param>
            <param name="sigma_r">Low sigma</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.domainfilter(UMapx.Core.Complex[0:,0:],System.Double,System.Double,System.Int32)">
            <summary>
            Domain transform filter.
            </summary>
            <param name="I">Input signal</param>
            <param name="sigma_s">High sigma</param>
            <param name="sigma_r">Low sigma</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.domainfilter(System.Double[],System.Double,System.Double,System.Int32)">
            <summary>
            Domain transform filter.
            </summary>
            <param name="I">Input signal</param>
            <param name="sigma_s">High sigma</param>
            <param name="sigma_r">Low sigma</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.domainfilter(UMapx.Core.Complex[],System.Double,System.Double,System.Int32)">
            <summary>
            Domain transform filter.
            </summary>
            <param name="I">Input signal</param>
            <param name="sigma_s">High sigma</param>
            <param name="sigma_r">Low sigma</param>
            <param name="iterations">Number of iterations</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.tdrf_h(System.Double[0:,0:],System.Double[0:,0:],System.Double)">
            <summary>
            Transformed domain recursive filter (horizontal).
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.tdrf_v(System.Double[0:,0:],System.Double[0:,0:],System.Double)">
            <summary>
            Transformed domain recursive filter (vertical).
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.tdrf_h(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Transformed domain recursive filter (horizontal).
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.tdrf_v(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:],System.Double)">
            <summary>
            Transformed domain recursive filter (vertical).
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.tdrf(System.Double[],System.Double[],System.Double)">
            <summary>
            Transformed domain recursive filter.
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.DomainTransformFilter.tdrf(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Double)">
            <summary>
            Transformed domain recursive filter.
            </summary>
            <param name="F">Input signal</param>
            <param name="D">Difference</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="T:UMapx.Transform.FastCosineTransform">
            <summary>
            Defines the fast cosine transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_cosine_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastCosineTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastCosineTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Initializes the fast cosine transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastCosineTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Forward(System.Double[])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Backward(System.Double[])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastCosineTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FastFourierTransform">
            <summary>
            Defines the fast Fourier transform using the Cooley-Tukey algorithm.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastFourierTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastFourierTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Fourier transform using the Cooley-Tukey algorithm.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastFourierTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastFourierTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Forward(System.Double[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Backward(System.Double[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.fft(UMapx.Core.Complex[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.ifft(UMapx.Core.Complex[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.GetReversedBits(System.Int32)">
            <summary>
            Gets an array with pointers to data members that must be replaced before the FFT.
            </summary>
            <param name="numberOfBits">Number of bits</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.ForwardComplexRotation(System.Int32)">
            <summary>
            Gets the forward rotation of a complex number.
            </summary>
            <param name="numberOfBits">Number of bits</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.BackwardComplexRotation(System.Int32)">
            <summary>
            Gets the backward rotation of a complex number.
            </summary>
            <param name="numberOfBits">Number of bits</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.ReorderData(UMapx.Core.Complex[])">
            <summary>
            Reorders data to use FFT.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Pow2(System.Int32)">
            <summary>
            Computes power of 2.
            </summary>
            <param name="power">Power</param>
            <returns>Integer number</returns>
        </member>
        <member name="M:UMapx.Transform.FastFourierTransform.Log2(System.Int32)">
            <summary>
            Calculates the base 2 logarithm.
            </summary>
            <param name="x">Integer number</param>
            <returns>Integer number</returns>
        </member>
        <member name="T:UMapx.Transform.FastHartleyTransform">
            <summary>
            Defines the fast Hartley transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_Hartley_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastHartleyTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Hartley transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastHartleyTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastHartleyTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Forward(System.Double[])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Backward(System.Double[])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHartleyTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FastHilbertTransform">
            <summary>
            Defines the fast Hilbert transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hilbert_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastHilbertTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastHilbertTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Hilbert transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastHilbertTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastHilbertTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Forward(System.Double[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Backward(System.Double[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastHilbertTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FastLaplaceTransform">
            <summary>
            Defines the fast Laplace transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Laplace_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastLaplaceTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastLaplaceTransform.sigma">
            <summary>
            Standard deviation.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastLaplaceTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastLaplaceTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.#ctor(System.Double,System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Laplace transform.
            </summary>
            <param name="sigma">Standard deviation (0, 1)</param>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastLaplaceTransform.Sigma">
            <summary>
            Gets or sets the standard deviation (0, 1).
            <remarks>
            If σ = 0, then the Laplace transform takes the form of a Fourier transform.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastLaplaceTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastLaplaceTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Forward(System.Double[])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Backward(System.Double[])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.laplace(UMapx.Core.Complex[],System.Double)">
            <summary>
            
            </summary>
            <param name="v">Array</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="M:UMapx.Transform.FastLaplaceTransform.invlaplace(UMapx.Core.Complex[],System.Double)">
            <summary>
            
            </summary>
            <param name="v">Array</param>
            <param name="sigma">Sigma</param>
        </member>
        <member name="T:UMapx.Transform.FastSineTransform">
            <summary>
            Defines the fast sine transform.
            <remarks>
            NOT RECOMMENDED.
            
            More information can be found on the website:
            http://sernam.ru/book_prett1.php?id=91
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastSineTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastSineTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Defines the fast sine transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastSineTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Forward(System.Double[])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Backward(System.Double[])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward cosine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward cosine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastSineTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FastWalshHadamardTransform">
            <summary>
            Defines the fast Walsh-Hadamard transform.
            <remarks>
            More information can be found on the website:
            http://www.mathworks.com/matlabcentral/fileexchange/6879-fast-walsh-hadamard-transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastWalshHadamardTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FastWalshHadamardTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the fast Walsh-Hadamard transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FastWalshHadamardTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FastWalshHadamardTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Forward(System.Double[])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Backward(System.Double[])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.fwht(System.Double[])">
             <summary>
            
             </summary>
             <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.FastWalshHadamardTransform.fwht(UMapx.Core.Complex[])">
            <summary>
            
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="T:UMapx.Transform.FourierTransform">
            <summary>
            Defines the Fourier transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_Fourier_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.FourierTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.FourierTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Fourier transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.FourierTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FourierTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Fourier(System.Int32)">
            <summary>
            Implements the construction of the Fourier matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Forward(System.Double[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Backward(System.Double[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.FourierTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.FrequencyFilter">
            <summary>
            Defines the frequency filter.
            </summary>
        </member>
        <member name="P:UMapx.Transform.FrequencyFilter.FrequencyRange">
            <summary>
            Gets or sets the frequency range.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.#ctor">
            <summary>
            Initializes the frequency filter.
            </summary>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.#ctor(UMapx.Core.RangeInt)">
            <summary>
            Initializes the frequency filter.
            </summary>
            <param name="frequencyRange">Frequency range</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the frequency filter.
            </summary>
            <param name="min">Minimum frequency</param>
            <param name="max">Maximum frequency</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.FrequencyFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="T:UMapx.Transform.GaussianPyramidTransform">
            <summary>
            Defines the Gaussian pyramid transform.
            <remarks>
            More information can be found on the website:
            http://www.cs.toronto.edu/~jepson/csc320/notes/pyramids.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.#ctor">
            <summary>
            Initializes the Gaussian pyramid transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the Gaussian pyramid transform.
            </summary>
            <param name="levels">Number of levels</param>
            <param name="radius">Radius</param>
        </member>
        <member name="P:UMapx.Transform.GaussianPyramidTransform.Levels">
            <summary>
            Gets or sets number of levels.
            </summary>
        </member>
        <member name="P:UMapx.Transform.GaussianPyramidTransform.Radius">
            <summary>
            Gets or sets radius.
            </summary>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Gaussian pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Forward(System.Double[])">
            <summary>
            Forward Gaussian pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Backward(System.Double[0:,0:][])">
            <summary>
            Backward Gaussian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Backward(System.Double[][])">
            <summary>
            Backward Gaussian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Gaussian pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Gaussian pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Backward(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Backward Gaussian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.Backward(UMapx.Core.Complex[][])">
            <summary>
            Backward Gaussian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="P:UMapx.Transform.GaussianPyramidTransform.Filter">
            <summary>
            Gaussian filter.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.upsample(System.Double[0:,0:],System.Int32)">
            <summary>
            
            </summary>
            <param name="u">Matrix</param>
            <param name="radius">Radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.upsample(System.Double[],System.Int32)">
            <summary>
             
            </summary>
            <param name="u">Array</param>
            <param name="radius">Radius</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.downsample(System.Double[0:,0:],System.Int32)">
            <summary>
            
            </summary>
            <param name="u">Matrix</param>
            <param name="radius">Radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.downsample(System.Double[],System.Int32)">
            <summary>
            
            </summary>
            <param name="u">Matrix</param>
            <param name="radius">Radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.add(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.add(System.Double[],System.Double[])">
            <summary>
            
            </summary>
            <param name="m">Array</param>
            <param name="n">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.sub(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.sub(System.Double[],System.Double[])">
            <summary>
            
            </summary>
            <param name="m">Array</param>
            <param name="n">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.upsample(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            
            </summary>
            <param name="u">Matrix</param>
            <param name="radius">Radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.upsample(UMapx.Core.Complex[],System.Int32)">
            <summary>
            
            </summary>
            <param name="u">Array</param>
            <param name="radius">Radius</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.downsample(UMapx.Core.Complex[0:,0:],System.Int32)">
            <summary>
            
            </summary>
            <param name="u">Matrix</param>
            <param name="radius">Radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.downsample(UMapx.Core.Complex[],System.Int32)">
            <summary>
            
            </summary>
            <param name="u">Matrix</param>
            <param name="radius">Radius</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.add(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.add(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            
            </summary>
            <param name="m">Array</param>
            <param name="n">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.sub(UMapx.Core.Complex[0:,0:],UMapx.Core.Complex[0:,0:])">
            <summary>
            
            </summary>
            <param name="m">Matrix</param>
            <param name="n">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.GaussianPyramidTransform.sub(UMapx.Core.Complex[],UMapx.Core.Complex[])">
            <summary>
            
            </summary>
            <param name="m">Array</param>
            <param name="n">Array</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Transform.GuidedFilter">
            <summary>
            Defines the guided filter.
            <remarks>
            This filter is a computationally effective analogue of a bilateral filter.
            More information can be found on the website:
            http://kaiminghe.com/eccv10/index.html
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.GuidedFilter.eps">
            <summary>
            Epsilon.
            </summary>
        </member>
        <member name="F:UMapx.Transform.GuidedFilter.factor">
            <summary>
            Factor.
            </summary>
        </member>
        <member name="F:UMapx.Transform.GuidedFilter.radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Initializes the guided filter.
            </summary>
            <param name="radius">Radius (>1)</param>
            <param name="eps">Epsilon (0, 1)</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.GuidedFilter.Radius">
            <summary>
            Gets or sets the radius.
            </summary>
        </member>
        <member name="P:UMapx.Transform.GuidedFilter.Eps">
            <summary>
            Gets or sets the value of the epsilon (0, 1).
            <remarks>
            Optimal value ε = 0.025.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Transform.GuidedFilter.Factor">
            <summary>
            Gets or sets the factor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.FromBilateral(System.Int32,System.Double)">
            <summary>
            Creates a guided filter with the specified parameters for a bilateral filter.
            </summary>
            <param name="s">σs</param>
            <param name="r">σr</param>
            <returns>Guided filter</returns>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.guidedfilter(System.Double[0:,0:],System.Int32,System.Double)">
            <summary>
            Guided filer function.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Filter size</param>
            <param name="eps">Epsilon (0, 1)</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.guidedfilter(UMapx.Core.Complex[0:,0:],System.Int32,System.Double)">
            <summary>
            Guided filer function.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Filter size</param>
            <param name="eps">Epsilon (0, 1)</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.guidedfilter(System.Double[],System.Int32,System.Double)">
            <summary>
            Guided filer function.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Filter size</param>
            <param name="eps">Epsilon (0, 1)</param>
        </member>
        <member name="M:UMapx.Transform.GuidedFilter.guidedfilter(UMapx.Core.Complex[],System.Int32,System.Double)">
            <summary>
            Guided filer function.
            </summary>
            <param name="input">Input signal</param>
            <param name="r">Filter size</param>
            <param name="eps">Epsilon (0, 1)</param>
        </member>
        <member name="T:UMapx.Transform.HartleyTransform">
            <summary>
            Defines the Hartley transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_Hartley_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.HartleyTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.HartleyTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Hartley transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.HartleyTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.HartleyTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Hartley(System.Int32)">
            <summary>
            Implements the construction of the Hartley transform matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Forward(System.Double[])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Backward(System.Double[])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Hartley transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HartleyTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Hartley transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.HilbertTransform">
            <summary>
            Defines the Hilbert transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Hilbert_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.HilbertTransform.FFT">
            <summary>
            Fourier transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Hilbert transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.HilbertTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.HilbertTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Hilbert transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Hilbert transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Forward(System.Double[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Backward(System.Double[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.hilbertf(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Implements the rearrangement of the spectrum UMapxing to Hilbert.
            </summary>
            <param name="f">Spectrum</param>
            <param name="n">Length</param>
        </member>
        <member name="M:UMapx.Transform.HilbertTransform.hilbertb(UMapx.Core.Complex[],UMapx.Core.Complex[],System.Int32)">
            <summary>
            Implements the rearrangement of the spectrum UMapxing to Hilbert.
            </summary>
            <param name="a">Array</param>
            <param name="f">Spectrum</param>
            <param name="n">Length</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Transform.IFilter">
            <summary>
            Defines the filter interface.
            </summary>
        </member>
        <member name="M:UMapx.Transform.IFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.IFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.IFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.IFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="T:UMapx.Transform.IPyramidTransform">
            <summary>
            Defines the pyramid transform interface.
            </summary>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Backward(System.Double[0:,0:][])">
            <summary>
            Backward pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Forward(System.Double[])">
            <summary>
            Forward pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Backward(System.Double[][])">
            <summary>
            Backward pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Backward(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Backward pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.IPyramidTransform.Backward(UMapx.Core.Complex[][])">
            <summary>
            Backward pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Transform.ITransform">
            <summary>
            Defines the transform interface.
            </summary>
        </member>
        <member name="M:UMapx.Transform.ITransform.Forward(System.Double[])">
            <summary>
            Forward transform.
            </summary>
            <param name="data">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Backward(System.Double[])">
            <summary>
            Backward transform.
            </summary>
            <param name="data">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward transform.
            </summary>
            <param name="data">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward transform.
            </summary>
            <param name="data">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.ITransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.LaplaceTransform">
            <summary>
            Defines the Laplace transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Laplace_transform
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.LaplaceTransform.sigma">
            <summary>
            Standard deviation.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LaplaceTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LaplaceTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.#ctor(System.Double,System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Laplace transform.
            </summary>
            <param name="sigma">Standard deviation (0, 1)</param>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.LaplaceTransform.Sigma">
            <summary>
            Gets or sets the standard deviation (0, 1).
            <remarks>
            If σ = 0, then the Laplace transform takes the form of a Fourier transform.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Transform.LaplaceTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LaplaceTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Laplace(System.Int32,System.Double,System.Boolean)">
            <summary>
            Implements the construction of the Laplace matrix.
            </summary>
            <param name="n">Size</param>
            <param name="sigma">Standard deviation (0, 1)</param>
            <param name="backward">Return backward transformation matrix or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Laplace transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Laplace transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Forward(System.Double[])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Backward(System.Double[])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Fourier transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplaceTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Fourier transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.LaplacianPyramidFilter">
            <summary>
            Defines the Laplace pyramid filter.
            <remarks>
            More information can be found on the website:
            http://www.cs.toronto.edu/~jepson/csc320/notes/pyramids.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.#ctor(UMapx.Transform.LaplacianPyramidTransform,System.Double)">
            <summary>
            Initializes the Laplace pyramid filter.
            </summary>
            <param name="lap">Laplacian pyramid</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.LaplacianPyramidFilter.LaplacianPyramid">
            <summary>
            Gets or sets the Laplacian pyramid.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LaplacianPyramidFilter.Factor">
            <summary>
            Gets or sets the factor [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="T:UMapx.Transform.LaplacianPyramidTransform">
            <summary>
            Defines the Laplacian pyramid transform.
            <remarks>
            More information can be found on the website:
            http://www.cs.toronto.edu/~jepson/csc320/notes/pyramids.pdf
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.#ctor">
            <summary>
            Initializes the Laplacian pyramid transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes the Laplacian pyramid transform.
            </summary>
            <param name="levels">Number of levels</param>
            <param name="radius">Radius</param>
        </member>
        <member name="P:UMapx.Transform.LaplacianPyramidTransform.Levels">
            <summary>
            Gets or sets number of levels.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LaplacianPyramidTransform.Radius">
            <summary>
            Gets or sets radius.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(System.Double[])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Backward(System.Double[0:,0:][])">
            <summary>
            Backward Laplacian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Backward(System.Double[][])">
            <summary>
            Backward Laplacian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Matrix</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Array</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Backward(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Backward Laplacian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Backward(UMapx.Core.Complex[][])">
            <summary>
            Backward Laplacian pyramid transform.
            </summary>
            <param name="pyramid">Pyramid</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(System.Double[0:,0:][])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Gaussian pyramid</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(System.Double[][])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Gaussian pyramid</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Gaussian pyramid</param>
            <returns>Pyramid</returns>
        </member>
        <member name="M:UMapx.Transform.LaplacianPyramidTransform.Forward(UMapx.Core.Complex[][])">
            <summary>
            Forward Laplacian pyramid transform.
            </summary>
            <param name="data">Gaussian pyramid</param>
            <returns>Pyramid</returns>
        </member>
        <member name="T:UMapx.Transform.LocalLaplacianFilter">
            <summary>
            Defines the local Laplace pyramid filter.
            <remarks>
            More information can be found on the website:
            https://people.csail.mit.edu/sparis/publi/2011/siggraph/
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.sigma">
            <summary>
            Sigma.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.factor">
            <summary>
            Factor.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.n">
            <summary>
            Number of samples.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.levels">
            <summary>
            Number of levels.
            </summary>
        </member>
        <member name="F:UMapx.Transform.LocalLaplacianFilter.radius">
            <summary>
            Radius.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.#ctor(System.Int32,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes the local Laplace pyramid filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="sigma">σ-parameter</param>
            <param name="n">Number of samples</param>
            <param name="levels">Number of levels</param>
            <param name="factor">Factor [-1, 1]</param>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.Radius">
            <summary>
            Gets or sets radius.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.Sigma">
            <summary>
            Gets or sets the value of σ-parameter.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.Factor">
            <summary>
            Gets or sets the factor.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.N">
            <summary>
            Gets or sets the number of samples.
            </summary>
        </member>
        <member name="P:UMapx.Transform.LocalLaplacianFilter.Levels">
            <summary>
            Gets or sets the number of levels.
            </summary>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Apply(System.Double[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Apply(System.Double[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Apply filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.llfilter(System.Double[0:,0:],System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Local laplacian filter.
            </summary>
            <param name="radius">Radius</param>
            <param name="input">Input data</param>
            <param name="sigma">Sigma</param>
            <param name="factor">Factor</param>
            <param name="n">Number of steps</param>
            <param name="levels">Levels</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.llfilter(System.Double[],System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Local laplacian filter.
            </summary>
            <param name="input">Input data</param>
            <param name="radius">Radius</param>
            <param name="sigma">Sigma</param>
            <param name="factor">Factor</param>
            <param name="n">Number of steps</param>
            <param name="levels">Levels</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Rec(System.Double,System.Double,System.Double)">
            <summary>
            Reconstruct function.
            </summary>
            <param name="x">Argument</param>
            <param name="i">Increment</param>
            <param name="step">Step</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Rec(System.Double,System.Double,System.Int32)">
            <summary>
            Reconstruct function.
            </summary>
            <param name="i">Increment</param>
            <param name="step">Step</param>
            <param name="length">Length of table</param>
            <returns>Table</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Rem(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Remapping function.
            </summary>
            <param name="x">Argument</param>
            <param name="sigma">Sigma</param>
            <param name="factor">Factor</param>
            <param name="i">Increment</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Transform.LocalLaplacianFilter.Rem(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Remapping function.
            </summary>
            <param name="sigma">Sigma</param>
            <param name="factor">Factor</param>
            <param name="i">Increment</param>
            <param name="length">Length of table</param>
            <returns>Table</returns>
        </member>
        <member name="T:UMapx.Transform.MultidimensionalFilter">
            <summary>
            Defines the multidimensional filter.
            </summary>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalFilter.#ctor(UMapx.Transform.IFilter)">
            <summary>
            Initializes the multidimensional filter.
            </summary>
            <param name="filter">IFilter</param>
        </member>
        <member name="P:UMapx.Transform.MultidimensionalFilter.Filter">
            <summary>
            Gets or sets filter.
            </summary>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalFilter.Apply(System.Double[][])">
            <summary>
            Forward multidimensional filter.
            </summary>
            <param name="A">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalFilter.Apply(System.Double[0:,0:][])">
            <summary>
            Forward multidimensional filter.
            </summary>
            <param name="A">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalFilter.Apply(UMapx.Core.Complex[][])">
            <summary>
            Forward multidimensional filter.
            </summary>
            <param name="A">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalFilter.Apply(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Forward multidimensional filter.
            </summary>
            <param name="A">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="T:UMapx.Transform.MultidimensionalPyramidTransform">
            <summary>
            Defines the multidimensional pyramid transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.#ctor(UMapx.Transform.IPyramidTransform)">
            <summary>
            Initializes the multidimensional pyramid transform.
            </summary>
            <param name="transform">IPyramidTransform</param>
        </member>
        <member name="P:UMapx.Transform.MultidimensionalPyramidTransform.Transform">
            <summary>
            Gets or sets pyramid transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Forward(System.Double[][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="A">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Forward(System.Double[0:,0:][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="A">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Forward(UMapx.Core.Complex[][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="A">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Forward(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="A">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Backward(System.Double[][][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Backward(System.Double[0:,0:][][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="B">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Backward(UMapx.Core.Complex[][][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalPyramidTransform.Backward(UMapx.Core.Complex[0:,0:][][])">
            <summary>
            Forward multidimensional pyramid transform.
            </summary>
            <param name="B">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="T:UMapx.Transform.MultidimensionalTransform">
            <summary>
            Defines the multidimensional transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.#ctor(UMapx.Transform.ITransform)">
            <summary>
            Initializes the multidimensional transform.
            </summary>
            <param name="transform">ITransform</param>
        </member>
        <member name="P:UMapx.Transform.MultidimensionalTransform.Transform">
            <summary>
            Gets or sets transform.
            </summary>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Forward(System.Double[][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="A">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Forward(System.Double[0:,0:][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="A">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Forward(UMapx.Core.Complex[][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="A">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Forward(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="A">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Backward(System.Double[][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Backward(System.Double[0:,0:][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="B">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Backward(UMapx.Core.Complex[][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="B">Jagged array</param>
            <returns>Jagged array</returns>
        </member>
        <member name="M:UMapx.Transform.MultidimensionalTransform.Backward(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Forward multidimensional transform.
            </summary>
            <param name="B">Jagged matrix</param>
            <returns>Jagged matrix</returns>
        </member>
        <member name="T:UMapx.Transform.SineTransform">
            <summary>
            Defines the sine transform.
            <remarks>
            More information can be found on the website:
            http://sernam.ru/book_prett1.php?id=91
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.SineTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.SineTransform.#ctor(UMapx.Core.Direction)">
            <summary>
            Initializes the sine transform.
            </summary>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.SineTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Sine(System.Int32)">
            <summary>
            Implements the construction of the sine transform matrix.
            </summary>
            <param name="n">Size</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Forward(System.Double[])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Backward(System.Double[])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward sine transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.SineTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward sine transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Transform.WalshHadamardTransform">
            <summary>
            Defines the Walsh-Hadamard transform.
            <remarks>
            More information can be found on the website:
            http://kibia.ru/teachers/kreindelin/pdf/2.pdf
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Transform.WalshHadamardTransform.normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="F:UMapx.Transform.WalshHadamardTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.#ctor(System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes the Walsh-Hadamard transform.
            </summary>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Transform.WalshHadamardTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Transform.WalshHadamardTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Hadamard(System.Int32)">
            <summary>
            Implements the construction of the Walsh-Hadamard matrix.
            </summary>
            <param name="powOf2">Power of 2</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Hadamard">
            <summary>
            Implements the construction of the Walsh-Hadamard matrix [2 x 2].
            </summary>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Forward(System.Double[])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Backward(System.Double[])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Walsh-Hadamard transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Transform.WalshHadamardTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Walsh-Hadamard transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Video.AsyncVideoSource">
            <summary>
            Proxy video source for asynchronous processing of another nested video source.
            </summary>
            
            <remarks><para>The class represents a simple proxy, which wraps the specified <see cref="P:UMapx.Video.AsyncVideoSource.NestedVideoSource"/>
            with the aim of asynchronous processing of received video frames. The class intercepts <see cref="E:UMapx.Video.AsyncVideoSource.NewFrame"/>
            event from the nested video source and fires it to clients from its own thread, which is different from the thread
            used by nested video source for video acquisition. This allows clients to perform processing of video frames
            without blocking video acquisition thread, which continue to run and acquire next video frame while current is still
            processed.</para>
            
            <para>For example, let’s suppose that it takes 100 ms for the nested video source to acquire single frame, so the original
            frame rate is 10 frames per second. Also let’s assume that we have an image processing routine, which also takes
            100 ms to process a single frame. If the acquisition and processing are done sequentially, then resulting
            frame rate will drop to 5 frames per second. However, if doing both in parallel, then there is a good chance to
            keep resulting frame rate equal (or close) to the original frame rate.</para>
            
            <para>The class provides a bonus side effect - easer debugging of image processing routines, which are put into
            <see cref="E:UMapx.Video.AsyncVideoSource.NewFrame"/> event handler. In many cases video source classes fire their <see cref="E:UMapx.Video.IVideoSource.NewFrame"/>
            event from a try/catch block, which makes it very hard to spot error made in user's code - the catch block simply
            hides exception raised in user’s code. The <see cref="T:UMapx.Video.AsyncVideoSource"/> does not have any try/catch blocks around
            firing of <see cref="E:UMapx.Video.AsyncVideoSource.NewFrame"/> event, so always user gets exception in the case it comes from his code. At the same time
            nested video source is not affected by the user's exception, since it runs in different thread.</para>
            
            <para>Sample usage:</para>
            <code>
            // usage of AsyncVideoSource is the same as usage of any
            // other video source class, so code change is very little
            
            // create nested video source, for example JPEGStream
            JPEGStream stream = new JPEGStream( "some url" );
            // create async video source
            AsyncVideoSource asyncSource = new AsyncVideoSource( stream );
            // set NewFrame event handler
            asyncSource.NewFrame += new NewFrameEventHandler( video_NewFrame );
            // start the video source
            asyncSource.Start( );
            // ...
            
            private void video_NewFrame( object sender, NewFrameEventArgs eventArgs )
            {
                // get new frame
                Bitmap bitmap = eventArgs.Frame;
                // process the frame
            }
            </code>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.AsyncVideoSource.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available frame from video source.</para>
            
            <para><note>This event is fired from a different thread other than the video acquisition thread created
            by <see cref="P:UMapx.Video.AsyncVideoSource.NestedVideoSource"/>. This allows nested video frame to continue acquisition of the next
            video frame while clients perform processing of the current video frame.</note></para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.AsyncVideoSource.VideoSourceError">
             <summary>
             Video source error event.
             </summary>
             
             <remarks><para>This event is used to notify clients about any type of errors occurred in
             video source object, for example internal exceptions.</para>
             
             <para><note>Unlike <see cref="E:UMapx.Video.AsyncVideoSource.NewFrame"/> event, this event is simply redirected to the corresponding
             event of the <see cref="P:UMapx.Video.AsyncVideoSource.NestedVideoSource"/>, so it is fired from the thread of the nested video source.</note></para>
             </remarks>
            
        </member>
        <member name="E:UMapx.Video.AsyncVideoSource.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            
            <para><note>Unlike <see cref="E:UMapx.Video.AsyncVideoSource.NewFrame"/> event, this event is simply redirected to the corresponding
            event of the <see cref="P:UMapx.Video.AsyncVideoSource.NestedVideoSource"/>, so it is fired from the thread of the nested video source.</note></para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.AsyncVideoSource.NestedVideoSource">
            <summary>
            Nested video source which is the target for asynchronous processing.
            </summary>
            
            <remarks><para>The property is set through the class constructor.</para>
            
            <para>All calls to this object are actually redirected to the nested video source. The only
            exception is the <see cref="E:UMapx.Video.AsyncVideoSource.NewFrame"/> event, which is handled differently. This object gets
            <see cref="E:UMapx.Video.IVideoSource.NewFrame"/> event from the nested class and then fires another
            <see cref="E:UMapx.Video.AsyncVideoSource.NewFrame"/> event, but from a different thread.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.AsyncVideoSource.SkipFramesIfBusy">
            <summary>
            Specifies if the object should skip frames from the nested video source when it is busy. 
            </summary>
            
            <remarks><para>Specifies if the object should skip frames from the nested video source
            in the case if it is still busy processing the previous video frame in its own thread.</para>
            
            <para>Default value is set to <see langword="false"/>.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.AsyncVideoSource.Source">
            <summary>
            Video source string.
            </summary>
            
            <remarks><para>The property is redirected to the corresponding property of <see cref="P:UMapx.Video.AsyncVideoSource.NestedVideoSource"/>,
            so check its documentation to find what it means.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.AsyncVideoSource.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks><para>Number of frames the <see cref="P:UMapx.Video.AsyncVideoSource.NestedVideoSource">nested video source</see> received from
            the moment of the last access to the property.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.AsyncVideoSource.BytesReceived">
             <summary>
             Received bytes count.
             </summary>
             
             <remarks><para>Number of bytes the <see cref="P:UMapx.Video.AsyncVideoSource.NestedVideoSource">nested video source</see> received from
             the moment of the last access to the property.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.AsyncVideoSource.FramesProcessed">
            <summary>
            Processed frames count.
            </summary>
            
            <remarks><para>The property keeps the number of processed video frames since the last access to this property. 
            </para>
            
            <para>The value of this property equals to <see cref="P:UMapx.Video.AsyncVideoSource.FramesReceived"/> in most cases if the
            <see cref="P:UMapx.Video.AsyncVideoSource.SkipFramesIfBusy"/> property is set to <see langword="false"/> - every received frame gets processed
            sooner or later. However, if the <see cref="P:UMapx.Video.AsyncVideoSource.SkipFramesIfBusy"/> property is set to <see langword="true"/>,
            then value of this property may be lower than the value of the <see cref="P:UMapx.Video.AsyncVideoSource.FramesReceived"/> property, which
            means that nested video source performs acquisition faster than client perform processing of the received frame
            and some frame are skipped from processing.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.AsyncVideoSource.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks><para>Current state of the video source object - running or not.</para></remarks>
            
        </member>
        <member name="M:UMapx.Video.AsyncVideoSource.#ctor(UMapx.Video.IVideoSource)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.AsyncVideoSource"/> class.
            </summary>
            
            <param name="nestedVideoSource">Nested video source which is the target for asynchronous processing.</param>
            
        </member>
        <member name="M:UMapx.Video.AsyncVideoSource.#ctor(UMapx.Video.IVideoSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.AsyncVideoSource"/> class.
            </summary>
            
            <param name="nestedVideoSource">Nested video source which is the target for asynchronous processing.</param>
            <param name="skipFramesIfBusy">Specifies if the object should skip frames from the nested video source
            in the case if it is still busy processing the previous video frame.</param>
            
        </member>
        <member name="M:UMapx.Video.AsyncVideoSource.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks><para>Starts the nested video source and returns execution to caller. This object creates
            an extra thread which is used to fire <see cref="E:UMapx.Video.AsyncVideoSource.NewFrame"/> events, so the image processing could be
            done on another thread without blocking video acquisition thread.</para></remarks>
            
        </member>
        <member name="M:UMapx.Video.AsyncVideoSource.SignalToStop">
             <summary>
             Signal video source to stop its work.
             </summary>
             
             <remarks><para>Signals video source to stop its background thread, stop to
             provide new frames and free resources.</para></remarks>
            
        </member>
        <member name="M:UMapx.Video.AsyncVideoSource.WaitForStop">
             <summary>
             Wait for video source has stopped.
             </summary>
             
             <remarks><para>Waits for video source stopping after it was signalled to stop using
             <see cref="M:UMapx.Video.AsyncVideoSource.SignalToStop"/> method.</para></remarks>
            
        </member>
        <member name="M:UMapx.Video.AsyncVideoSource.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks><para>Stops nested video source by calling its <see cref="M:UMapx.Video.IVideoSource.Stop"/> method.
            See documentation of the particular video source for additional details.</para></remarks>
            
        </member>
        <member name="T:UMapx.Video.ByteArrayUtils">
            <summary>
            Some internal utilities for handling arrays.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.ByteArrayUtils.Compare(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Check if the array contains needle at specified position.
            </summary>
            
            <param name="array">Source array to check for needle.</param>
            <param name="needle">Needle we are searching for.</param>
            <param name="startIndex">Start index in source array.</param>
            
            <returns>Returns <b>true</b> if the source array contains the needle at
            the specified index. Otherwise it returns <b>false</b>.</returns>
            
        </member>
        <member name="M:UMapx.Video.ByteArrayUtils.Find(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Find subarray in the source array.
            </summary>
            
            <param name="array">Source array to search for needle.</param>
            <param name="needle">Needle we are searching for.</param>
            <param name="startIndex">Start index in source array.</param>
            <param name="sourceLength">Number of bytes in source array, where the needle is searched for.</param>
            
            <returns>Returns starting position of the needle if it was found or <b>-1</b> otherwise.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.CameraControlProperty">
            <summary>
            The enumeration specifies a setting on a camera.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.CameraControlProperty.Pan">
            <summary>
            Pan control.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.CameraControlProperty.Tilt">
            <summary>
            Tilt control.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.CameraControlProperty.Roll">
            <summary>
            Roll control.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.CameraControlProperty.Zoom">
            <summary>
            Zoom control.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.CameraControlProperty.Exposure">
            <summary>
            Exposure control.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.CameraControlProperty.Iris">
            <summary>
            Iris control.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.CameraControlProperty.Focus">
            <summary>
            Focus control.
            </summary>
        </member>
        <member name="T:UMapx.Video.DirectShow.CameraControlFlags">
            <summary>
            The enumeration defines whether a camera setting is controlled manually or automatically.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.CameraControlFlags.None">
            <summary>
            No control flag.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.CameraControlFlags.Auto">
            <summary>
            Auto control Flag.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.CameraControlFlags.Manual">
            <summary>
            Manual control Flag.
            </summary>
        </member>
        <member name="T:UMapx.Video.DirectShow.FileVideoSource">
            <summary>
            Video source for video files.
            </summary>
            
            <remarks><para>The video source provides access to video files. DirectShow is used to access video
            files.</para>
            
            <para>Sample usage:</para>
            <code>
            // create video source
            FileVideoSource videoSource = new FileVideoSource( fileName );
            // set NewFrame event handler
            videoSource.NewFrame += new NewFrameEventHandler( video_NewFrame );
            // start the video source
            videoSource.Start( );
            // ...
            // signal to stop
            videoSource.SignalToStop( );
            // ...
            
            // New frame event handler, which is invoked on each new available video frame
            private void video_NewFrame( object sender, NewFrameEventArgs eventArgs )
            {
                // get new frame
                Bitmap bitmap = eventArgs.Frame;
                // process the frame
            }
            </code>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.DirectShow.FileVideoSource.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available frame from video source.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.DirectShow.FileVideoSource.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:UMapx.Video.DirectShow.FileVideoSource.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.FileVideoSource.Source">
            <summary>
            Video source.
            </summary>
            
            <remarks>Video source is represented by video file name.</remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.FileVideoSource.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.FileVideoSource.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.FileVideoSource.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.FileVideoSource.PreventFreezing">
            <summary>
            Prevent video freezing after screen saver and workstation lock or not.
            </summary>
            
            <remarks>
            <para>The value specifies if the class should prevent video freezing during and
            after screen saver or workstation lock. To prevent freezing the <i>DirectShow</i> graph
            should not contain <i>Renderer</i> filter, which is added by <i>Render()</i> method
            of graph. However, in some cases it may be required to call <i>Render()</i> method of graph, since
            it may add some more filters, which may be required for playing video. So, the property is
            a trade off - it is possible to prevent video freezing skipping adding renderer filter or
            it is possible to keep renderer filter, but video may freeze during screen saver.</para>
            
            <para><note>The property may become obsolete in the future when approach to disable freezing
            and adding all required filters is found.</note></para>
            
            <para><note>The property should be set before calling <see cref="M:UMapx.Video.DirectShow.FileVideoSource.Start"/> method
            of the class to have effect.</note></para>
            
            <para>Default value of this property is set to <b>false</b>.</para>
            
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.FileVideoSource.ReferenceClockEnabled">
            <summary>
            Enables/disables reference clock on the graph.
            </summary>
            
            <remarks><para>Disabling reference clocks causes DirectShow graph to run as fast as
            it can process data. When enabled, it will process frames UMapxing to presentation
            time of a video file.</para>
            
            <para><note>The property should be set before calling <see cref="M:UMapx.Video.DirectShow.FileVideoSource.Start"/> method
            of the class to have effect.</note></para>
            
            <para>Default value of this property is set to <b>true</b>.</para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FileVideoSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.DirectShow.FileVideoSource"/> class.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FileVideoSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.DirectShow.FileVideoSource"/> class.
            </summary>
            
            <param name="fileName">Video file name.</param>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FileVideoSource.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:UMapx.Video.DirectShow.FileVideoSource.NewFrame"/> event.</remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FileVideoSource.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FileVideoSource.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for source stopping after it was signalled to stop using
            <see cref="M:UMapx.Video.DirectShow.FileVideoSource.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FileVideoSource.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks><para>Stops video source aborting its thread.</para>
            
            <para><note>Since the method aborts background thread, its usage is highly not preferred
            and should be done only if there are no other options. The correct way of stopping camera
            is <see cref="M:UMapx.Video.DirectShow.FileVideoSource.SignalToStop">signaling it stop</see> and then
            <see cref="M:UMapx.Video.DirectShow.FileVideoSource.WaitForStop">waiting</see> for background thread's completion.</note></para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FileVideoSource.Free">
            <summary>
            Free resource.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FileVideoSource.WorkerThread">
            <summary>
            Worker thread.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FileVideoSource.OnNewFrame(System.Drawing.Bitmap)">
            <summary>
            Notifies client about new frame.
            </summary>
            
            <param name="image">New frame's image.</param>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.FilterInfo">
            <summary>
            DirectShow filter information.
            </summary>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.FilterInfo.Name">
            <summary>
            Filter name.
            </summary>
        </member>
        <member name="P:UMapx.Video.DirectShow.FilterInfo.MonikerString">
            <summary>
            Filters's moniker string.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FilterInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.DirectShow.FilterInfo"/> class.
            </summary>
            
            <param name="monikerString">Filters's moniker string.</param>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FilterInfo.#ctor(System.Runtime.InteropServices.ComTypes.IMoniker)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.DirectShow.FilterInfo"/> class.
            </summary>
            
            <param name="moniker">Filter's moniker object.</param>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FilterInfo.CompareTo(System.Object)">
            <summary>
            Compare the object with another instance of this class.
            </summary>
            
            <param name="value">Object to compare with.</param>
            
            <returns>A signed number indicating the relative values of this instance and <b>value</b>.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FilterInfo.CreateFilter(System.String)">
            <summary>
            Create an instance of the filter.
            </summary>
            
            <param name="filterMoniker">Filter's moniker string.</param>
            
            <returns>Returns filter's object, which implements <b>IBaseFilter</b> interface.</returns>
            
            <remarks>The returned filter's object should be released using <b>Marshal.ReleaseComObject()</b>.</remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FilterInfo.GetPropertyPages(System.String)">
            <summary>
              Gets the supported property pages for the filter, if any.
            </summary>
            
            <param name="filterMoniker">The filter moniker.</param>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FilterInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:UMapx.Video.DirectShow.FilterInfoCollection">
            <summary>
            Collection of filters' information objects.
            </summary>
            
            <remarks>
            <para>
              The class allows to enumerate DirectShow filters of specified category. For
              a list of categories see <see cref="T:UMapx.Video.DirectShow.FilterCategory"/>.</para>
            </remarks>
            
            <example>
            <code>
            // enumerate video devices
            videoDevices = new FilterInfoCollection(FilterCategory.VideoInputDevice);
            
            // list devices
            foreach (FilterInfo device in videoDevices)
            {
                // ...
            }
            </code>
            </example>
            
            <seealso cref="T:UMapx.Video.DirectShow.VideoCaptureDevice"/>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.FilterInfoCollection.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.DirectShow.FilterInfoCollection"/> class.
            </summary>
            
            <param name="category">Guid of DirectShow filter category. See <see cref="T:UMapx.Video.DirectShow.FilterCategory"/>.</param>
            
            <remarks>Build collection of filters' information objects for the
            specified filter category.</remarks>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IAMCameraControl">
            <summary>
            The IAMCameraControl interface controls camera settings such as zoom, pan, aperture adjustment,
            or shutter speed. To obtain this interface, query the filter that controls the camera.
            </summary>
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMCameraControl.GetRange(UMapx.Video.DirectShow.CameraControlProperty,System.Int32@,System.Int32@,System.Int32@,System.Int32@,UMapx.Video.DirectShow.CameraControlFlags@)">
            <summary>
            Gets the range and default value of a specified camera property.
            </summary>
            
            <param name="Property">Specifies the property to query.</param>
            <param name="pMin">Receives the minimum value of the property.</param>
            <param name="pMax">Receives the maximum value of the property.</param>
            <param name="pSteppingDelta">Receives the step size for the property.</param>
            <param name="pDefault">Receives the default value of the property. </param>
            <param name="pCapsFlags">Receives a member of the CameraControlFlags enumeration, indicating whether the property is controlled automatically or manually.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMCameraControl.Set(UMapx.Video.DirectShow.CameraControlProperty,System.Int32,UMapx.Video.DirectShow.CameraControlFlags)">
            <summary>
            Sets a specified property on the camera.
            </summary>
            
            <param name="Property">Specifies the property to set.</param>
            <param name="lValue">Specifies the new value of the property.</param>
            <param name="Flags">Specifies the desired control setting, as a member of the CameraControlFlags enumeration.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMCameraControl.Get(UMapx.Video.DirectShow.CameraControlProperty,System.Int32@,UMapx.Video.DirectShow.CameraControlFlags@)">
            <summary>
            Gets the current setting of a camera property.
            </summary>
            
            <param name="Property">Specifies the property to retrieve.</param>
            <param name="lValue">Receives the value of the property.</param>
            <param name="Flags">Receives a member of the CameraControlFlags enumeration.
            The returned value indicates whether the setting is controlled manually or automatically.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IAMCrossbar">
            <summary>
            The IAMCrossbar interface routes signals from an analog or digital source to a video capture filter.
            </summary>
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMCrossbar.get_PinCounts(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the number of input and output pins on the crossbar filter.
            </summary>
            
            <param name="outputPinCount">Variable that receives the number of output pins.</param>
            <param name="inputPinCount">Variable that receives the number of input pins.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMCrossbar.CanRoute(System.Int32,System.Int32)">
            <summary>
            Queries whether a specified input pin can be routed to a specified output pin.
            </summary>
            
            <param name="outputPinIndex">Specifies the index of the output pin.</param>
            <param name="inputPinIndex">Specifies the index of input pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMCrossbar.Route(System.Int32,System.Int32)">
            <summary>
            Routes an input pin to an output pin.
            </summary>
            
            <param name="outputPinIndex">Specifies the index of the output pin.</param>
            <param name="inputPinIndex">Specifies the index of the input pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMCrossbar.get_IsRoutedTo(System.Int32,System.Int32@)">
            <summary>
            Retrieves the input pin that is currently routed to the specified output pin.
            </summary>
            
            <param name="outputPinIndex">Specifies the index of the output pin.</param>
            <param name="inputPinIndex">Variable that receives the index of the input pin, or -1 if no input pin is routed to this output pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMCrossbar.get_CrossbarPinInfo(System.Boolean,System.Int32,System.Int32@,UMapx.Video.DirectShow.PhysicalConnectorType@)">
            <summary>
            Retrieves information about a specified pin.
            </summary>
            
            <param name="isInputPin">Specifies the direction of the pin. Use one of the following values.</param>
            <param name="pinIndex">Specifies the index of the pin.</param>
            <param name="pinIndexRelated">Variable that receives the index of the related pin, or –1 if no pin is related to this pin.</param>
            <param name="physicalType">Variable that receives a member of the PhysicalConnectorType enumeration, indicating the pin's physical type.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IAMStreamConfig">
            <summary>
            This interface sets the output format on certain capture and compression filters,
            for both audio and video.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMStreamConfig.SetFormat(UMapx.Video.DirectShow.Internals.AMMediaType)">
            <summary>
            Set the output format on the pin.
            </summary>
            
            <param name="mediaType">Media type to set.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMStreamConfig.GetFormat(UMapx.Video.DirectShow.Internals.AMMediaType@)">
            <summary>
            Retrieves the audio or video stream's format.
            </summary>
            
            <param name="mediaType">Retrieved media type.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMStreamConfig.GetNumberOfCapabilities(System.Int32@,System.Int32@)">
            <summary>
            Retrieve the number of format capabilities that this pin supports.
            </summary>
            
            <param name="count">Variable that receives the number of format capabilities.</param>
            <param name="size">Variable that receives the size of the configuration structure in bytes.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMStreamConfig.GetStreamCaps(System.Int32,UMapx.Video.DirectShow.Internals.AMMediaType@,UMapx.Video.DirectShow.Internals.VideoStreamConfigCaps)">
            <summary>
            Retrieve a set of format capabilities.
            </summary>
            
            <param name="index">Specifies the format capability to retrieve, indexed from zero.</param>
            <param name="mediaType">Retrieved media type.</param>
            <param name="streamConfigCaps">Byte array, which receives information about capabilities.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IAMVideoControl">
            <summary>
            The interface controls certain video capture operations such as enumerating available
            frame rates and image orientation.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMVideoControl.GetCaps(UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.VideoControlFlags@)">
            <summary>
            Retrieves the capabilities of the underlying hardware.
            </summary>
            
            <param name="pin">Pin to query capabilities from.</param>
            <param name="flags">Get capabilities of the specified pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMVideoControl.SetMode(UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.VideoControlFlags)">
            <summary>
            Sets the video control mode of operation.
            </summary>
            
            <param name="pin">The pin to set the video control mode on.</param>
            <param name="mode">Value specifying a combination of the flags to set the video control mode.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMVideoControl.GetMode(UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.VideoControlFlags@)">
            <summary>
            Retrieves the video control mode of operation.
            </summary>
            
            <param name="pin">The pin to retrieve the video control mode from.</param>
            <param name="mode">Gets combination of flags, which specify the video control mode.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMVideoControl.GetCurrentActualFrameRate(UMapx.Video.DirectShow.Internals.IPin,System.Int64@)">
            <summary>
            The method retrieves the actual frame rate, expressed as a frame duration in 100-nanosecond units.
            USB (Universal Serial Bus) and IEEE 1394 cameras may provide lower frame rates than requested
            because of bandwidth availability. This is only available during video streaming.
            </summary>
            
            <param name="pin">The pin to retrieve the frame rate from.</param>
            <param name="actualFrameRate">Gets frame rate in frame duration in 100-nanosecond units.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMVideoControl.GetMaxAvailableFrameRate(UMapx.Video.DirectShow.Internals.IPin,System.Int32,System.Drawing.Size,System.Int64@)">
            <summary>
            Retrieves the maximum frame rate currently available based on bus bandwidth usage for connections
            such as USB and IEEE 1394 camera devices where the maximum frame rate can be limited by bandwidth
            availability.
            </summary>
            
            <param name="pin">The pin to retrieve the maximum frame rate from.</param>
            <param name="index">Index of the format to query for maximum frame rate. This index corresponds
            to the order in which formats are enumerated by <see cref="M:UMapx.Video.DirectShow.Internals.IAMStreamConfig.GetStreamCaps(System.Int32,UMapx.Video.DirectShow.Internals.AMMediaType@,UMapx.Video.DirectShow.Internals.VideoStreamConfigCaps)"/>.</param>
            <param name="dimensions">Frame image size (width and height) in pixels.</param>
            <param name="maxAvailableFrameRate">Gets maximum available frame rate. The frame rate is expressed as frame duration in 100-nanosecond units.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IAMVideoControl.GetFrameRateList(UMapx.Video.DirectShow.Internals.IPin,System.Int32,System.Drawing.Size,System.Int32@,System.IntPtr@)">
            <summary>
            Retrieves a list of available frame rates.
            </summary>
            
            <param name="pin">The pin to retrieve the maximum frame rate from.</param>
            <param name="index">Index of the format to query for maximum frame rate. This index corresponds
            to the order in which formats are enumerated by <see cref="M:UMapx.Video.DirectShow.Internals.IAMStreamConfig.GetStreamCaps(System.Int32,UMapx.Video.DirectShow.Internals.AMMediaType@,UMapx.Video.DirectShow.Internals.VideoStreamConfigCaps)"/>.</param>
            <param name="dimensions">Frame image size (width and height) in pixels.</param>
            <param name="listSize">Number of elements in the list of frame rates.</param>
            <param name="frameRate">Array of frame rates in 100-nanosecond units.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IBaseFilter">
            <summary>
            The IBaseFilter interface provides methods for controlling a filter.
            All DirectShow filters expose this interface
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IBaseFilter.GetClassID(System.Guid@)">
            <summary>
            Returns the class identifier (CLSID) for the component object.
            </summary>
            
            <param name="ClassID">Points to the location of the CLSID on return.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IBaseFilter.Stop">
            <summary>
            Stops the filter.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IBaseFilter.Pause">
            <summary>
            Pauses the filter.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IBaseFilter.Run(System.Int64)">
            <summary>
            Runs the filter.
            </summary>
            
            <param name="start">Reference time corresponding to stream time 0.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IBaseFilter.GetState(System.Int32,System.Int32@)">
            <summary>
            Retrieves the state of the filter (running, stopped, or paused).
            </summary>
            
            <param name="milliSecsTimeout">Time-out interval, in milliseconds.</param>
            <param name="filterState">Pointer to a variable that receives filter's state.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IBaseFilter.SetSyncSource(System.IntPtr)">
            <summary>
            Sets the reference clock for the filter or the filter graph.
            </summary>
            
            <param name="clock">Pointer to the clock's <b>IReferenceClock</b> interface, or NULL. </param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IBaseFilter.GetSyncSource(System.IntPtr@)">
            <summary>
            Retrieves the current reference clock.
            </summary>
            
            <param name="clock">Address of a variable that receives a pointer to the clock's IReferenceClock interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IBaseFilter.EnumPins(UMapx.Video.DirectShow.Internals.IEnumPins@)">
            <summary>
            Enumerates the pins on this filter.
            </summary>
            
            <param name="enumPins">Address of a variable that receives a pointer to the IEnumPins interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IBaseFilter.FindPin(System.String,UMapx.Video.DirectShow.Internals.IPin@)">
            <summary>
            Retrieves the pin with the specified identifier.
            </summary>
            
            <param name="id">Pointer to a constant wide-character string that identifies the pin.</param>
            <param name="pin">Address of a variable that receives a pointer to the pin's IPin interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IBaseFilter.QueryFilterInfo(UMapx.Video.DirectShow.Internals.FilterInfo@)">
            <summary>
            Retrieves information about the filter.
            </summary>
            
            <param name="filterInfo">Pointer to <b>FilterInfo</b> structure.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IBaseFilter.JoinFilterGraph(UMapx.Video.DirectShow.Internals.IFilterGraph,System.String)">
            <summary>
            Notifies the filter that it has joined or left the filter graph.
            </summary>
            
            <param name="graph">Pointer to the Filter Graph Manager's <b>IFilterGraph</b> interface, or NULL
            if the filter is leaving the graph.</param>
            <param name="name">String that specifies a name for the filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IBaseFilter.QueryVendorInfo(System.String@)">
            <summary>
            Retrieves a string containing vendor information.
            </summary>
            
            <param name="vendorInfo">Receives a string containing the vendor information.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.ICaptureGraphBuilder2">
            <summary>
            This interface builds capture graphs and other custom filter graphs. 
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ICaptureGraphBuilder2.SetFiltergraph(UMapx.Video.DirectShow.Internals.IGraphBuilder)">
            <summary>
            Specify filter graph for the capture graph builder to use.
            </summary>
            
            <param name="graphBuilder">Filter graph's interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ICaptureGraphBuilder2.GetFiltergraph(UMapx.Video.DirectShow.Internals.IGraphBuilder@)">
            <summary>
            Retrieve the filter graph that the builder is using.
            </summary>
            
            <param name="graphBuilder">Filter graph's interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ICaptureGraphBuilder2.SetOutputFileName(System.Guid,System.String,UMapx.Video.DirectShow.Internals.IBaseFilter@,System.IntPtr@)">
            <summary>
            Create file writing section of the filter graph.
            </summary>
            
            <param name="type">GUID that represents either the media subtype of the output or the
            class identifier (CLSID) of a multiplexer filter or file writer filter.</param>
            <param name="fileName">Output file name.</param>
            <param name="baseFilter">Receives the multiplexer's <see cref="T:UMapx.Video.DirectShow.Internals.IBaseFilter"/> interface.</param>
            <param name="fileSinkFilter">Receives the file writer's IFileSinkFilter interface. Can be NULL.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ICaptureGraphBuilder2.FindInterface(System.Guid,System.Guid,UMapx.Video.DirectShow.Internals.IBaseFilter,System.Guid,System.Object@)">
            <summary>
            Searche the graph for a specified interface, starting from a specified filter.
            </summary>
            
            <param name="category">GUID that specifies the search criteria.</param>
            <param name="type">GUID that specifies the major media type of an output pin, or NULL.</param>
            <param name="baseFilter"><see cref="T:UMapx.Video.DirectShow.Internals.IBaseFilter"/> interface of the filter. The method begins searching from this filter.</param>
            <param name="interfaceID">Interface identifier (IID) of the interface to locate.</param>
            <param name="retInterface">Receives found interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ICaptureGraphBuilder2.RenderStream(System.Guid,System.Guid,System.Object,UMapx.Video.DirectShow.Internals.IBaseFilter,UMapx.Video.DirectShow.Internals.IBaseFilter)">
            <summary>
            Connect an output pin on a source filter to a rendering filter, optionally through a compression filter.
            </summary>
            
            <param name="category">Pin category.</param>
            <param name="mediaType">Major-type GUID that specifies the media type of the output pin.</param>
            <param name="source">Starting filter for the connection.</param>
            <param name="compressor">Interface of an intermediate filter, such as a compression filter. Can be NULL.</param>
            <param name="renderer">Sink filter, such as a renderer or mux filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ICaptureGraphBuilder2.ControlStream(System.Guid,System.Guid,UMapx.Video.DirectShow.Internals.IBaseFilter,System.Int64,System.Int64,System.Int16,System.Int16)">
            <summary>
            Set the start and stop times for one or more streams of captured data.
            </summary>
            
            <param name="category">Pin category.</param>
            <param name="mediaType">Major-type GUID that specifies the media type.</param>
            <param name="filter"><see cref="T:UMapx.Video.DirectShow.Internals.IBaseFilter"/> interface that specifies which filter to control.</param>
            <param name="start">Start time.</param>
            <param name="stop">Stop time.</param>
            <param name="startCookie">Value that is sent as the second parameter of the
            EC_STREAM_CONTROL_STARTED event notification.</param>
            <param name="stopCookie">Value that is sent as the second parameter of the
            EC_STREAM_CONTROL_STOPPED event notification.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ICaptureGraphBuilder2.AllocCapFile(System.String,System.Int64)">
            <summary>
            Preallocate a capture file to a specified size.
            </summary>
            
            <param name="fileName">File name to create or resize.</param>
            <param name="size">Size of the file to allocate, in bytes.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ICaptureGraphBuilder2.CopyCaptureFile(System.String,System.String,System.Boolean,System.IntPtr)">
            <summary>
            Copy the valid media data from a capture file.
            </summary>
            
            <param name="oldFileName">Old file name.</param>
            <param name="newFileName">New file name.</param>
            <param name="allowEscAbort">Boolean value that specifies whether pressing the ESC key cancels the copy operation.</param>
            <param name="callback">IAMCopyCaptureFileProgress interface to display progress information, or NULL.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ICaptureGraphBuilder2.FindPin(System.Object,UMapx.Video.DirectShow.Internals.PinDirection,System.Guid,System.Guid,System.Boolean,System.Int32,UMapx.Video.DirectShow.Internals.IPin@)">
            <summary>
            
            </summary>
            
            <param name="source">Interface on a filter, or to an interface on a pin.</param>
            <param name="pinDirection">Pin direction (input or output).</param>
            <param name="category">Pin category.</param>
            <param name="mediaType">Media type.</param>
            <param name="unconnected">Boolean value that specifies whether the pin must be unconnected.</param>
            <param name="index">Zero-based index of the pin to retrieve, from the set of matching pins.</param>
            <param name="pin">Interface of the matching pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.ICreateDevEnum">
            <summary>
            The <b>ICreateDevEnum</b> interface creates an enumerator for devices within a particular category,
            such as video capture devices, audio capture devices, video compressors, and so forth.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ICreateDevEnum.CreateClassEnumerator(System.Guid@,System.Runtime.InteropServices.ComTypes.IEnumMoniker@,System.Int32)">
            <summary>
            Creates a class enumerator for a specified device category.
            </summary>
            
            <param name="type">Specifies the class identifier of the device category.</param>
            <param name="enumMoniker">Address of a variable that receives an <b>IEnumMoniker</b> interface pointer</param>
            <param name="flags">Bitwise combination of zero or more flags. If zero, the method enumerates every filter in the category.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IEnumFilters">
            <summary>
            This interface is used by applications or other filters to determine
            what filters exist in the filter graph.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IEnumFilters.Next(System.Int32,UMapx.Video.DirectShow.Internals.IBaseFilter[],System.Int32@)">
            <summary>
            Retrieves the specified number of filters in the enumeration sequence.
            </summary>
            
            <param name="cFilters">Number of filters to retrieve.</param>
            <param name="filters">Array in which to place <see cref="T:UMapx.Video.DirectShow.Internals.IBaseFilter"/> interfaces.</param>
            <param name="filtersFetched">Actual number of filters placed in the array.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IEnumFilters.Skip(System.Int32)">
            <summary>
            Skips a specified number of filters in the enumeration sequence.
            </summary>
            
            <param name="cFilters">Number of filters to skip.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IEnumFilters.Reset">
            <summary>
            Resets the enumeration sequence to the beginning.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IEnumFilters.Clone(UMapx.Video.DirectShow.Internals.IEnumFilters@)">
            <summary>
            Makes a copy of the enumerator with the same enumeration state.
            </summary>
            
            <param name="enumFilters">Duplicate of the enumerator.</param>
            
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IEnumPins">
            <summary>
            Enumerates pins on a filter.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IEnumPins.Next(System.Int32,UMapx.Video.DirectShow.Internals.IPin[],System.Int32@)">
            <summary>
            Retrieves a specified number of pins.
            </summary>
            
            <param name="cPins">Number of pins to retrieve.</param>
            <param name="pins">Array of size <b>cPins</b> that is filled with <b>IPin</b> pointers.</param>
            <param name="pinsFetched">Receives the number of pins retrieved.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IEnumPins.Skip(System.Int32)">
            <summary>
            Skips a specified number of pins in the enumeration sequence.
            </summary>
            
            <param name="cPins">Number of pins to skip.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IEnumPins.Reset">
            <summary>
            Resets the enumeration sequence to the beginning.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IEnumPins.Clone(UMapx.Video.DirectShow.Internals.IEnumPins@)">
            <summary>
            Makes a copy of the enumerator with the same enumeration state. 
            </summary>
            
            <param name="enumPins">Duplicate of the enumerator.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IFileSourceFilter">
            <summary>
            The interface is exposed by source filters to set the file name and media type of the media file that they are to render.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFileSourceFilter.Load(System.String,UMapx.Video.DirectShow.Internals.AMMediaType)">
            <summary>
            Loads the source filter with the file.
            </summary>
            
            <param name="fileName">The name of the file to open.</param>
            <param name="mediaType">Media type of the file. This can be null.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFileSourceFilter.GetCurFile(System.String@,UMapx.Video.DirectShow.Internals.AMMediaType)">
            <summary>
            Retrieves the current file.
            </summary>
            
            <param name="fileName">Name of media file.</param>
            <param name="mediaType">Receives media type.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IFilterGraph">
            <summary>
            The interface provides methods for building a filter graph. An application can use it to add filters to
            the graph, connect or disconnect filters, remove filters, and perform other basic operations. 
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph.AddFilter(UMapx.Video.DirectShow.Internals.IBaseFilter,System.String)">
            <summary>
            Adds a filter to the graph and gives it a name.
            </summary>
            
            <param name="filter">Filter to add to the graph.</param>
            <param name="name">Name of the filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph.RemoveFilter(UMapx.Video.DirectShow.Internals.IBaseFilter)">
            <summary>
            Removes a filter from the graph.
            </summary>
            
            <param name="filter">Filter to be removed from the graph.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph.EnumFilters(System.IntPtr@)">
            <summary>
            Provides an enumerator for all filters in the graph.
            </summary>
            
            <param name="enumerator">Filter enumerator.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph.FindFilterByName(System.String,UMapx.Video.DirectShow.Internals.IBaseFilter@)">
            <summary>
            Finds a filter that was added with a specified name.
            </summary>
            
            <param name="name">Name of filter to search for.</param>
            <param name="filter">Interface of found filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph.ConnectDirect(UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.AMMediaType)">
            <summary>
            Connects two pins directly (without intervening filters).
            </summary>
            
            <param name="pinOut">Output pin.</param>
            <param name="pinIn">Input pin.</param>
            <param name="mediaType">Media type to use for the connection.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph.Reconnect(UMapx.Video.DirectShow.Internals.IPin)">
            <summary>
            Breaks the existing pin connection and reconnects it to the same pin.
            </summary>
            
            <param name="pin">Pin to disconnect and reconnect.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph.Disconnect(UMapx.Video.DirectShow.Internals.IPin)">
            <summary>
            Disconnects a specified pin.
            </summary>
            
            <param name="pin">Pin to disconnect.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph.SetDefaultSyncSource">
            <summary>
            Sets the reference clock to the default clock.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IFilterGraph2">
            <summary>
            This interface extends the <see cref="T:UMapx.Video.DirectShow.Internals.IFilterGraph"/> and <see cref="T:UMapx.Video.DirectShow.Internals.IGraphBuilder"/>
            interfaces, which contain methods for building filter graphs.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.AddFilter(UMapx.Video.DirectShow.Internals.IBaseFilter,System.String)">
            <summary>
            Adds a filter to the graph and gives it a name.
            </summary>
            
            <param name="filter">Filter to add to the graph.</param>
            <param name="name">Name of the filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.RemoveFilter(UMapx.Video.DirectShow.Internals.IBaseFilter)">
            <summary>
            Removes a filter from the graph.
            </summary>
            
            <param name="filter">Filter to be removed from the graph.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.EnumFilters(UMapx.Video.DirectShow.Internals.IEnumFilters@)">
            <summary>
            Provides an enumerator for all filters in the graph.
            </summary>
            
            <param name="enumerator">Filter enumerator.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.FindFilterByName(System.String,UMapx.Video.DirectShow.Internals.IBaseFilter@)">
            <summary>
            Finds a filter that was added with a specified name.
            </summary>
            
            <param name="name">Name of filter to search for.</param>
            <param name="filter">Interface of found filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.ConnectDirect(UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.AMMediaType)">
            <summary>
            Connects two pins directly (without intervening filters).
            </summary>
            
            <param name="pinOut">Output pin.</param>
            <param name="pinIn">Input pin.</param>
            <param name="mediaType">Media type to use for the connection.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.Reconnect(UMapx.Video.DirectShow.Internals.IPin)">
            <summary>
            Breaks the existing pin connection and reconnects it to the same pin.
            </summary>
            
            <param name="pin">Pin to disconnect and reconnect.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.Disconnect(UMapx.Video.DirectShow.Internals.IPin)">
            <summary>
            Disconnects a specified pin.
            </summary>
            
            <param name="pin">Pin to disconnect.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.SetDefaultSyncSource">
            <summary>
            Sets the reference clock to the default clock.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.Connect(UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.IPin)">
            <summary>
            Connects two pins. If they will not connect directly, this method connects them with intervening transforms.
            </summary>
            
            <param name="pinOut">Output pin.</param>
            <param name="pinIn">Input pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.Render(UMapx.Video.DirectShow.Internals.IPin)">
            <summary>
            Adds a chain of filters to a specified output pin to render it.
            </summary>
            
            <param name="pinOut">Output pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.RenderFile(System.String,System.String)">
            <summary>
            Builds a filter graph that renders the specified file.
            </summary>
            
            <param name="file">Specifies a string that contains file name or device moniker.</param>
            <param name="playList">Reserved.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.AddSourceFilter(System.String,System.String,UMapx.Video.DirectShow.Internals.IBaseFilter@)">
            <summary>
            Adds a source filter to the filter graph for a specific file.
            </summary>
            
            <param name="fileName">Specifies the name of the file to load.</param>
            <param name="filterName">Specifies a name for the source filter.</param>
            <param name="filter">Variable that receives the interface of the source filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.SetLogFile(System.IntPtr)">
            <summary>
            Sets the file for logging actions taken when attempting to perform an operation.
            </summary>
            
            <param name="hFile">Handle to the log file.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.Abort">
            <summary>
            Requests that the graph builder return as soon as possible from its current task.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.ShouldOperationContinue">
            <summary>
            Queries whether the current operation should continue.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.AddSourceFilterForMoniker(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IBindCtx,System.String,UMapx.Video.DirectShow.Internals.IBaseFilter@)">
            <summary>
            
            </summary>
            
            <param name="moniker">Moniker interface.</param>
            <param name="bindContext">Bind context interface.</param>
            <param name="filterName">Name for the filter.</param>
            <param name="filter"> Receives source filter's IBaseFilter interface.
            The caller must release the interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.ReconnectEx(UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.AMMediaType)">
            <summary>
            Breaks the existing pin connection and reconnects it to the same pin,
            using a specified media type.
            </summary>
            
            <param name="pin">Pin to disconnect and reconnect.</param>
            <param name="mediaType">Media type to reconnect with.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IFilterGraph2.RenderEx(UMapx.Video.DirectShow.Internals.IPin,System.Int32,System.IntPtr)">
            <summary>
            Render an output pin, with an option to use existing renderers only.
            </summary>
            
            <param name="outputPin">Interface of the output pin.</param>
            <param name="flags">Flag that specifies how to render the pin.</param>
            <param name="context">Reserved.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IGraphBuilder">
            <summary>
            This interface provides methods that enable an application to build a filter graph.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.AddFilter(UMapx.Video.DirectShow.Internals.IBaseFilter,System.String)">
            <summary>
            Adds a filter to the graph and gives it a name.
            </summary>
            
            <param name="filter">Filter to add to the graph.</param>
            <param name="name">Name of the filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.RemoveFilter(UMapx.Video.DirectShow.Internals.IBaseFilter)">
            <summary>
            Removes a filter from the graph.
            </summary>
            
            <param name="filter">Filter to be removed from the graph.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.EnumFilters(UMapx.Video.DirectShow.Internals.IEnumFilters@)">
            <summary>
            Provides an enumerator for all filters in the graph.
            </summary>
            
            <param name="enumerator">Filter enumerator.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.FindFilterByName(System.String,UMapx.Video.DirectShow.Internals.IBaseFilter@)">
            <summary>
            Finds a filter that was added with a specified name.
            </summary>
            
            <param name="name">Name of filter to search for.</param>
            <param name="filter">Interface of found filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.ConnectDirect(UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.AMMediaType)">
            <summary>
            Connects two pins directly (without intervening filters).
            </summary>
            
            <param name="pinOut">Output pin.</param>
            <param name="pinIn">Input pin.</param>
            <param name="mediaType">Media type to use for the connection.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.Reconnect(UMapx.Video.DirectShow.Internals.IPin)">
            <summary>
            Breaks the existing pin connection and reconnects it to the same pin.
            </summary>
            
            <param name="pin">Pin to disconnect and reconnect.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.Disconnect(UMapx.Video.DirectShow.Internals.IPin)">
            <summary>
            Disconnects a specified pin.
            </summary>
            
            <param name="pin">Pin to disconnect.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.SetDefaultSyncSource">
            <summary>
            Sets the reference clock to the default clock.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.Connect(UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.IPin)">
            <summary>
            Connects two pins. If they will not connect directly, this method connects them with intervening transforms.
            </summary>
            
            <param name="pinOut">Output pin.</param>
            <param name="pinIn">Input pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.Render(UMapx.Video.DirectShow.Internals.IPin)">
            <summary>
            Adds a chain of filters to a specified output pin to render it.
            </summary>
            
            <param name="pinOut">Output pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.RenderFile(System.String,System.String)">
            <summary>
            Builds a filter graph that renders the specified file.
            </summary>
            
            <param name="file">Specifies a string that contains file name or device moniker.</param>
            <param name="playList">Reserved.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.AddSourceFilter(System.String,System.String,UMapx.Video.DirectShow.Internals.IBaseFilter@)">
            <summary>
            Adds a source filter to the filter graph for a specific file.
            </summary>
            
            <param name="fileName">Specifies the name of the file to load.</param>
            <param name="filterName">Specifies a name for the source filter.</param>
            <param name="filter">Variable that receives the interface of the source filter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.SetLogFile(System.IntPtr)">
            <summary>
            Sets the file for logging actions taken when attempting to perform an operation.
            </summary>
            
            <param name="hFile">Handle to the log file.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.Abort">
            <summary>
            Requests that the graph builder return as soon as possible from its current task.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IGraphBuilder.ShouldOperationContinue">
            <summary>
            Queries whether the current operation should continue.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IMediaControl">
            <summary>
            The interface provides methods for controlling the flow of data through the filter graph.
            It includes methods for running, pausing, and stopping the graph.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaControl.Run">
            <summary>
            Runs all the filters in the filter graph.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaControl.Pause">
            <summary>
            Pauses all filters in the filter graph.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaControl.Stop">
            <summary>
            Stops all the filters in the filter graph.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaControl.GetState(System.Int32,System.Int32@)">
            <summary>
            Retrieves the state of the filter graph.
            </summary>
            
            <param name="timeout">Duration of the time-out, in milliseconds, or INFINITE to specify an infinite time-out.</param>
            <param name="filterState">Мariable that receives a member of the <b>FILTER_STATE</b> enumeration.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaControl.RenderFile(System.String)">
            <summary>
            Builds a filter graph that renders the specified file.
            </summary>
            
            <param name="fileName">Name of the file to render</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaControl.AddSourceFilter(System.String,System.Object@)">
            <summary>
            Adds a source filter to the filter graph, for a specified file.
            </summary>
            
            <param name="fileName">Name of the file containing the source video.</param>
            <param name="filterInfo">Receives interface of filter information object.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaControl.get_FilterCollection(System.Object@)">
            <summary>
            Retrieves a collection of the filters in the filter graph.
            </summary>
            
            <param name="collection">Receives the <b>IAMCollection</b> interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaControl.get_RegFilterCollection(System.Object@)">
            <summary>
            Retrieves a collection of all the filters listed in the registry.
            </summary>
            
            <param name="collection">Receives the <b>IDispatch</b> interface of <b>IAMCollection</b> object.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaControl.StopWhenReady">
            <summary>
            Pauses the filter graph, allowing filters to queue data, and then stops the filter graph.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IMediaEventEx">
            <summary>
            The interface inherits contains methods for retrieving event notifications and for overriding the
            filter graph's default handling of events.
            </summary>
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaEventEx.GetEventHandle(System.IntPtr@)">
            <summary>
            Retrieves a handle to a manual-reset event that remains signaled while the queue contains event notifications.
            </summary>
            <param name="hEvent">Pointer to a variable that receives the event handle.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaEventEx.GetEvent(UMapx.Video.DirectShow.Internals.DsEvCode@,System.IntPtr@,System.IntPtr@,System.Int32)">
            <summary>
            Retrieves the next event notification from the event queue.
            </summary>
            
            <param name="lEventCode">Variable that receives the event code.</param>
            <param name="lParam1">Pointer to a variable that receives the first event parameter.</param>
            <param name="lParam2">Pointer to a variable that receives the second event parameter.</param>
            <param name="msTimeout">Time-out interval, in milliseconds.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaEventEx.WaitForCompletion(System.Int32,System.Int32@)">
            <summary>
            Waits for the filter graph to render all available data.
            </summary>
            
            <param name="msTimeout">Time-out interval, in milliseconds. Pass zero to return immediately.</param>
            <param name="pEvCode">Pointer to a variable that receives an event code.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaEventEx.CancelDefaultHandling(System.Int32)">
            <summary>
            Cancels the Filter Graph Manager's default handling for a specified event.
            </summary>
            
            <param name="lEvCode">Event code for which to cancel default handling.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaEventEx.RestoreDefaultHandling(System.Int32)">
            <summary>
            Restores the Filter Graph Manager's default handling for a specified event.
            </summary>
            <param name="lEvCode">Event code for which to restore default handling.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaEventEx.FreeEventParams(UMapx.Video.DirectShow.Internals.DsEvCode,System.IntPtr,System.IntPtr)">
            <summary>
            Frees resources associated with the parameters of an event.
            </summary>
            <param name="lEvCode">Event code.</param>
            <param name="lParam1">First event parameter.</param>
            <param name="lParam2">Second event parameter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaEventEx.SetNotifyWindow(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Registers a window to process event notifications.
            </summary>
            
            <param name="hwnd">Handle to the window, or <see cref="F:System.IntPtr.Zero"/> to stop receiving event messages.</param>
            <param name="lMsg">Window message to be passed as the notification.</param>
            <param name="lInstanceData">Value to be passed as the <i>lParam</i> parameter for the <i>lMsg</i> message.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaEventEx.SetNotifyFlags(System.Int32)">
            <summary>
            Enables or disables event notifications.
            </summary>
            
            <param name="lNoNotifyFlags">Value indicating whether to enable or disable event notifications.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaEventEx.GetNotifyFlags(System.Int32@)">
            <summary>
            Determines whether event notifications are enabled.
            </summary>
            
            <param name="lplNoNotifyFlags">Variable that receives current notification status.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IMediaFilter">
            <summary>
            The interface provides methods for controlling the flow of data through the filter graph.
            It includes methods for running, pausing, and stopping the graph.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaFilter.Stop">
            <summary>
            This method informs the filter to transition to the new state. 
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaFilter.Pause">
            <summary>
            This method informs the filter to transition to the new state. 
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaFilter.Run(System.Int64)">
            <summary>
            This method informs the filter to transition to the new (running) state. Passes a time value to synchronize independent streams. 
            </summary>
            
            <param name="tStart">Time value of the reference clock.  The amount to be added to the IMediaSample  time stamp to determine the time at which that sample should be rendered UMapxing to the reference clock. That is, it is the reference time at which a sample with a stream time of zero should be rendered.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaFilter.GetState(System.Int32,UMapx.Video.DirectShow.Internals.FilterState@)">
            <summary>
            This method determines the filter's state. 
            </summary>
            
            <param name="dwMilliSecsTimeout">Duration of the time-out, in milliseconds. To block indefinitely, pass INFINITE. </param>
            <param name="filtState">Returned state of the filter. States include stopped, paused, running, or intermediate (in the process of changing). </param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaFilter.SetSyncSource(UMapx.Video.DirectShow.Internals.IReferenceClock)">
            <summary>
            This method identifies the reference clock to which the filter should synchronize activity.
            </summary>
            
            <param name="pClock">Pointer to the IReferenceClock  interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IMediaFilter.GetSyncSource(UMapx.Video.DirectShow.Internals.IReferenceClock@)">
            <summary>
            This method retrieves the current reference clock in use by this filter. 
            </summary>
            
            <param name="pClock">Pointer to a reference clock; it will be set to the IReferenceClock  interface. </param>
            
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IPersist">
            <summary>
            Provides the CLSID of an object that can be stored persistently in the system. Allows the object to specify which object 
            handler to use in the client process, as it is used in the default implementation of marshaling.
            </summary>
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPersist.GetClassID(System.Guid@)">
            <summary>
            Retrieves the class identifier (CLSID) of the object.
            </summary>
            <param name="pClassID"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IPin">
            <summary>
            This interface is exposed by all input and output pins of DirectShow filters.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.Connect(UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.AMMediaType)">
            <summary>
            Connects the pin to another pin.
            </summary>
            
            <param name="receivePin">Other pin to connect to.</param>
            <param name="mediaType">Type to use for the connections (optional).</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.ReceiveConnection(UMapx.Video.DirectShow.Internals.IPin,UMapx.Video.DirectShow.Internals.AMMediaType)">
            <summary>
            Makes a connection to this pin and is called by a connecting pin.
            </summary>
            
            <param name="receivePin">Connecting pin.</param>
            <param name="mediaType">Media type of the samples to be streamed.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.Disconnect">
            <summary>
            Breaks the current pin connection.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.ConnectedTo(UMapx.Video.DirectShow.Internals.IPin@)">
            <summary>
            Returns a pointer to the connecting pin.
            </summary>
            
            <param name="pin">Receives <b>IPin</b> interface of connected pin (if any).</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.ConnectionMediaType(UMapx.Video.DirectShow.Internals.AMMediaType)">
            <summary>
            Returns the media type of this pin's connection.
            </summary>
            
            <param name="mediaType">Pointer to an <see cref="T:UMapx.Video.DirectShow.Internals.AMMediaType"/> structure. If the pin is connected,
            the media type is returned. Otherwise, the structure is initialized to a default state in which
            all elements are 0, with the exception of <b>lSampleSize</b>, which is set to 1, and
            <b>FixedSizeSamples</b>, which is set to <b>true</b>.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.QueryPinInfo(UMapx.Video.DirectShow.Internals.PinInfo@)">
            <summary>
            Retrieves information about this pin (for example, the name, owning filter, and direction).
            </summary>
            
            <param name="pinInfo"><see cref="T:UMapx.Video.DirectShow.Internals.PinInfo"/> structure that receives the pin information.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.QueryDirection(UMapx.Video.DirectShow.Internals.PinDirection@)">
            <summary>
            Retrieves the direction for this pin.
            </summary>
            
            <param name="pinDirection">Receives direction of the pin.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.QueryId(System.String@)">
            <summary>
            Retrieves an identifier for the pin.
            </summary>
            
            <param name="id">Pin identifier.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.QueryAccept(UMapx.Video.DirectShow.Internals.AMMediaType)">
            <summary>
            Queries whether a given media type is acceptable by the pin.
            </summary>
            
            <param name="mediaType"><see cref="T:UMapx.Video.DirectShow.Internals.AMMediaType"/> structure that specifies the media type.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.EnumMediaTypes(System.IntPtr)">
            <summary>
            Provides an enumerator for this pin's preferred media types.
            </summary>
            
            <param name="enumerator">Address of a variable that receives a pointer to the <b>IEnumMediaTypes</b> interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.QueryInternalConnections(System.IntPtr,System.Int32@)">
            <summary>
            Provides an array of the pins to which this pin internally connects.
            </summary>
            
            <param name="apPin">Address of an array of <b>IPin</b> pointers.</param>
            <param name="nPin">On input, specifies the size of the array. When the method returns,
            the value is set to the number of pointers returned in the array.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.EndOfStream">
            <summary>
            Notifies the pin that no additional data is expected.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.BeginFlush">
            <summary>
            Begins a flush operation.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.EndFlush">
            <summary>
            Ends a flush operation.
            </summary>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPin.NewSegment(System.Int64,System.Int64,System.Double)">
            <summary>
            Specifies that samples following this call are grouped as a segment with a given start time, stop time, and rate.
            </summary>
            
            <param name="start">Start time of the segment, relative to the original source, in 100-nanosecond units.</param>
            <param name="stop">End time of the segment, relative to the original source, in 100-nanosecond units.</param>
            <param name="rate">Rate at which this segment should be processed, as a percentage of the original rate.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IPropertyBag">
            <summary>
            The <b>IPropertyBag</b> interface provides an object with a property bag in
            which the object can persistently save its properties. 
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPropertyBag.Read(System.String,System.Object@,System.IntPtr)">
            <summary>
            Read a property from property bag.
            </summary>
            
            <param name="propertyName">Property name to read.</param>
            <param name="pVar">Property value.</param>
            <param name="pErrorLog">Caller's error log.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IPropertyBag.Write(System.String,System.Object@)">
            <summary>
            Write property to property bag.
            </summary>
            
            <param name="propertyName">Property name to read.</param>
            <param name="pVar">Property value.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IReferenceClock">
             <summary>
             The IReferenceClock interface provides the reference time for the filter graph.
            
             Filters that can act as a reference clock can expose this interface. It is also exposed by the System Reference Clock. 
             The filter graph manager uses this interface to synchronize the filter graph. Applications can use this interface to 
             retrieve the current reference time, or to request notification of an elapsed time.
             </summary>
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IReferenceClock.GetTime(System.Int64@)">
            <summary>
            The GetTime method retrieves the current reference time.
            </summary>
            
            <param name="pTime">Pointer to a variable that receives the current time, in 100-nanosecond units.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IReferenceClock.AdviseTime(System.Int64,System.Int64,System.IntPtr,System.Int32@)">
            <summary>
            The AdviseTime method creates a one-shot advise request.
            </summary>
            
            <param name="baseTime">Base reference time, in 100-nanosecond units. See Remarks.</param>
            <param name="streamTime">Stream offset time, in 100-nanosecond units. See Remarks.</param>
            <param name="hEvent">Handle to an event, created by the caller.</param>
            <param name="pdwAdviseCookie">Pointer to a variable that receives an identifier for the advise request.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IReferenceClock.AdvisePeriodic(System.Int64,System.Int64,System.IntPtr,System.Int32@)">
            <summary>
            The AdvisePeriodic method creates a periodic advise request.
            </summary>
            
            <param name="startTime">Time of the first notification, in 100-nanosecond units. Must be greater than zero and less than MAX_TIME.</param>
            <param name="periodTime">Time between notifications, in 100-nanosecond units. Must be greater than zero.</param>
            <param name="hSemaphore">Handle to a semaphore, created by the caller.</param>
            <param name="pdwAdviseCookie">Pointer to a variable that receives an identifier for the advise request.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IReferenceClock.Unadvise(System.Int32)">
            <summary>
            The Unadvise method removes a pending advise request.
            </summary>
            
            <param name="dwAdviseCookie">Identifier of the request to remove. Use the value returned by IReferenceClock::AdviseTime  or IReferenceClock::AdvisePeriodic  in the pdwAdviseToken parameter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.ISampleGrabber">
            <summary>
            The interface is exposed by the Sample Grabber Filter. It enables an application to retrieve
            individual media samples as they move through the filter graph.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ISampleGrabber.SetOneShot(System.Boolean)">
            <summary>
            Specifies whether the filter should stop the graph after receiving one sample.
            </summary>
            
            <param name="oneShot">Boolean value specifying whether the filter should stop the graph after receiving one sample.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ISampleGrabber.SetMediaType(UMapx.Video.DirectShow.Internals.AMMediaType)">
            <summary>
            Specifies the media type for the connection on the Sample Grabber's input pin.
            </summary>
            
            <param name="mediaType">Specifies the required media type.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ISampleGrabber.GetConnectedMediaType(UMapx.Video.DirectShow.Internals.AMMediaType)">
            <summary>
            Retrieves the media type for the connection on the Sample Grabber's input pin.
            </summary>
            
            <param name="mediaType"><see cref="T:UMapx.Video.DirectShow.Internals.AMMediaType"/> structure, which receives media type.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ISampleGrabber.SetBufferSamples(System.Boolean)">
            <summary>
            Specifies whether to copy sample data into a buffer as it goes through the filter.
            </summary>
            
            <param name="bufferThem">Boolean value specifying whether to buffer sample data.
            If <b>true</b>, the filter copies sample data into an internal buffer.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ISampleGrabber.GetCurrentBuffer(System.Int32@,System.IntPtr)">
            <summary>
            Retrieves a copy of the sample that the filter received most recently.
            </summary>
            
            <param name="bufferSize">Pointer to the size of the buffer. If pBuffer is NULL, this parameter receives the required size.</param>
            <param name="buffer">Pointer to a buffer to receive a copy of the sample, or NULL.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ISampleGrabber.GetCurrentSample(System.IntPtr)">
            <summary>
            Not currently implemented.
            </summary>
            
            <param name="sample"></param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ISampleGrabber.SetCallback(UMapx.Video.DirectShow.Internals.ISampleGrabberCB,System.Int32)">
            <summary>
            Specifies a callback method to call on incoming samples.
            </summary>
            
            <param name="callback"><see cref="T:UMapx.Video.DirectShow.Internals.ISampleGrabberCB"/> interface containing the callback method, or NULL to cancel the callback.</param>
            <param name="whichMethodToCallback">Index specifying the callback method.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.ISampleGrabberCB">
            <summary>
            The interface provides callback methods for the <see cref="M:UMapx.Video.DirectShow.Internals.ISampleGrabber.SetCallback(UMapx.Video.DirectShow.Internals.ISampleGrabberCB,System.Int32)"/> method.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ISampleGrabberCB.SampleCB(System.Double,System.IntPtr)">
            <summary>
            Callback method that receives a pointer to the media sample.
            </summary>
            
            <param name="sampleTime">Starting time of the sample, in seconds.</param>
            <param name="sample">Pointer to the sample's <b>IMediaSample</b> interface.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ISampleGrabberCB.BufferCB(System.Double,System.IntPtr,System.Int32)">
            <summary>
            Callback method that receives a pointer to the sample bufferю
            </summary>
            
            <param name="sampleTime">Starting time of the sample, in seconds.</param>
            <param name="buffer">Pointer to a buffer that contains the sample data.</param>
            <param name="bufferLen">Length of the buffer pointed to by <b>buffer</b>, in bytes</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.ISpecifyPropertyPages">
            <summary>
            The interface indicates that an object supports property pages.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.ISpecifyPropertyPages.GetPages(UMapx.Video.DirectShow.Internals.CAUUID@)">
            <summary>
            Fills a counted array of GUID values where each GUID specifies the
            CLSID of each property page that can be displayed in the property
            sheet for this object.
            </summary>
            
            <param name="pPages">Pointer to a CAUUID structure that must be initialized
            and filled before returning.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.IVideoWindow">
            <summary>
            The interface sets properties on the video window.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_Caption(System.String)">
            <summary>
            Sets the video window caption.
            </summary>
            
            <param name="caption">Caption.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_Caption(System.String@)">
            <summary>
            Retrieves the video window caption.
            </summary>
            
            <param name="caption">Caption.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_WindowStyle(System.Int32)">
            <summary>
            Sets the window style on the video window.
            </summary>
            
            <param name="windowStyle">Window style flags.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_WindowStyle(System.Int32@)">
            <summary>
            Retrieves the window style on the video window.
            </summary>
            
            <param name="windowStyle">Window style flags.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_WindowStyleEx(System.Int32)">
            <summary>
            Sets the extended window style on the video window.
            </summary>
            
            <param name="windowStyleEx">Window extended style flags.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_WindowStyleEx(System.Int32@)">
            <summary>
            Retrieves the extended window style on the video window.
            </summary>
            
            <param name="windowStyleEx">Window extended style flags.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_AutoShow(System.Boolean)">
            <summary>
            Specifies whether the video renderer automatically shows the video window when it receives video data.
            </summary>
            
            <param name="autoShow">Specifies whether the video renderer automatically shows the video window.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_AutoShow(System.Boolean@)">
            <summary>
            Queries whether the video renderer automatically shows the video window when it receives video data.
            </summary>
            
            <param name="autoShow">REceives window auto show flag.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_WindowState(System.Int32)">
            <summary>
            Shows, hides, minimizes, or maximizes the video window.
            </summary>
            
            <param name="windowState">Window state.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_WindowState(System.Int32@)">
            <summary>
            Queries whether the video window is visible, hidden, minimized, or maximized.
            </summary>
            
            <param name="windowState">Window state.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_BackgroundPalette(System.Boolean)">
            <summary>
            Specifies whether the video window realizes its palette in the background.
            </summary>
            
            <param name="backgroundPalette">Value that specifies whether the video renderer realizes it palette in the background.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_BackgroundPalette(System.Boolean@)">
            <summary>
            Queries whether the video window realizes its palette in the background.
            </summary>
            
            <param name="backgroundPalette">Receives state of background palette flag.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_Visible(System.Boolean)">
            <summary>
            Shows or hides the video window.
            </summary>
            
            <param name="visible">Value that specifies whether to show or hide the window.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_Visible(System.Boolean@)">
            <summary>
            Queries whether the video window is visible.
            </summary>
            
            <param name="visible">Visibility flag.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_Left(System.Int32)">
            <summary>
            Sets the video window's x-coordinate.
            </summary>
            
            <param name="left">Specifies the x-coordinate, in pixels.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_Left(System.Int32@)">
            <summary>
            Retrieves the video window's x-coordinate.
            </summary>
            
            <param name="left">x-coordinate, in pixels.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_Width(System.Int32)">
            <summary>
            Sets the width of the video window.
            </summary>
            
            <param name="width">Specifies the width, in pixels.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_Width(System.Int32@)">
            <summary>
            Retrieves the width of the video window.
            </summary>
            
            <param name="width">Width, in pixels.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_Top(System.Int32)">
            <summary>
            Sets the video window's y-coordinate.
            </summary>
            
            <param name="top">Specifies the y-coordinate, in pixels.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_Top(System.Int32@)">
            <summary>
            Retrieves the video window's y-coordinate.
            </summary>
            
            <param name="top">y-coordinate, in pixels.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_Height(System.Int32)">
            <summary>
            Sets the height of the video window.
            </summary>
            
            <param name="height">Specifies the height, in pixels.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_Height(System.Int32@)">
            <summary>
            Retrieves the height of the video window.
            </summary>
            
            <param name="height">Height, in pixels.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_Owner(System.IntPtr)">
            <summary>
            Specifies a parent window for the video windowю
            </summary>
            
            <param name="owner">Specifies a handle to the parent window.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_Owner(System.IntPtr@)">
            <summary>
            Retrieves the video window's parent window, if anyю
            </summary>
            
            <param name="owner">Parent window's handle.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_MessageDrain(System.IntPtr)">
            <summary>
            Specifies a window to receive mouse and keyboard messages from the video window.
            </summary>
            
            <param name="drain">Specifies a handle to the window.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_MessageDrain(System.IntPtr@)">
            <summary>
            Retrieves the window that receives mouse and keyboard messages from the video window, if any.
            </summary>
            
            <param name="drain">Window's handle.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_BorderColor(System.Int32@)">
            <summary>
            Retrieves the color that appears around the edges of the destination rectangle.
            </summary>
            
            <param name="color">Border's color.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_BorderColor(System.Int32)">
            <summary>
            Sets the color that appears around the edges of the destination rectangle.
            </summary>
            
            <param name="color">Specifies the border color.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.get_FullScreenMode(System.Boolean@)">
            <summary>
            Queries whether the video renderer is in full-screen mode.
            </summary>
            
            <param name="fullScreenMode">Full-screen mode.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.put_FullScreenMode(System.Boolean)">
            <summary>
            Enables or disables full-screen mode.
            </summary>
            
            <param name="fullScreenMode">Boolean value that specifies whether to enable or disable full-screen mode.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.SetWindowForeground(System.Int32)">
            <summary>
            Places the video window at the top of the Z order.
            </summary>
            
            <param name="focus">Value that specifies whether to give the window focus.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.NotifyOwnerMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Forwards a message to the video window.
            </summary>
            
            <param name="hwnd">Handle to the window.</param>
            <param name="msg">Specifies the message.</param>
            <param name="wParam">Message parameter.</param>
            <param name="lParam">Message parameter.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.SetWindowPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the position of the video windowю
            </summary>
            
            <param name="left">Specifies the x-coordinate, in pixels.</param>
            <param name="top">Specifies the y-coordinate, in pixels.</param>
            <param name="width">Specifies the width, in pixels.</param>
            <param name="height">Specifies the height, in pixels.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.GetWindowPosition(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Retrieves the position of the video window.
            </summary>
            
            <param name="left">x-coordinate, in pixels.</param>
            <param name="top">y-coordinate, in pixels.</param>
            <param name="width">Width, in pixels.</param>
            <param name="height">Height, in pixels.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.GetMinIdealImageSize(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the minimum ideal size for the video image.
            </summary>
            
            <param name="width">Receives the minimum ideal width, in pixels.</param>
            <param name="height">Receives the minimum ideal height, in pixels.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.GetMaxIdealImageSize(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the maximum ideal size for the video image.
            </summary>
            
            <param name="width">Receives the maximum ideal width, in pixels.</param>
            <param name="height">Receives the maximum ideal height, in pixels.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.GetRestorePosition(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Retrieves the restored window position.
            </summary>
            
            <param name="left">x-coordinate, in pixels.</param>
            <param name="top">y-coordinate, in pixels.</param>
            <param name="width">Width, in pixels.</param>
            <param name="height">Height, in pixels.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.HideCursor(System.Boolean)">
            <summary>
            Hides the cursor.
            </summary>
            
            <param name="hideCursor">Specifies whether to hide or display the cursor.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.IVideoWindow.IsCursorHidden(System.Boolean@)">
            <summary>
            Queries whether the cursor is hidden.
            </summary>
            
            <param name="hideCursor">Specifies if cursor is hidden or not.</param>
            
            <returns>Return's <b>HRESULT</b> error code.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.PinDirection">
            <summary>
            This enumeration indicates a pin's direction.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.PinDirection.Input">
            <summary>
            Input pin.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.PinDirection.Output">
            <summary>
            Output pin.
            </summary>
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.AMMediaType">
            <summary>
            The structure describes the format of a media sample.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.AMMediaType.MajorType">
            <summary>
            Globally unique identifier (GUID) that specifies the major type of the media sample.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.AMMediaType.SubType">
            <summary>
            GUID that specifies the subtype of the media sample.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.AMMediaType.FixedSizeSamples">
            <summary>
            If <b>true</b>, samples are of a fixed size.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.AMMediaType.TemporalCompression">
            <summary>
            If <b>true</b>, samples are compressed using temporal (interframe) compression.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.AMMediaType.SampleSize">
            <summary>
            Size of the sample in bytes. For compressed data, the value can be zero.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.AMMediaType.FormatType">
            <summary>
            GUID that specifies the structure used for the format block.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.AMMediaType.unkPtr">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.AMMediaType.FormatSize">
            <summary>
            Size of the format block, in bytes.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.AMMediaType.FormatPtr">
            <summary>
            Pointer to the format block.
            </summary>
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.AMMediaType.Finalize">
            <summary>
            Destroys the instance of the <see cref="T:UMapx.Video.DirectShow.Internals.AMMediaType"/> class.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.AMMediaType.Dispose">
             <summary>
             Dispose the object.
             </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.AMMediaType.Dispose(System.Boolean)">
            <summary>
            Dispose the object
            </summary>
            
            <param name="disposing">Indicates if disposing was initiated manually.</param>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.PinInfo">
            <summary>
            The structure contains information about a pin.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.PinInfo.Filter">
            <summary>
            Owning filter.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.PinInfo.Direction">
            <summary>
            Direction of the pin.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.PinInfo.Name">
            <summary>
            Name of the pin.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.FilterInfo.Name">
            <summary>
            Filter's name.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.FilterInfo.FilterGraph">
            <summary>
            Owning graph.
            </summary>
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.VideoInfoHeader">
            <summary>
            The structure describes the bitmap and color information for a video image.
            </summary>
            
            <remarks>
              See https://msdn.microsoft.com/en-us/library/windows/desktop/dd407325(v=vs.85).aspx
            </remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader.SrcRect">
            <summary>
            <see cref="T:UMapx.Video.DirectShow.Internals.RECT"/> structure that specifies the source video window.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader.TargetRect">
            <summary>
            <see cref="T:UMapx.Video.DirectShow.Internals.RECT"/> structure that specifies the destination video window.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader.BitRate">
            <summary>
            Approximate data rate of the video stream, in bits per second.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader.BitErrorRate">
            <summary>
            Data error rate, in bit errors per second.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader.AverageTimePerFrame">
            <summary>
            The desired average display time of the video frames, in 100-nanosecond units.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader.BmiHeader">
            <summary>
            <see cref="T:UMapx.Video.DirectShow.Internals.BitmapInfoHeader"/> structure that contains color and dimension information for the video image bitmap.
            </summary>
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.VideoInfoHeader2">
            <summary>
            The structure describes the bitmap and color information for a video image (v2).
            </summary>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader2.SrcRect">
            <summary>
            <see cref="T:UMapx.Video.DirectShow.Internals.RECT"/> structure that specifies the source video window.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader2.TargetRect">
            <summary>
            <see cref="T:UMapx.Video.DirectShow.Internals.RECT"/> structure that specifies the destination video window.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader2.BitRate">
            <summary>
            Approximate data rate of the video stream, in bits per second.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader2.BitErrorRate">
            <summary>
            Data error rate, in bit errors per second.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader2.AverageTimePerFrame">
            <summary>
            The desired average display time of the video frames, in 100-nanosecond units.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader2.InterlaceFlags">
            <summary>
            Flags that specify how the video is interlaced.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader2.CopyProtectFlags">
            <summary>
            Flag set to indicate that the duplication of the stream should be restricted.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader2.PictAspectRatioX">
            <summary>
            The X dimension of picture aspect ratio.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader2.PictAspectRatioY">
            <summary>
            The Y dimension of picture aspect ratio.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader2.Reserved1">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader2.Reserved2">
            <summary>
            Reserved for future use. 
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.VideoInfoHeader2.BmiHeader">
            <summary>
            <see cref="T:UMapx.Video.DirectShow.Internals.BitmapInfoHeader"/> structure that contains color and dimension information for the video image bitmap.
            </summary>
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.BitmapInfoHeader">
            <summary>
            The structure contains information about the dimensions and color format of a device-independent bitmap (DIB).
            </summary>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.BitmapInfoHeader.Size">
            <summary>
            Specifies the number of bytes required by the structure.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.BitmapInfoHeader.Width">
            <summary>
            Specifies the width of the bitmap.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.BitmapInfoHeader.Height">
            <summary>
            Specifies the height of the bitmap, in pixels.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.BitmapInfoHeader.Planes">
            <summary>
            Specifies the number of planes for the target device. This value must be set to 1.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.BitmapInfoHeader.BitCount">
            <summary>
            Specifies the number of bits per pixel.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.BitmapInfoHeader.Compression">
            <summary>
            If the bitmap is compressed, this member is a <b>FOURCC</b> the specifies the compression.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.BitmapInfoHeader.ImageSize">
            <summary>
            Specifies the size, in bytes, of the image.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.BitmapInfoHeader.XPelsPerMeter">
            <summary>
            Specifies the horizontal resolution, in pixels per meter, of the target device for the bitmap.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.BitmapInfoHeader.YPelsPerMeter">
            <summary>
            Specifies the vertical resolution, in pixels per meter, of the target device for the bitmap.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.BitmapInfoHeader.ColorsUsed">
            <summary>
            Specifies the number of color indices in the color table that are actually used by the bitmap.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.BitmapInfoHeader.ColorsImportant">
            <summary>
            Specifies the number of color indices that are considered important for displaying the bitmap.
            </summary>
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.RECT">
            <summary>
            The structure defines the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.RECT.Left">
            <summary>
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.RECT.Top">
            <summary>
            Specifies the y-coordinate of the upper-left corner of the rectangle. 
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.RECT.Right">
            <summary>
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.RECT.Bottom">
            <summary>
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.CAUUID">
            <summary>
            The CAUUID structure is a Counted Array of UUID or GUID types.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.CAUUID.cElems">
            <summary>
            Size of the array pointed to by <b>pElems</b>.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.CAUUID.pElems">
            <summary>
            Pointer to an array of UUID values, each of which specifies UUID.
            </summary>
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.CAUUID.ToGuidArray">
            <summary>
            Performs manual marshaling of <b>pElems</b> to retrieve an array of Guid objects.
            </summary>
            
            <returns>A managed representation of <b>pElems</b>.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.DsEvCode">
            <summary>
            Enumeration of DirectShow event codes.
            </summary>
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.FilterState">
            <summary>
            Specifies a filter's state or the state of the filter graph.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.FilterState.State_Stopped">
            <summary>
            Stopped. The filter is not processing data.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.FilterState.State_Paused">
            <summary>
            Paused. The filter is processing data, but not rendering it.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.FilterState.State_Running">
            <summary>
            Running. The filter is processing and rendering data.
            </summary>
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.Tools">
            <summary>
            Some miscellaneous functions.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.Tools.GetPin(UMapx.Video.DirectShow.Internals.IBaseFilter,UMapx.Video.DirectShow.Internals.PinDirection,System.Int32)">
            <summary>
            Get filter's pin.
            </summary>
            
            <param name="filter">Filter to get pin of.</param>
            <param name="dir">Pin's direction.</param>
            <param name="num">Pin's number.</param>
            
            <returns>Returns filter's pin.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.Tools.GetInPin(UMapx.Video.DirectShow.Internals.IBaseFilter,System.Int32)">
            <summary>
            Get filter's input pin.
            </summary>
            
            <param name="filter">Filter to get pin of.</param>
            <param name="num">Pin's number.</param>
            
            <returns>Returns filter's pin.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.Tools.GetOutPin(UMapx.Video.DirectShow.Internals.IBaseFilter,System.Int32)">
            <summary>
            Get filter's output pin.
            </summary>
            
            <param name="filter">Filter to get pin of.</param>
            <param name="num">Pin's number.</param>
            
            <returns>Returns filter's pin.</returns>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.Clsid">
            <summary>
            DirectShow class IDs.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.Clsid.SystemDeviceEnum">
            <summary>
            System device enumerator.
            </summary>
            
            <remarks>Equals to CLSID_SystemDeviceEnum.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.Clsid.FilterGraph">
            <summary>
            Filter graph.
            </summary>
            
            <remarks>Equals to CLSID_FilterGraph.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.Clsid.SampleGrabber">
            <summary>
            Sample grabber.
            </summary>
            
            <remarks>Equals to CLSID_SampleGrabber.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.Clsid.CaptureGraphBuilder2">
            <summary>
            Capture graph builder.
            </summary>
            
            <remarks>Equals to CLSID_CaptureGraphBuilder2.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.Clsid.AsyncReader">
            <summary>
            Async reader.
            </summary>
            
            <remarks>Equals to CLSID_AsyncReader.</remarks>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.FormatType">
            <summary>
            DirectShow format types.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.FormatType.VideoInfo">
            <summary>
            VideoInfo.
            </summary>
            
            <remarks>Equals to FORMAT_VideoInfo.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.FormatType.VideoInfo2">
            <summary>
            VideoInfo2.
            </summary>
            
            <remarks>Equals to FORMAT_VideoInfo2.</remarks>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.MediaType">
            <summary>
            DirectShow media types.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaType.Video">
            <summary>
            Video.
            </summary>
            
            <remarks>Equals to MEDIATYPE_Video.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaType.Interleaved">
            <summary>
            Interleaved. Used by Digital Video (DV).
            </summary>
            
            <remarks>Equals to MEDIATYPE_Interleaved.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaType.Audio">
            <summary>
            Audio.
            </summary>
            
            <remarks>Equals to MEDIATYPE_Audio.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaType.Text">
            <summary>
            Text.
            </summary>
            
            <remarks>Equals to MEDIATYPE_Text.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaType.Stream">
            <summary>
            Byte stream with no time stamps.
            </summary>
            
            <remarks>Equals to MEDIATYPE_Stream.</remarks>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.MediaSubType">
            <summary>
            DirectShow media subtypes.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaSubType.YUYV">
            <summary>
            YUY2 (packed 4:2:2).
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_YUYV.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaSubType.IYUV">
            <summary>
            IYUV.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_IYUV.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaSubType.DVSD">
            <summary>
            A DV encoding format. (FOURCC 'DVSD')
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_DVSD.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaSubType.RGB1">
            <summary>
            RGB, 1 bit per pixel (bpp), palettized.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB1.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaSubType.RGB4">
            <summary>
            RGB, 4 bpp, palettized.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB4.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaSubType.RGB8">
            <summary>
            RGB, 8 bpp.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB8.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaSubType.RGB565">
            <summary>
            RGB 565, 16 bpp.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB565.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaSubType.RGB555">
            <summary>
            RGB 555, 16 bpp.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB555.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaSubType.RGB24">
            <summary>
            RGB, 24 bpp.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB24.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaSubType.RGB32">
            <summary>
            RGB, 32 bpp, no alpha channel.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_RGB32.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaSubType.Avi">
            <summary>
            Data from AVI file.
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_Avi.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.MediaSubType.Asf">
            <summary>
            Advanced Streaming Format (ASF).
            </summary>
            
            <remarks>Equals to MEDIASUBTYPE_Asf.</remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.MediaSubType.ConvertFrom(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Convert to MediaSubType from System.Drawing.Imaging.PixelFormat
            </summary>
            <param name="pixelFormat"></param>
            <returns>MediaSubType value</returns>
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.PinCategory">
            <summary>
            DirectShow pin categories.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.PinCategory.Capture">
            <summary>
            Capture pin.
            </summary>
            
            <remarks>Equals to PIN_CATEGORY_CAPTURE.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.PinCategory.StillImage">
            <summary>
            Still image pin.
            </summary>
            
            <remarks>Equals to PIN_CATEGORY_STILL.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.FindDirection.UpstreamOnly">
            <summary>Equals to LOOK_UPSTREAM_ONLY.</summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.Internals.FindDirection.DownstreamOnly">
            <summary>Equals to LOOK_DOWNSTREAM_ONLY.</summary>
        </member>
        <member name="T:UMapx.Video.DirectShow.Internals.Win32">
            <summary>
            Some Win32 API used internally.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.Win32.CreateBindCtx(System.Int32,System.Runtime.InteropServices.ComTypes.IBindCtx@)">
            <summary>
            Supplies a pointer to an implementation of <b>IBindCtx</b> (a bind context object).
            This object stores information about a particular moniker-binding operation.
            </summary>
            
            <param name="reserved">Reserved for future use; must be zero.</param>
            <param name="ppbc">Address of <b>IBindCtx*</b> pointer variable that receives the
            interface pointer to the new bind context object.</param>
            
            <returns>Returns <b>S_OK</b> on success.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.Win32.MkParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
            <summary>
            Converts a string into a moniker that identifies the object named by the string.
            </summary>
            
            <param name="pbc">Pointer to the IBindCtx interface on the bind context object to be used in this binding operation.</param>
            <param name="szUserName">Pointer to a zero-terminated wide character string containing the display name to be parsed. </param>
            <param name="pchEaten">Pointer to the number of characters of szUserName that were consumed.</param>
            <param name="ppmk">Address of <b>IMoniker*</b> pointer variable that receives the interface pointer
            to the moniker that was built from <b>szUserName</b>.</param>
            
            <returns>Returns <b>S_OK</b> on success.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.Win32.memcpy(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Copy a block of memory.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="src">Source pointer.</param>
            <param name="count">Memory block's length to copy.</param>
            
            <returns>Return's the value of <b>dst</b> - pointer to destination.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.Win32.OleCreatePropertyFrame(System.IntPtr,System.Int32,System.Int32,System.String,System.Int32,System.Object@,System.Int32,System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Invokes a new property frame, that is, a property sheet dialog box.
            </summary>
            
            <param name="hwndOwner">Parent window of property sheet dialog box.</param>
            <param name="x">Horizontal position for dialog box.</param>
            <param name="y">Vertical position for dialog box.</param>
            <param name="caption">Dialog box caption.</param>
            <param name="cObjects">Number of object pointers in <b>ppUnk</b>.</param>
            <param name="ppUnk">Pointer to the objects for property sheet.</param>
            <param name="cPages">Number of property pages in <b>lpPageClsID</b>.</param>
            <param name="lpPageClsID">Array of CLSIDs for each property page.</param>
            <param name="lcid">Locale identifier for property sheet locale.</param>
            <param name="dwReserved">Reserved.</param>
            <param name="lpvReserved">Reserved.</param>
            
            <returns>Returns <b>S_OK</b> on success.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.Internals.Win32.ProgIDFromCLSID(System.Guid@)">
            <summary>
            Gets a string name for a CLSID.
            </summary>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.PhysicalConnectorType">
            <summary>
            Specifies the physical type of pin (audio or video).
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.Default">
            <summary>
            Default value of connection type. Physically it does not exist, but just either to specify that
            connection type should not be changed (input) or was not determined (output).
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoTuner">
            <summary>
            Specifies a tuner pin for video.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoComposite">
            <summary>
            Specifies a composite pin for video.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoSVideo">
            <summary>
            Specifies an S-Video (Y/C video) pin.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoRGB">
            <summary>
            Specifies an RGB pin for video.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoYRYBY">
            <summary>
            Specifies a YRYBY (Y, R–Y, B–Y) pin for video.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoSerialDigital">
            <summary>
            Specifies a serial digital pin for video.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoParallelDigital">
            <summary>
            Specifies a parallel digital pin for video.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoSCSI">
            <summary>
            Specifies a SCSI (Small Computer System Interface) pin for video.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoAUX">
            <summary>
            Specifies an AUX (auxiliary) pin for video.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.Video1394">
            <summary>
            Specifies an IEEE 1394 pin for video.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoUSB">
            <summary>
            Specifies a USB (Universal Serial Bus) pin for video.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoDecoder">
            <summary>
            Specifies a video decoder pin.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoEncoder">
            <summary>
            Specifies a video encoder pin.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoSCART">
            <summary>
            Specifies a SCART (Peritel) pin for video.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.VideoBlack">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.AudioTuner">
            <summary>
            Specifies a tuner pin for audio.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.AudioLine">
            <summary>
            Specifies a line pin for audio.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.AudioMic">
            <summary>
            Specifies a microphone pin.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.AudioAESDigital">
            <summary>
            Specifies an AES/EBU (Audio Engineering Society/European Broadcast Union) digital pin for audio.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.AudioSPDIFDigital">
            <summary>
            Specifies an S/PDIF (Sony/Philips Digital Interface Format) digital pin for audio.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.AudioSCSI">
            <summary>
            Specifies a SCSI pin for audio.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.AudioAUX">
            <summary>
            Specifies an AUX pin for audio.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.Audio1394">
            <summary>
            Specifies an IEEE 1394 pin for audio.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.AudioUSB">
            <summary>
            Specifies a USB pin for audio.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.PhysicalConnectorType.AudioDecoder">
            <summary>
            Specifies an audio decoder pin.
            </summary>
        </member>
        <member name="T:UMapx.Video.DirectShow.FilterCategory">
            <summary>
            DirectShow filter categories.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.FilterCategory.AudioInputDevice">
            <summary>
            Audio input device category.
            </summary>
            
            <remarks>Equals to CLSID_AudioInputDeviceCategory.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.FilterCategory.VideoInputDevice">
            <summary>
            Video input device category.
            </summary>
            
            <remarks>Equals to CLSID_VideoInputDeviceCategory.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.FilterCategory.VideoCompressorCategory">
            <summary>
            Video compressor category.
            </summary>
            
            <remarks>Equals to CLSID_VideoCompressorCategory.</remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.FilterCategory.AudioCompressorCategory">
            <summary>
            Audio compressor category
            </summary>
            
            <remarks>Equals to CLSID_AudioCompressorCategory.</remarks>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.VideoCapabilities">
            <summary>
            Capabilities of video device such as frame size and frame rate.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.VideoCapabilities.FrameSize">
            <summary>
            Frame size supported by video device.
            </summary>
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCapabilities.FrameRate">
            <summary>
            Frame rate supported by video device for corresponding <see cref="F:UMapx.Video.DirectShow.VideoCapabilities.FrameSize">frame size</see>.
            </summary>
            
            <remarks><para><note>This field is depricated - should not be used.
            Its value equals to <see cref="F:UMapx.Video.DirectShow.VideoCapabilities.AverageFrameRate"/>.</note></para>
            </remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.VideoCapabilities.AverageFrameRate">
            <summary>
            Average frame rate of video device for corresponding <see cref="F:UMapx.Video.DirectShow.VideoCapabilities.FrameSize">frame size</see>.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.VideoCapabilities.MaximumFrameRate">
            <summary>
            Maximum frame rate of video device for corresponding <see cref="F:UMapx.Video.DirectShow.VideoCapabilities.FrameSize">frame size</see>.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.VideoCapabilities.BitCount">
            <summary>
            Number of bits per pixel provided by the camera.
            </summary>
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCapabilities.Equals(System.Object)">
            <summary>
            Check if the video capability equals to the specified object.
            </summary>
            
            <param name="obj">Object to compare with.</param>
            
            <returns>Returns true if both are equal are equal or false otherwise.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCapabilities.Equals(UMapx.Video.DirectShow.VideoCapabilities)">
            <summary>
            Check if two video capabilities are equal.
            </summary>
            
            <param name="vc2">Second video capability to compare with.</param>
            
            <returns>Returns true if both video capabilities are equal or false otherwise.</returns>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCapabilities.GetHashCode">
            <summary>
            Get hash code of the object.
            </summary>
            
            <returns>Returns hash code ot the object </returns>
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCapabilities.op_Equality(UMapx.Video.DirectShow.VideoCapabilities,UMapx.Video.DirectShow.VideoCapabilities)">
            <summary>
            Equality operator.
            </summary>
            
            <param name="a">First object to check.</param>
            <param name="b">Seconds object to check.</param>
            
            <returns>Return true if both objects are equal or false otherwise.</returns>
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCapabilities.op_Inequality(UMapx.Video.DirectShow.VideoCapabilities,UMapx.Video.DirectShow.VideoCapabilities)">
            <summary>
            Inequality operator.
            </summary>
            
            <param name="a">First object to check.</param>
            <param name="b">Seconds object to check.</param>
            
            <returns>Return true if both objects are not equal or false otherwise.</returns>
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCapabilities.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:UMapx.Video.DirectShow.VideoCaptureDevice">
            <summary>
            Video source for local video capture device (for example USB webcam).
            </summary>
            
            <remarks>
              <para>This video source class captures video data from local video capture device,
              like USB web camera (or internal), frame grabber, capture board - anything which
              supports <b>DirectShow</b> interface. For devices which has a shutter button or
              support external software triggering, the class also allows to do snapshots. Both
              video size and snapshot size can be configured.</para>
            </remarks>
            
            <example>
            <code source="Unit Tests\UMapx.Tests.Video\VideoCaptureDeviceTest.cs" region="doc_part_1" />
            <para>
              The video_NewFrame event could have been defined as in any of the following examples:</para>
            <code source="Unit Tests\UMapx.Tests.Video\VideoCaptureDeviceTest.cs" region="doc_part_2" />
            <code source="Unit Tests\UMapx.Tests.Video\VideoCaptureDeviceTest.cs" region="doc_part_3" />
            </example>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.CrossbarVideoInput">
            <summary>
            Current video input of capture card.
            </summary>
            
            <remarks><para>The property specifies video input to use for video devices like capture cards
            (those which provide crossbar configuration). List of available video inputs can be obtained
            from <see cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.AvailableCrossbarVideoInputs"/> property.</para>
            
            <para>To check if the video device supports crossbar configuration, the <see cref="M:UMapx.Video.DirectShow.VideoCaptureDevice.CheckIfCrossbarAvailable"/>
            method can be used.</para>
            
            <para><note>This property can be set as before running video device, as while running it.</note></para>
            
            <para>By default this property is set to <see cref="P:UMapx.Video.DirectShow.VideoInput.Default"/>, which means video input
            will not be set when running video device, but currently configured will be used. After video device
            is started this property will be updated anyway to tell current video input.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.AvailableCrossbarVideoInputs">
            <summary>
            Available inputs of the video capture card.
            </summary>
            
            <remarks><para>The property provides list of video inputs for devices like video capture cards.
            Such devices usually provide several video inputs, which can be selected using crossbar.
            If video device represented by the object of this class supports crossbar, then this property
            will list all video inputs. However if it is a regular USB camera, for example, which does not
            provide crossbar configuration, the property will provide zero length array.</para>
            
            <para>Video input to be used can be selected using <see cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.CrossbarVideoInput"/>. See also
            <see cref="M:UMapx.Video.DirectShow.VideoCaptureDevice.DisplayCrossbarPropertyPage(System.IntPtr)"/> method, which provides crossbar configuration dialog.</para>
            
            <para><note>It is recomended not to call this property immediately after <see cref="M:UMapx.Video.DirectShow.VideoCaptureDevice.Start"/> method, since
            device may not start yet and provide its information. It is better to call the property
            before starting device or a bit after (but not immediately after).</note></para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.ProvideSnapshots">
             <summary>
             Specifies if snapshots should be provided or not.
             </summary>
             
             <remarks><para>Some USB cameras/devices may have a shutter button, which may result into snapshot if it
             is pressed. So the property specifies if the video source will try providing snapshots or not - it will
             check if the camera supports providing still image snapshots. If camera supports snapshots and the property
             is set to <see langword="true"/>, then snapshots will be provided through <see cref="E:UMapx.Video.DirectShow.VideoCaptureDevice.SnapshotFrame"/>
             event.</para>
             
             <para>Check supported sizes of snapshots using <see cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.SnapshotCapabilities"/> property and set the
             desired size using <see cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.SnapshotResolution"/> property.</para>
             
             <para><note>The property must be set before running the video source to take effect.</note></para>
             
             <para>Default value of the property is set to <see langword="false"/>.</para>
             </remarks>
            
        </member>
        <member name="E:UMapx.Video.DirectShow.VideoCaptureDevice.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available frame from video source.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.DirectShow.VideoCaptureDevice.SnapshotFrame">
            <summary>
            Snapshot frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available snapshot frame - the one which comes when
            camera's snapshot/shutter button is pressed.</para>
            
            <para>See documentation to <see cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.ProvideSnapshots"/> for additional information.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed snapshot frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
            <seealso cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.ProvideSnapshots"/>
            
        </member>
        <member name="E:UMapx.Video.DirectShow.VideoCaptureDevice.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:UMapx.Video.DirectShow.VideoCaptureDevice.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.Source">
            <summary>
            Video source.
            </summary>
            
            <remarks>Video source is represented by moniker string of video capture device.</remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.DesiredFrameSize">
            <summary>
            Obsolete - no longer in use
            </summary>
            
            <remarks><para>The property is obsolete. Use <see cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.VideoResolution"/> property instead.
            Setting this property does not have any effect.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.DesiredSnapshotSize">
            <summary>
            Obsolete - no longer in use
            </summary>
            
            <remarks><para>The property is obsolete. Use <see cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.SnapshotResolution"/> property instead.
            Setting this property does not have any effect.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.DesiredFrameRate">
            <summary>
            Obsolete - no longer in use.
            </summary>
            
            <remarks><para>The property is obsolete. Setting this property does not have any effect.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.DesiredAverageTimePerFrame">
            <summary>
              The desired average display time of the video frames, in 100-nanosecond units.
              There is no guarantee that the device will actually respect this setting, however
              some devices will not work unless this property is set. See remarks for details.
            </summary>
            
            <remarks>
            <para>
              This property controls the initialization of the AvgTimePerFrame member of the 
              <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd407325(v=vs.85).aspx">
              DirectShow's VideoInfoHeader structure</a>. In normal situations this property
              does not need to be set, but some combinations of hardware and DirectShow filters
              might require this property to be set to 0 to achieve a good frame rate. If this
              property is set to -1, the AvgTimePerFrame member will not be initialized at all.</para>  
              
            <para>
              The default value for this property is 0 (AvgTimePerFrame will be initialized with 0).</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.VideoResolution">
            <summary>
            Video resolution to set.
            </summary>
            
            <remarks><para>The property allows to set one of the video resolutions supported by the camera.
            Use <see cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.VideoCapabilities"/> property to get the list of supported video resolutions.</para>
            
            <para><note>The property must be set before camera is started to make any effect.</note></para>
            
            <para>Default value of the property is set to <see langword="null"/>, which means default video
            resolution is used.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.SnapshotResolution">
            <summary>
            Snapshot resolution to set.
            </summary>
            
            <remarks><para>The property allows to set one of the snapshot resolutions supported by the camera.
            Use <see cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.SnapshotCapabilities"/> property to get the list of supported snapshot resolutions.</para>
            
            <para><note>The property must be set before camera is started to make any effect.</note></para>
            
            <para>Default value of the property is set to <see langword="null"/>, which means default snapshot
            resolution is used.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.VideoCapabilities">
            <summary>
            Video capabilities of the device.
            </summary>
            
            <remarks><para>The property provides list of device's video capabilities.</para>
            
            <para><note>It is recomended not to call this property immediately after <see cref="M:UMapx.Video.DirectShow.VideoCaptureDevice.Start"/> method, since
            device may not start yet and provide its information. It is better to call the property
            before starting device or a bit after (but not immediately after).</note></para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.SnapshotCapabilities">
            <summary>
            Snapshot capabilities of the device.
            </summary>
            
            <remarks><para>The property provides list of device's snapshot capabilities.</para>
            
            <para>If the array has zero length, then it means that this device does not support making
            snapshots.</para>
            
            <para>See documentation to <see cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.ProvideSnapshots"/> for additional information.</para>
            
            <para><note>It is recomended not to call this property immediately after <see cref="M:UMapx.Video.DirectShow.VideoCaptureDevice.Start"/> method, since
            device may not start yet and provide its information. It is better to call the property
            before starting device or a bit after (but not immediately after).</note></para>
            </remarks>
            
            <seealso cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.ProvideSnapshots"/>
            
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoCaptureDevice.SourceObject">
            <summary>
            Source COM object of camera capture device.
            </summary>
            
            <remarks><para>The source COM object of camera capture device is exposed for the
            case when user may need get direct access to the object for making some custom
            configuration of camera through DirectShow interface, for example.
            </para>
            
            <para>If camera is not running, the property is set to <see langword="null"/>.</para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.DirectShow.VideoCaptureDevice"/> class.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.DirectShow.VideoCaptureDevice"/> class.
            </summary>
            
            <param name="deviceMoniker">Moniker string of video capture device.</param>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.#ctor(System.String,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.DirectShow.VideoCaptureDevice"/> class.
            </summary>
            
            <param name="deviceMoniker">Moniker string of video capture device.</param>
            <param name="pixelFormat">Pixel format of video.</param>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:UMapx.Video.DirectShow.VideoCaptureDevice.NewFrame"/> event.</remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for source stopping after it was signalled to stop using
            <see cref="M:UMapx.Video.DirectShow.VideoCaptureDevice.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks><para>Stops video source aborting its thread.</para>
            
            <para><note>Since the method aborts background thread, its usage is highly not preferred
            and should be done only if there are no other options. The correct way of stopping camera
            is <see cref="M:UMapx.Video.DirectShow.VideoCaptureDevice.SignalToStop">signaling it stop</see> and then
            <see cref="M:UMapx.Video.DirectShow.VideoCaptureDevice.WaitForStop">waiting</see> for background thread's completion.</note></para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.Free">
            <summary>
            Free resource.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.DisplayPropertyPage(System.IntPtr)">
            <summary>
            Display property window for the video capture device providing its configuration
            capabilities.
            </summary>
            
            <param name="parentWindow">Handle of parent window.</param>
            
            <remarks><para><note>If you pass parent window's handle to this method, then the
            displayed property page will become modal window and none of the controls from the
            parent window will be accessible. In order to make it modeless it is required
            to pass <see cref="F:System.IntPtr.Zero"/> as parent window's handle.
            </note></para>
            </remarks>
            
            <exception cref="T:System.NotSupportedException">The video source does not support configuration property page.</exception>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.DisplayCrossbarPropertyPage(System.IntPtr)">
            <summary>
            Display property page of video crossbar (Analog Video Crossbar filter).
            </summary>
            
            <param name="parentWindow">Handle of parent window.</param>
            
            <remarks><para>The Analog Video Crossbar filter is modeled after a general switching matrix,
            with n inputs and m outputs. For example, a video card might have two external connectors:
            a coaxial connector for TV, and an S-video input. These would be represented as input pins on
            the filter. The displayed property page allows to configure the crossbar by selecting input
            of a video card to use.</para>
            
            <para><note>This method can be invoked only when video source is running (<see cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.IsRunning"/> is
            <see langword="true"/>). Otherwise it generates exception.</note></para>
            
            <para>Use <see cref="M:UMapx.Video.DirectShow.VideoCaptureDevice.CheckIfCrossbarAvailable"/> method to check if running video source provides
            crossbar configuration.</para>
            </remarks>
            
            <exception cref="T:System.ApplicationException">The video source must be running in order to display crossbar property page.</exception>
            <exception cref="T:System.NotSupportedException">Crossbar configuration is not supported by currently running video source.</exception>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.CheckIfCrossbarAvailable">
             <summary>
             Check if running video source provides crossbar for configuration.
             </summary>
             
             <returns>Returns <see langword="true"/> if crossbar configuration is available or
             <see langword="false"/> otherwise.</returns>
             
             <remarks><para>The method reports if the video source provides crossbar configuration
             using <see cref="M:UMapx.Video.DirectShow.VideoCaptureDevice.DisplayCrossbarPropertyPage(System.IntPtr)"/>.</para>
             </remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.SimulateTrigger">
            <summary>
            Simulates an external trigger.
            </summary>
            
            <remarks><para>The method simulates external trigger for video cameras, which support
            providing still image snapshots. The effect is equivalent as pressing camera's shutter
            button - a snapshot will be provided through <see cref="E:UMapx.Video.DirectShow.VideoCaptureDevice.SnapshotFrame"/> event.</para>
            
            <para><note>The <see cref="P:UMapx.Video.DirectShow.VideoCaptureDevice.ProvideSnapshots"/> property must be set to <see langword="true"/>
            to enable receiving snapshots.</note></para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.SetCameraProperty(UMapx.Video.DirectShow.CameraControlProperty,System.Int32,UMapx.Video.DirectShow.CameraControlFlags)">
            <summary>
            Sets a specified property on the camera.
            </summary>
            
            <param name="property">Specifies the property to set.</param>
            <param name="value">Specifies the new value of the property.</param>
            <param name="controlFlags">Specifies the desired control setting.</param>
            
            <returns>Returns true on sucee or false otherwise.</returns>
            
            <exception cref="T:System.ArgumentException">Video source is not specified - device moniker is not set.</exception>
            <exception cref="T:System.ApplicationException">Failed creating device object for moniker.</exception>
            <exception cref="T:System.NotSupportedException">The video source does not support camera control.</exception>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.GetCameraProperty(UMapx.Video.DirectShow.CameraControlProperty,System.Int32@,UMapx.Video.DirectShow.CameraControlFlags@)">
            <summary>
            Gets the current setting of a camera property.
            </summary>
            
            <param name="property">Specifies the property to retrieve.</param>
            <param name="value">Receives the value of the property.</param>
            <param name="controlFlags">Receives the value indicating whether the setting is controlled manually or automatically</param>
            
            <returns>Returns true on sucee or false otherwise.</returns>
            
            <exception cref="T:System.ArgumentException">Video source is not specified - device moniker is not set.</exception>
            <exception cref="T:System.ApplicationException">Failed creating device object for moniker.</exception>
            <exception cref="T:System.NotSupportedException">The video source does not support camera control.</exception>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.GetCameraPropertyRange(UMapx.Video.DirectShow.CameraControlProperty,System.Int32@,System.Int32@,System.Int32@,System.Int32@,UMapx.Video.DirectShow.CameraControlFlags@)">
            <summary>
            Gets the range and default value of a specified camera property.
            </summary>
            
            <param name="property">Specifies the property to query.</param>
            <param name="minValue">Receives the minimum value of the property.</param>
            <param name="maxValue">Receives the maximum value of the property.</param>
            <param name="stepSize">Receives the step size for the property.</param>
            <param name="defaultValue">Receives the default value of the property.</param>
            <param name="controlFlags">Receives a member of the <see cref="T:UMapx.Video.DirectShow.CameraControlFlags"/> enumeration, indicating whether the property is controlled automatically or manually.</param>
            
            <returns>Returns true on sucee or false otherwise.</returns>
            
            <exception cref="T:System.ArgumentException">Video source is not specified - device moniker is not set.</exception>
            <exception cref="T:System.ApplicationException">Failed creating device object for moniker.</exception>
            <exception cref="T:System.NotSupportedException">The video source does not support camera control.</exception>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.WorkerThread">
            <summary>
            Worker thread.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.OnNewFrame(System.Drawing.Bitmap)">
            <summary>
            Notifies clients about new frame.
            </summary>
            
            <param name="image">New frame's image.</param>
            
        </member>
        <member name="M:UMapx.Video.DirectShow.VideoCaptureDevice.OnSnapshotFrame(System.Drawing.Bitmap)">
            <summary>
            Notifies clients about new snapshot frame.
            </summary>
            
            <param name="image">New snapshot's image.</param>
            
        </member>
        <member name="T:UMapx.Video.DirectShow.VideoInput">
            <summary>
            Video input of a capture board.
            </summary>
            
            <remarks><para>The class is used to describe video input of devices like video capture boards,
            which usually provide several inputs.</para>
            </remarks>
            
        </member>
        <member name="F:UMapx.Video.DirectShow.VideoInput.Index">
            <summary>
            Index of the video input.
            </summary>
        </member>
        <member name="F:UMapx.Video.DirectShow.VideoInput.Type">
            <summary>
            Type of the video input.
            </summary>
        </member>
        <member name="P:UMapx.Video.DirectShow.VideoInput.Default">
            <summary>
            Default video input. Used to specify that it should not be changed.
            </summary>
        </member>
        <member name="T:UMapx.Video.VideoException">
            <summary>
            Video related exception.
            </summary>
            
            <remarks><para>The exception is thrown in the case of some video related issues, like
            failure of initializing codec, compression, etc.</para></remarks>
            
        </member>
        <member name="M:UMapx.Video.VideoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.VideoException"/> class.
            </summary>
            
            <param name="message">Exception's message.</param>
            
        </member>
        <member name="T:UMapx.Video.Boundary">
            <summary>
            Container for MJPEG stream boundaries
            </summary>
        </member>
        <member name="M:UMapx.Video.Boundary.#ctor">
            <summary>
            Creates an empty boundary for e.g. octet streams
            </summary>
        </member>
        <member name="M:UMapx.Video.Boundary.#ctor(System.String)">
            <summary>
            Creates instance using a string as boundary for e.g. multipart streams
            </summary>
            <param name="boundary">Boundary string</param>
        </member>
        <member name="P:UMapx.Video.Boundary.Content">
            <summary>
            Boundary string content
            </summary>
        </member>
        <member name="P:UMapx.Video.Boundary.Length">
            <summary>
            Length of boundary string
            </summary>
        </member>
        <member name="P:UMapx.Video.Boundary.HasValue">
            <summary>
            True if boundary string length is non-zero
            </summary>
        </member>
        <member name="P:UMapx.Video.Boundary.IsChecked">
            <summary>
            True if FixMalformedBoundary has been run
            </summary>
        </member>
        <member name="P:UMapx.Video.Boundary.IsValid">
            <summary>
            True if IsChecked is true and HasValue is true, or if HasValue is false
            </summary>
        </member>
        <member name="M:UMapx.Video.Boundary.Prepend(System.Char)">
            <summary>
            Adds character before boundary content
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:UMapx.Video.Boundary.FixMalformedBoundary(UMapx.Video.MJPEGStreamParser)">
            <summary>
            Some IP cameras, like AirLink, claim that boundary is "myboundary",
            when it is really "--myboundary". This corrects the issue.
            </summary>
            <param name="streamParser"></param>
        </member>
        <member name="M:UMapx.Video.Boundary.FromResponse(System.Net.WebResponse)">
            <summary>
            Creates boundary from WebResponse
            </summary>
            <param name="response">Source of boundary string</param>
            <returns>Boundary with string content</returns>
        </member>
        <member name="M:UMapx.Video.Boundary.op_Explicit(UMapx.Video.Boundary)~System.String">
            <summary>
            Converts boundary to string
            </summary>
            <param name="boundary">Boundary string content</param>
        </member>
        <member name="M:UMapx.Video.Boundary.op_Explicit(UMapx.Video.Boundary)~System.Byte[]">
            <summary>
            Converts boundary to byte array
            </summary>
            <param name="boundary">Boundary byte content</param>
        </member>
        <member name="T:UMapx.Video.MJPEGStreamParser">
            <summary>
            Handles functionality related to parsing a MJPEG stream
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.#ctor(UMapx.Video.Boundary,System.Byte[],System.Int32)">
            <summary>
            Creates instance of MJPEG stream parser using a boundary and a JPEG magic header
            </summary>
            <param name="boundary"></param>
            <param name="header"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="P:UMapx.Video.MJPEGStreamParser.Content">
            <summary>
            Content of byte array buffer
            </summary>
        </member>
        <member name="P:UMapx.Video.MJPEGStreamParser.HasFrame">
            <summary>
            True if frame is detected using DetectFrame and not removed using RemoveFrame
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.Read(System.IO.Stream)">
            <summary>
            Reads byte content to internal buffer from a stream
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.DetectFrame">
            <summary>
            Detects if a frame is present in the internal buffer
            </summary>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.GetFrame">
            <summary>
            Retrieves the frame from the internal buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:UMapx.Video.MJPEGStreamParser.RemoveFrame">
            <summary>
            Removes current frame from buffer
            </summary>
        </member>
        <member name="T:UMapx.Video.TimeoutStream">
            <summary>
            Wrapper that enables streams which do not support read and write timeouts to timeout
            Requires .NET 4.5 or above
            Used for .NET Standard 2.0
            </summary>
        </member>
        <member name="M:UMapx.Video.TimeoutStream.#ctor(System.IO.Stream)">
            <summary>
            Creates an instance of a TimeoutStream wrapper
            </summary>
            <param name="stream">Stream which may not support read or write timeouts</param>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.BaseStream">
            <summary>
            Stream wrapped by TimeoutStream wrapper
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.CanRead">
            <summary>
            Pass-through property
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.CanSeek">
            <summary>
            
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.CanWrite">
            <summary>
            Pass-through property
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.Length">
            <summary>
            Pass-through property
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.CanTimeout">
            <summary>
            Pass-through property
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.ReadTimeout">
            <summary>
            Value of TimeoutStream's read timeout
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.WriteTimeout">
            <summary>
            Value of TimeoutStream's write timeout
            </summary>
        </member>
        <member name="P:UMapx.Video.TimeoutStream.Position">
            <summary>
            Pass-through property
            </summary>
        </member>
        <member name="M:UMapx.Video.TimeoutStream.Flush">
            <summary>
            Pass-through method
            </summary>
        </member>
        <member name="M:UMapx.Video.TimeoutStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from base stream using a timeout
            </summary>
            <param name="buffer">Buffer byte array</param>
            <param name="offset">Offset</param>
            <param name="count">Number of bytes to read</param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Video.TimeoutStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Pass-through method
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Video.TimeoutStream.SetLength(System.Int64)">
            <summary>
            Pass-through method
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:UMapx.Video.TimeoutStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to base stream using a timeout
            </summary>
            <param name="buffer">Buffer byte array</param>
            <param name="offset">Offset</param>
            <param name="count">Number of bytes to write</param>
        </member>
        <member name="T:UMapx.Video.IVideoSource">
            <summary>
            Video source interface.
            </summary>
            
            <remarks>The interface describes common methods for different type of video sources.</remarks>
            
        </member>
        <member name="E:UMapx.Video.IVideoSource.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>This event is used to notify clients about new available video frame.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, but video source is responsible for
            disposing its own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.IVideoSource.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:UMapx.Video.IVideoSource.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.IVideoSource.Source">
            <summary>
            Video source.
            </summary>
            
            <remarks>The meaning of the property depends on particular video source.
            Depending on video source it may be a file name, URL or any other string
            describing the video source.</remarks>
            
        </member>
        <member name="P:UMapx.Video.IVideoSource.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.IVideoSource.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.IVideoSource.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="M:UMapx.Video.IVideoSource.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:UMapx.Video.IVideoSource.NewFrame"/> event.</remarks>
            
        </member>
        <member name="M:UMapx.Video.IVideoSource.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:UMapx.Video.IVideoSource.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for video source stopping after it was signalled to stop using
            <see cref="M:UMapx.Video.IVideoSource.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:UMapx.Video.IVideoSource.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks>Stops video source aborting its thread.</remarks>
            
        </member>
        <member name="T:UMapx.Video.JPEGStream">
            <summary>
            JPEG video source.
            </summary>
            
            <remarks><para>The video source constantly downloads JPEG files from the specified URL.</para>
            
            <para>Sample usage:</para>
            <code>
            // create JPEG video source
            JPEGStream stream = new JPEGStream( "some url" );
            // set NewFrame event handler
            stream.NewFrame += new NewFrameEventHandler( video_NewFrame );
            // start the video source
            stream.Start( );
            // ...
            // signal to stop
            stream.SignalToStop( );
            // ...
            
            private void video_NewFrame( object sender, NewFrameEventArgs eventArgs )
            {
                // get new frame
                Bitmap bitmap = eventArgs.Frame;
                // process the frame
            }
            </code>
            
            <para><note>Some cameras produce HTTP header, which does not conform strictly to
            standard, what leads to .NET exception. To avoid this exception the <b>useUnsafeHeaderParsing</b>
            configuration option of <b>httpWebRequest</b> should be set, what may be done using application
            configuration file.</note></para>
            <code>
            &lt;configuration&gt;
            	&lt;system.net&gt;
            		&lt;settings&gt;
            			&lt;httpWebRequest useUnsafeHeaderParsing="true" /&gt;
            		&lt;/settings&gt;
            	&lt;/system.net&gt;
            &lt;/configuration&gt;
            </code>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.JPEGStream.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available frame from video source.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.JPEGStream.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:UMapx.Video.JPEGStream.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.SeparateConnectionGroup">
            <summary>
            Use or not separate connection group.
            </summary>
            
            <remarks>The property indicates to open web request in separate connection group.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.PreventCaching">
            <summary>
            Use or not caching.
            </summary>
            
            <remarks>If the property is set to <b>true</b>, then a fake random parameter will be added
            to URL to prevent caching. It's required for clients, who are behind proxy server.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.FrameInterval">
            <summary>
            Frame interval.
            </summary>
            
            <remarks>The property sets the interval in milliseconds betwen frames. If the property is
            set to 100, then the desired frame rate will be 10 frames per second. Default value is 0 -
            get new frames as fast as possible.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.Source">
            <summary>
            Video source.
            </summary>
            
            <remarks>URL, which provides JPEG files.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.Login">
            <summary>
            Login value.
            </summary>
            
            <remarks>Login required to access video source.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.Password">
            <summary>
            Password value.
            </summary>
            
            <remarks>Password required to access video source.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.Proxy">
            <summary>
            Gets or sets proxy information for the request.
            </summary>
            
            <remarks><para>The local computer or application config file may specify that a default
            proxy to be used. If the Proxy property is specified, then the proxy settings from the Proxy
            property overridea the local computer or application config file and the instance will use
            the proxy settings specified. If no proxy is specified in a config file
            and the Proxy property is unspecified, the request uses the proxy settings
            inherited from Internet Explorer on the local computer. If there are no proxy settings
            in Internet Explorer, the request is sent directly to the server.
            </para></remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.RequestTimeout">
            <summary>
            Request timeout value.
            </summary>
            
            <remarks><para>The property sets timeout value in milliseconds for web requests.</para>
            
            <para>Default value is set <b>10000</b> milliseconds.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="P:UMapx.Video.JPEGStream.ForceBasicAuthentication">
            <summary>
            Force using of basic authentication when connecting to the video source.
            </summary>
            
            <remarks><para>For some IP cameras (TrendNET IP cameras, for example) using standard .NET's authentication via credentials
            does not seem to be working (seems like camera does not request for authentication, but expects corresponding headers to be
            present on connection request). So this property allows to force basic authentication by adding required HTTP headers when
            request is sent.</para>
            
            <para>Default value is set to <see langword="false"/>.</para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.JPEGStream"/> class.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.JPEGStream"/> class.
            </summary>
            
            <param name="source">URL, which provides JPEG files.</param>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:UMapx.Video.JPEGStream.NewFrame"/> event.</remarks>
            
            <exception cref="T:System.ArgumentException">Video source is not specified.</exception>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for source stopping after it was signalled to stop using
            <see cref="M:UMapx.Video.JPEGStream.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks><para>Stops video source aborting its thread.</para>
            
            <para><note>Since the method aborts background thread, its usage is highly not preferred
            and should be done only if there are no other options. The correct way of stopping camera
            is <see cref="M:UMapx.Video.JPEGStream.SignalToStop">signaling it stop</see> and then
            <see cref="M:UMapx.Video.JPEGStream.WaitForStop">waiting</see> for background thread's completion.</note></para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.JPEGStream.Free">
            <summary>
            Free resource.
            </summary>
            
        </member>
        <member name="T:UMapx.Video.MJPEGStream">
            <summary>
            MJPEG video source.
            </summary>
            
            <remarks><para>The video source downloads JPEG images from the specified URL, which represents
            MJPEG stream.</para>
            
            <para>Sample usage:</para>
            <code>
            // create MJPEG video source
            MJPEGStream stream = new MJPEGStream( "some url" );
            // set event handlers
            stream.NewFrame += new NewFrameEventHandler( video_NewFrame );
            // start the video source
            stream.Start( );
            // ...
            </code>
            
            <para><note>Some cameras produce HTTP header, which does not conform strictly to
            standard, what leads to .NET exception. To avoid this exception the <b>useUnsafeHeaderParsing</b>
            configuration option of <b>httpWebRequest</b> should be set, what may be done using application
            configuration file.</note></para>
            <code>
            &lt;configuration&gt;
            	&lt;system.net&gt;
            		&lt;settings&gt;
            			&lt;httpWebRequest useUnsafeHeaderParsing="true" /&gt;
            		&lt;/settings&gt;
            	&lt;/system.net&gt;
            &lt;/configuration&gt;
            </code>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.MJPEGStream.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available frame from video source.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.MJPEGStream.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:UMapx.Video.MJPEGStream.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.SeparateConnectionGroup">
            <summary>
            Use or not separate connection group.
            </summary>
            
            <remarks>The property indicates to open web request in separate connection group.</remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.Source">
            <summary>
            Video source.
            </summary>
            
            <remarks>URL, which provides MJPEG stream.</remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.Login">
            <summary>
            Login value.
            </summary>
            
            <remarks>Login required to access video source.</remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.Password">
            <summary>
            Password value.
            </summary>
            
            <remarks>Password required to access video source.</remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.Proxy">
            <summary>
            Gets or sets proxy information for the request.
            </summary>
            
            <remarks><para>The local computer or application config file may specify that a default
            proxy to be used. If the Proxy property is specified, then the proxy settings from the Proxy
            property overridea the local computer or application config file and the instance will use
            the proxy settings specified. If no proxy is specified in a config file
            and the Proxy property is unspecified, the request uses the proxy settings
            inherited from Internet Explorer on the local computer. If there are no proxy settings
            in Internet Explorer, the request is sent directly to the server.
            </para></remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.HttpUserAgent">
            <summary>
            User agent to specify in HTTP request header.
            </summary>
            
            <remarks><para>Some IP cameras check what is the requesting user agent and depending
            on it they provide video in different formats or do not provide it at all. The property
            sets the value of user agent string, which is sent to camera in request header.
            </para>
            
            <para>Default value is set to "Mozilla/5.0". If the value is set to <see langword="null"/>,
            the user agent string is not sent in request header.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.RequestTimeout">
            <summary>
            Request timeout value.
            </summary>
            
            <remarks>The property sets timeout value in milliseconds for web requests.
            Default value is 10000 milliseconds.</remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="P:UMapx.Video.MJPEGStream.ForceBasicAuthentication">
            <summary>
            Force using of basic authentication when connecting to the video source.
            </summary>
            
            <remarks><para>For some IP cameras (TrendNET IP cameras, for example) using standard .NET's authentication via credentials
            does not seem to be working (seems like camera does not request for authentication, but expects corresponding headers to be
            present on connection request). So this property allows to force basic authentication by adding required HTTP headers when
            request is sent.</para>
            
            <para>Default value is set to <see langword="false"/>.</para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.MJPEGStream"/> class.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.MJPEGStream"/> class.
            </summary>
            
            <param name="source">URL, which provides MJPEG stream.</param>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:UMapx.Video.MJPEGStream.NewFrame"/> event.</remarks>
            
            <exception cref="T:System.ArgumentException">Video source is not specified.</exception>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for source stopping after it was signalled to stop using
            <see cref="M:UMapx.Video.MJPEGStream.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks><para>Stops video source aborting its thread.</para>
            
            <para><note>Since the method aborts background thread, its usage is highly not preferred
            and should be done only if there are no other options. The correct way of stopping camera
            is <see cref="M:UMapx.Video.MJPEGStream.SignalToStop">signaling it stop</see> and then
            <see cref="M:UMapx.Video.MJPEGStream.WaitForStop">waiting</see> for background thread's completion.</note></para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.MJPEGStream.FreeThreadResources">
            <summary>
            Free resource.
            </summary>
            
        </member>
        <member name="T:UMapx.Video.ScreenCaptureStream">
            <summary>
            Screen capture video source.
            </summary>
            
            <remarks><para>The video source constantly captures the desktop screen.</para>
            
            <para>Sample usage:</para>
            <code>
            // get entire desktop area size
            Rectangle screenArea = Rectangle.Empty;
            foreach ( System.Windows.Forms.Screen screen in 
                      System.Windows.Forms.Screen.AllScreens )
            {
                screenArea = Rectangle.Union( screenArea, screen.Bounds );
            }
                
            // create screen capture video source
            ScreenCaptureStream stream = new ScreenCaptureStream( screenArea );
            
            // set NewFrame event handler
            stream.NewFrame += new NewFrameEventHandler( video_NewFrame );
            
            // start the video source
            stream.Start( );
            
            // ...
            // signal to stop
            stream.SignalToStop( );
            // ...
            
            private void video_NewFrame( object sender, NewFrameEventArgs eventArgs )
            {
                // get new frame
                Bitmap bitmap = eventArgs.Frame;
                // process the frame
            }
            </code>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.ScreenCaptureStream.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available frame from video source.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.ScreenCaptureStream.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:UMapx.Video.ScreenCaptureStream.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.ScreenCaptureStream.Source">
            <summary>
            Video source.
            </summary>
            
        </member>
        <member name="P:UMapx.Video.ScreenCaptureStream.Region">
            <summary>
            Gets or sets the screen capture region.
            </summary>
            
            <remarks><para>This property specifies which region (rectangle) of the screen to capture. It may cover multiple displays
            if those are available in the system.</para>
            
            <para><note>The property must be set before starting video source to have any effect.</note></para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.ScreenCaptureStream.FrameInterval">
            <summary>
            Time interval between making screen shots, ms.
            </summary>
            
            <remarks><para>The property specifies time interval in milliseconds between consequent screen captures.
            Expected frame rate of the stream should be approximately 1000/FrameInteval.</para>
            
            <para>If the property is set to 0, then the stream will capture screen as fast as the system allows.</para>
            
            <para>Default value is set to <b>100</b>.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.ScreenCaptureStream.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.ScreenCaptureStream.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks><para><note>The property is not implemented for this video source and always returns 0.</note></para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.ScreenCaptureStream.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.ScreenCaptureStream"/> class.
            </summary>
            
            <param name="region">Screen's rectangle to capture (the rectangle may cover multiple displays).</param>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.#ctor(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.ScreenCaptureStream"/> class.
            </summary>
            
            <param name="region">Screen's rectangle to capture (the rectangle may cover multiple displays).</param>
            <param name="frameInterval">Time interval between making screen shots, ms.</param>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:UMapx.Video.ScreenCaptureStream.NewFrame"/> event.</remarks>
            
            <exception cref="T:System.ArgumentException">Video source is not specified.</exception>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for source stopping after it was signalled to stop using
            <see cref="M:UMapx.Video.ScreenCaptureStream.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks><para>Stops video source aborting its thread.</para>
            
            <para><note>Since the method aborts background thread, its usage is highly not preferred
            and should be done only if there are no other options. The correct way of stopping camera
            is <see cref="M:UMapx.Video.ScreenCaptureStream.SignalToStop">signaling it stop</see> and then
            <see cref="M:UMapx.Video.ScreenCaptureStream.WaitForStop">waiting</see> for background thread's completion.</note></para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.ScreenCaptureStream.Free">
            <summary>
            Free resource.
            </summary>
            
        </member>
        <member name="T:UMapx.Video.VFW.AVIFileVideoSource">
            <summary>
            AVI file video source.
            </summary>
            
            <remarks><para>The video source reads AVI files using Video for Windows.</para>
            
            <para>Sample usage:</para>
            <code>
            // create AVI file video source
            AVIFileVideoSource source = new AVIFileVideoSource( "some file" );
            // set event handlers
            source.NewFrame += new NewFrameEventHandler( video_NewFrame );
            // start the video source
            source.Start( );
            // ...
            // signal to stop
            source.SignalToStop( );
            
            // New frame event handler, which is invoked on each new available video frame
            private void video_NewFrame( object sender, NewFrameEventArgs eventArgs )
            {
                // get new frame
                Bitmap bitmap = eventArgs.Frame;
                // process the frame
            }
            </code>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.VFW.AVIFileVideoSource.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available frame from video source.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:UMapx.Video.VFW.AVIFileVideoSource.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:UMapx.Video.VFW.AVIFileVideoSource.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIFileVideoSource.FrameInterval">
            <summary>
            Frame interval.
            </summary>
            
            <remarks><para>The property sets the interval in milliseconds between frames. If the property is
            set to 100, then the desired frame rate will be 10 frames per second.</para>
            
            <para><note>Setting this property to 0 leads to no delay between video frames - frames
            are read as fast as possible.</note></para>
            
            <para>Default value is set to <b>0</b>.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIFileVideoSource.FrameIntervalFromSource">
            <summary>
            Get frame interval from source or use manually specified.
            </summary>
            
            <remarks><para>The property specifies which frame rate to use for video playing.
            If the property is set to <see langword="true"/>, then video is played
            with original frame rate, which is set in source AVI file. If the property is
            set to <see langword="false"/>, then custom frame rate is used, which is
            calculated based on the manually specified <see cref="P:UMapx.Video.VFW.AVIFileVideoSource.FrameInterval">frame interval</see>.</para>
            
            <para>Default value is set to <see langword="true"/>.</para>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIFileVideoSource.Source">
            <summary>
            Video source.
            </summary>
            
            <remarks><para>Video file name to play.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIFileVideoSource.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIFileVideoSource.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIFileVideoSource.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIFileVideoSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.VFW.AVIFileVideoSource"/> class.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIFileVideoSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.VFW.AVIFileVideoSource"/> class.
            </summary>
            
            <param name="source">Video file name.</param>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIFileVideoSource.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:UMapx.Video.VFW.AVIFileVideoSource.NewFrame"/> event.</remarks>
            
            <exception cref="T:System.ArgumentException">Video source is not specified.</exception>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIFileVideoSource.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIFileVideoSource.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for source stopping after it was signalled to stop using
            <see cref="M:UMapx.Video.VFW.AVIFileVideoSource.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIFileVideoSource.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks><para>Stops video source aborting its thread.</para>
            
            <para><note>Since the method aborts background thread, its usage is highly not preferred
            and should be done only if there are no other options. The correct way of stopping camera
            is <see cref="M:UMapx.Video.VFW.AVIFileVideoSource.SignalToStop">signaling it stop</see> and then
            <see cref="M:UMapx.Video.VFW.AVIFileVideoSource.WaitForStop">waiting</see> for background thread's completion.</note></para>
            </remarks>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIFileVideoSource.Free">
            <summary>
            Free resource.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIFileVideoSource.WorkerThread">
            <summary>
            Worker thread.
            </summary>
            
        </member>
        <member name="T:UMapx.Video.VFW.AVIReader">
            <summary>
            AVI files reading using Video for Windows.
            </summary>
            
            <remarks><para>The class allows to read AVI files using Video for Windows API.</para>
            
            <para>Sample usage:</para>
            <code>
            // instantiate AVI reader
            AVIReader reader = new AVIReader( );
            // open video file
            reader.Open( "test.avi" );
            // read the video file
            while ( reader.Position - reader.Start &lt; reader.Length )
            {
                // get next frame
                Bitmap image = reader.GetNextFrame( );
                // .. process the frame somehow or display it
            }
            reader.Close( );
            </code>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIReader.Width">
            <summary>
            Width of video frames.
            </summary>
            
            <remarks><para>The property specifies the width of video frames within the opened video
            file.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIReader.Height">
            <summary>
            Height of video frames.
            </summary>
            
            <remarks><para>The property specifies the height of video frames within the opened video
            file.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIReader.Position">
            <summary>
            Current position in video stream.
            </summary>
            
            <remarks>Setting position outside of video range, will lead to reseting position to the start.</remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIReader.Start">
            <summary>
            Starting position of video stream.
            </summary>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIReader.Length">
            <summary>
            Video stream length.
            </summary>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIReader.FrameRate">
            <summary>
            Desired playing frame rate.
            </summary>
            
            <remarks><para>The property specifies the frame rate, which should be used to play the opened video
            file.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIReader.Codec">
            <summary>
            Codec used for video compression.
            </summary>
            
            <remarks><para>The property tells about which codec was used to encode the opened video file.</para></remarks>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.VFW.AVIReader"/> class.
            </summary>
            
            <remarks>Initializes Video for Windows library.</remarks>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIReader.Finalize">
            <summary>
            Destroys the instance of the <see cref="T:UMapx.Video.VFW.AVIReader"/> class.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIReader.Dispose">
            <summary>
            Dispose the object.
            </summary>
            
            <remarks>Frees unmanaged resources used by the object. The object becomes unusable
            after that.</remarks>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIReader.Dispose(System.Boolean)">
            <summary>
            Dispose the object.
            </summary>
            
            <param name="disposing">Indicates if disposing was initiated manually.</param>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIReader.Open(System.String)">
             <summary>
             Open AVI file.
             </summary>
             
             <param name="fileName">AVI file name to open.</param>
             
             <remarks><para>The method opens a video file and prepares the stream and decoder for
             reading video frames with the help of <see cref="M:UMapx.Video.VFW.AVIReader.GetNextFrame"/> method.</para>
             </remarks>
             
             <exception cref="T:System.IO.IOException">Failed opening the specified file.</exception>
             <exception cref="T:UMapx.Video.VideoException">A error occurred while opening the video file. See exception message.</exception>
            
             
        </member>
        <member name="M:UMapx.Video.VFW.AVIReader.Close">
            <summary>
            Close video file.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIReader.GetNextFrame">
            <summary>
            Get next frame of opened video stream.
            </summary>
            
            <returns>Returns next frame as a bitmap.</returns>
            
            <remarks><para>The method reads and returns the next video frame in the opened video stream
            at the position, which is set in <see cref="P:UMapx.Video.VFW.AVIReader.Position"/> property.</para></remarks>
            
            <exception cref="T:System.IO.IOException">Thrown if no video file was open.</exception>
            <exception cref="T:UMapx.Video.VideoException">A error occurred while reading next video frame. See exception message.</exception>
            
        </member>
        <member name="T:UMapx.Video.VFW.AVIWriter">
            <summary>
            AVI files writing using Video for Windows interface.
            </summary>
            
            <remarks><para>The class allows to write AVI files using Video for Windows API.</para>
            
            <para>Sample usage:</para>
            <code>
            // instantiate AVI writer, use WMV3 codec
            AVIWriter writer = new AVIWriter( "wmv3" );
            // create new AVI file and open it
            writer.Open( "test.avi", 320, 240 );
            // create frame image
            Bitmap image = new Bitmap( 320, 240 );
            
            for ( int i = 0; i &lt; 240; i++ )
            {
                // update image
                image.SetPixel( i, i, Color.Red );
                // add the image as a new frame of video file
                writer.AddFrame( image );
            }
            writer.Close( );
            </code>
            </remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIWriter.Width">
            <summary>
            Width of video frames.
            </summary>
            
            <remarks><para>The property specifies the width of video frames, which are acceptable
            by <see cref="M:UMapx.Video.VFW.AVIWriter.AddFrame(System.Drawing.Bitmap)"/> method for saving, which is set in <see cref="M:UMapx.Video.VFW.AVIWriter.Open(System.String,System.Int32,System.Int32)"/>
            method.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIWriter.Height">
            <summary>
            Height of video frames.
            </summary>
            
            <remarks><para>The property specifies the height of video frames, which are acceptable
            by <see cref="M:UMapx.Video.VFW.AVIWriter.AddFrame(System.Drawing.Bitmap)"/> method for saving, which is set in <see cref="M:UMapx.Video.VFW.AVIWriter.Open(System.String,System.Int32,System.Int32)"/>
            method.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIWriter.Position">
            <summary>
            Current position in video stream.
            </summary>
            
            <remarks><para>The property tell current position in video stream, which actually equals
            to the amount of frames added using <see cref="M:UMapx.Video.VFW.AVIWriter.AddFrame(System.Drawing.Bitmap)"/> method.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIWriter.FrameRate">
            <summary>
            Desired playing frame rate.
            </summary>
            
            <remarks><para>The property sets the video frame rate, which should be use during playing
            of the video to be saved.</para>
            
            <para><note>The property should be set befor opening new file to take effect.</note></para>
            
            <para>Default frame rate is set to <b>25</b>.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIWriter.Codec">
            <summary>
            Codec used for video compression.
            </summary>
            
            <remarks><para>The property sets the FOURCC code of video compression codec, which needs to
            be used for video encoding.</para>
            
            <para><note>The property should be set befor opening new file to take effect.</note></para>
            
            <para>Default video codec is set <b>"DIB "</b>, which means no compression.</para></remarks>
            
        </member>
        <member name="P:UMapx.Video.VFW.AVIWriter.Quality">
            <summary>
            Compression video quality.
            </summary>
            
            <remarks><para>The property sets video quality used by codec in order to balance compression rate
            and image quality. The quality is measured usually in the [0, 100] range.</para>
            
            <para><note>The property should be set befor opening new file to take effect.</note></para>
            
            <para>Default value is set to <b>-1</b> - default compression quality of the codec.</para></remarks>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.VFW.AVIWriter"/> class.
            </summary>
            
            <remarks>Initializes Video for Windows library.</remarks>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.VFW.AVIWriter"/> class.
            </summary>
            
            <param name="codec">Codec to use for compression.</param>
            
            <remarks>Initializes Video for Windows library.</remarks>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIWriter.Finalize">
            <summary>
            Destroys the instance of the <see cref="T:UMapx.Video.VFW.AVIWriter"/> class.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIWriter.Dispose">
            <summary>
            Dispose the object.
            </summary>
            
            <remarks>Frees unmanaged resources used by the object. The object becomes unusable
            after that.</remarks>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIWriter.Dispose(System.Boolean)">
            <summary>
            Dispose the object.
            </summary>
            
            <param name="disposing">Indicates if disposing was initiated manually.</param>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIWriter.Open(System.String,System.Int32,System.Int32)">
            <summary>
            Create new AVI file and open it for writing.
            </summary>
            
            <param name="fileName">AVI file name to create.</param>
            <param name="width">Video width.</param>
            <param name="height">Video height.</param>
            
            <remarks><para>The method opens (creates) a video files, configure video codec and prepares
            the stream for saving video frames with a help of <see cref="M:UMapx.Video.VFW.AVIWriter.AddFrame(System.Drawing.Bitmap)"/> method.</para></remarks>
            
            <exception cref="T:System.IO.IOException">Failed opening the specified file.</exception>
            <exception cref="T:UMapx.Video.VideoException">A error occurred while creating new video file. See exception message.</exception>
            <exception cref="T:System.OutOfMemoryException">Insufficient memory for internal buffer.</exception>
            <exception cref="T:System.ArgumentException">Video file resolution must be a multiple of two.</exception>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIWriter.Close">
            <summary>
            Close video file.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.VFW.AVIWriter.AddFrame(System.Drawing.Bitmap)">
            <summary>
            Add new frame to the AVI file.
            </summary>
            
            <param name="frameImage">New frame image.</param>
            
            <remarks><para>The method adds new video frame to an opened video file. The width and heights
            of the frame should be the same as it was specified in <see cref="M:UMapx.Video.VFW.AVIWriter.Open(System.String,System.Int32,System.Int32)"/> method
            (see <see cref="P:UMapx.Video.VFW.AVIWriter.Width"/> and <see cref="P:UMapx.Video.VFW.AVIWriter.Height"/> properties).</para></remarks>
            
            <exception cref="T:System.IO.IOException">Thrown if no video file was open.</exception>
            <exception cref="T:System.ArgumentException">Bitmap size must be of the same as video size, which was specified on opening video file.</exception>
            <exception cref="T:UMapx.Video.VideoException">A error occurred while writing new video frame. See exception message.</exception>
            
        </member>
        <member name="T:UMapx.Video.VFW.Win32">
            <summary>
            Windows API functions and structures.
            </summary>
            
            <remarks>The class provides Video for Windows and some other Win32 functions and structurs.</remarks>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.memcpy(System.Int32,System.Int32,System.Int32)">
            <summary>
            Copy a block of memory.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="src">Source pointer.</param>
            <param name="count">Memory block's length to copy.</param>
            
            <returns>Return's the value of <b>dst</b> - pointer to destination.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIFileInit">
            <summary>
            Initialize the AVIFile library.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIFileExit">
            <summary>
            Exit the AVIFile library.
            </summary>
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIFileOpen(System.IntPtr@,System.String,UMapx.Video.VFW.Win32.OpenFileMode,System.IntPtr)">
            <summary>
            Open an AVI file.
            </summary>
            
            <param name="aviHandler">Opened AVI file interface.</param>
            <param name="fileName">AVI file name.</param>
            <param name="mode">Opening mode (see <see cref="T:UMapx.Video.VFW.Win32.OpenFileMode"/>).</param>
            <param name="handler">Handler to use (<b>null</b> to use default).</param>
            
            <returns>Returns zero on success or error code otherwise.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIFileRelease(System.IntPtr)">
            <summary>
            Release an open AVI stream.
            </summary>
            
            <param name="aviHandler">Open AVI file interface.</param>
            
            <returns>Returns the reference count of the file.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIFileGetStream(System.IntPtr,System.IntPtr@,System.Int32,System.Int32)">
            <summary>
            Get stream interface that is associated with a specified AVI file
            </summary>
            
            <param name="aviHandler">Handler to an open AVI file.</param>
            <param name="streamHandler">Stream interface.</param>
            <param name="streamType">Stream type to open.</param>
            <param name="streamNumner">Count of the stream type. Identifies which occurrence of the specified stream type to access. </param>
            
            <returns></returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIFileCreateStream(System.IntPtr,System.IntPtr@,UMapx.Video.VFW.Win32.AVISTREAMINFO@)">
            <summary>
            Create a new stream in an existing file and creates an interface to the new stream. 
            </summary>
            
            <param name="aviHandler">Handler to an open AVI file.</param>
            <param name="streamHandler">Stream interface.</param>
            <param name="streamInfo">Pointer to a structure containing information about the new stream.</param>
            
            <returns>Returns zero if successful or an error otherwise.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIStreamRelease(System.IntPtr)">
            <summary>
            Release an open AVI stream.
            </summary>
            
            <param name="streamHandler">Handle to an open stream.</param>
            
            <returns>Returns the current reference count of the stream.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIStreamSetFormat(System.IntPtr,System.Int32,UMapx.Video.VFW.Win32.BITMAPINFOHEADER@,System.Int32)">
            <summary>
            Set the format of a stream at the specified position.
            </summary>
            
            <param name="streamHandler">Handle to an open stream.</param>
            <param name="position">Position in the stream to receive the format.</param>
            <param name="format">Pointer to a structure containing the new format.</param>
            <param name="formatSize">Size, in bytes, of the block of memory referenced by <b>format</b>.</param>
            
            <returns>Returns zero if successful or an error otherwise.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIStreamStart(System.IntPtr)">
            <summary>
            Get the starting sample number for the stream.
            </summary>
            
            <param name="streamHandler">Handle to an open stream.</param>
            
            <returns>Returns the number if successful or – 1 otherwise.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIStreamLength(System.IntPtr)">
            <summary>
            Get the length of the stream.
            </summary>
            
            <param name="streamHandler">Handle to an open stream.</param>
            
            <returns>Returns the stream's length, in samples, if successful or -1 otherwise. </returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIStreamInfo(System.IntPtr,UMapx.Video.VFW.Win32.AVISTREAMINFO@,System.Int32)">
            <summary>
            Obtain stream header information.
            </summary>
            
            <param name="streamHandler">Handle to an open stream.</param>
            <param name="streamInfo">Pointer to a structure to contain the stream information.</param>
            <param name="infoSize">Size, in bytes, of the structure used for <b>streamInfo</b>.</param>
            
            <returns>Returns zero if successful or an error otherwise.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIStreamGetFrameOpen(System.IntPtr,UMapx.Video.VFW.Win32.BITMAPINFOHEADER@)">
            <summary>
            Prepare to decompress video frames from the specified video stream
            </summary>
            
            <param name="streamHandler">Pointer to the video stream used as the video source.</param>
            <param name="wantedFormat">Pointer to a structure that defines the desired video format. Specify NULL to use a default format.</param>
            
            <returns>Returns an object that can be used with the <see cref="M:UMapx.Video.VFW.Win32.AVIStreamGetFrame(System.IntPtr,System.Int32)"/> function.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIStreamGetFrameOpen(System.IntPtr,System.Int32)">
            <summary>
            Prepare to decompress video frames from the specified video stream.
            </summary>
            
            <param name="streamHandler">Pointer to the video stream used as the video source.</param>
            <param name="wantedFormat">Pointer to a structure that defines the desired video format. Specify NULL to use a default format.</param>
            
            <returns>Returns a <b>GetFrame</b> object that can be used with the <see cref="M:UMapx.Video.VFW.Win32.AVIStreamGetFrame(System.IntPtr,System.Int32)"/> function.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIStreamGetFrameClose(System.IntPtr)">
            <summary>
            Releases resources used to decompress video frames.
            </summary>
            
            <param name="getFrameObject">Handle returned from the <see cref="M:UMapx.Video.VFW.Win32.AVIStreamGetFrameOpen(System.IntPtr,System.Int32)"/> function.</param>
            
            <returns>Returns zero if successful or an error otherwise.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIStreamGetFrame(System.IntPtr,System.Int32)">
            <summary>
            Return the address of a decompressed video frame. 
            </summary>
            
            <param name="getFrameObject">Pointer to a GetFrame object.</param>
            <param name="position">Position, in samples, within the stream of the desired frame.</param>
            
            <returns>Returns a pointer to the frame data if successful or NULL otherwise.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIStreamWrite(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Write data to a stream.
            </summary>
            
            <param name="streamHandler">Handle to an open stream.</param>
            <param name="start">First sample to write.</param>
            <param name="samples">Number of samples to write.</param>
            <param name="buffer">Pointer to a buffer containing the data to write. </param>
            <param name="bufferSize">Size of the buffer referenced by <b>buffer</b>.</param>
            <param name="flags">Flag associated with this data.</param>
            <param name="samplesWritten">Pointer to a buffer that receives the number of samples written. This can be set to NULL.</param>
            <param name="bytesWritten">Pointer to a buffer that receives the number of bytes written. This can be set to NULL.</param>
            
            <returns>Returns zero if successful or an error otherwise.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVISaveOptions(System.IntPtr,System.Int32,System.Int32,System.IntPtr[],System.IntPtr[])">
            <summary>
            Retrieve the save options for a file and returns them in a buffer.
            </summary>
            
            <param name="window">Handle to the parent window for the Compression Options dialog box.</param>
            <param name="flags">Flags for displaying the Compression Options dialog box.</param>
            <param name="streams">Number of streams that have their options set by the dialog box.</param>
            <param name="streamInterfaces">Pointer to an array of stream interface pointers.</param>
            <param name="options">Pointer to an array of pointers to AVICOMPRESSOPTIONS structures.</param>
            
            <returns>Returns TRUE if the user pressed OK, FALSE for CANCEL, or an error otherwise.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVISaveOptionsFree(System.Int32,System.IntPtr[])">
            <summary>
            Free the resources allocated by the AVISaveOptions function. 
            </summary>
            
            <param name="streams">Count of the AVICOMPRESSOPTIONS structures referenced in <b>options</b>.</param>
            <param name="options">Pointer to an array of pointers to AVICOMPRESSOPTIONS structures.</param>
            
            <returns>Returns 0.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVIMakeCompressedStream(System.IntPtr@,System.IntPtr,UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS@,System.IntPtr)">
            <summary>
            Create a compressed stream from an uncompressed stream and a
            compression filter, and returns the address of a pointer to
            the compressed stream.
            </summary>
            
            <param name="compressedStream">Pointer to a buffer that receives the compressed stream pointer.</param>
            <param name="sourceStream">Pointer to the stream to be compressed.</param>
            <param name="options">Pointer to a structure that identifies the type of compression to use and the options to apply.</param>
            <param name="clsidHandler">Pointer to a class identifier used to create the stream.</param>
            
            <returns>Returns 0 if successful or an error otherwise.</returns>
            
        </member>
        <member name="T:UMapx.Video.VFW.Win32.RECT">
            <summary>
            Structure to define the coordinates of the upper-left and
            lower-right corners of a rectangle. 
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.RECT.left">
            <summary>
            x-coordinate of the upper-left corner of the rectangle.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.RECT.top">
            <summary>
            y-coordinate of the upper-left corner of the rectangle.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.RECT.right">
            <summary>
            x-coordinate of the bottom-right corner of the rectangle.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.RECT.bottom">
            <summary>
            y-coordinate of the bottom-right corner of the rectangle.
            </summary>
            
        </member>
        <member name="T:UMapx.Video.VFW.Win32.AVISTREAMINFO">
            <summary>
            Structure, which contains information for a single stream .
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.type">
            <summary>
            Four-character code indicating the stream type.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.handler">
            <summary>
            Four-character code of the compressor handler that will compress this video stream when it is saved.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.flags">
            <summary>
            Applicable flags for the stream.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.Capabilities">
            <summary>
            Capability flags; currently unused.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.priority">
            <summary>
            Priority of the stream.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.language">
            <summary>
            Language of the stream.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.scale">
            <summary>
            Time scale applicable for the stream.
            </summary>
            
            <remarks>Dividing <b>rate</b> by <b>scale</b> gives the playback rate in number of samples per second.</remarks>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.rate">
            <summary>
            Rate in an integer format.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.start">
            <summary>
            Sample number of the first frame of the AVI file.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.length">
            <summary>
            Length of this stream.
            </summary>
            
            <remarks>The units are defined by <b>rate</b> and <b>scale</b>.</remarks>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.initialFrames">
            <summary>
            Audio skew. This member specifies how much to skew the audio data ahead of the video frames in interleaved files.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.suggestedBufferSize">
            <summary>
            Recommended buffer size, in bytes, for the stream.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.quality">
            <summary>
            Quality indicator of the video data in the stream.
            </summary>
            
            <remarks>Quality is represented as a number between 0 and 10,000.</remarks>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.sampleSize">
            <summary>
            Size, in bytes, of a single data sample.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.rectFrame">
            <summary>
            Dimensions of the video destination rectangle.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.editCount">
            <summary>
            Number of times the stream has been edited.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.formatChangeCount">
            <summary>
            Number of times the stream format has changed.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVISTREAMINFO.name">
            <summary>
            Description of the stream.
            </summary>
            
        </member>
        <member name="T:UMapx.Video.VFW.Win32.BITMAPINFOHEADER">
            <summary>
            Structure, which contains information about the dimensions and color format of a DIB.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.BITMAPINFOHEADER.size">
            <summary>
            Specifies the number of bytes required by the structure.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.BITMAPINFOHEADER.width">
            <summary>
            Specifies the width of the bitmap, in pixels.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.BITMAPINFOHEADER.height">
            <summary>
            Specifies the height of the bitmap, in pixels.
            </summary>
            
            <remarks>If <b>heigh</b>t is positive, the bitmap is a bottom-up DIB and its origin is
            the lower-left corner. If <b>height</b> is negative, the bitmap is a top-down DIB and its
            origin is the upper-left corner.</remarks>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.BITMAPINFOHEADER.planes">
            <summary>
            Specifies the number of planes for the target device. This value must be set to 1.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.BITMAPINFOHEADER.bitCount">
            <summary>
            Specifies the number of bits-per-pixel.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.BITMAPINFOHEADER.compression">
            <summary>
            Specifies the type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed).
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.BITMAPINFOHEADER.sizeImage">
            <summary>
            Specifies the size, in bytes, of the image.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.BITMAPINFOHEADER.xPelsPerMeter">
            <summary>
            Specifies the horizontal resolution, in pixels-per-meter, of the target device for the bitmap.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.BITMAPINFOHEADER.yPelsPerMeter">
            <summary>
            Specifies the vertical resolution, in pixels-per-meter, of the target device for the bitmap.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.BITMAPINFOHEADER.colorsUsed">
            <summary>
            Specifies the number of color indexes in the color table that are actually used by the bitmap.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.BITMAPINFOHEADER.colorsImportant">
            <summary>
            Specifies the number of color indexes that are required for displaying the bitmap.
            </summary>
            
        </member>
        <member name="T:UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS">
            <summary>
            Structure, which contains information about a stream and how it is compressed and saved. 
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS.type">
            <summary>
            Four-character code indicating the stream type.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS.handler">
            <summary>
            Four-character code for the compressor handler that will compress this video stream when it is saved.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS.keyFrameEvery">
            <summary>
            Maximum period between video key frames.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS.quality">
            <summary>
            Quality value passed to a video compressor.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS.bytesPerSecond">
            <summary>
            Video compressor data rate.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS.flags">
            <summary>
            Flags used for compression.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS.format">
            <summary>
            Pointer to a structure defining the data format.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS.formatSize">
            <summary>
            Size, in bytes, of the data referenced by <b>format</b>.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS.parameters">
            <summary>
            Video-compressor-specific data; used internally.
            </summary>
            
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS.parametersSize">
            <summary>
            Size, in bytes, of the data referenced by <b>parameters</b>.
            </summary>
        </member>
        <member name="F:UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS.interleaveEvery">
            <summary>
            Interleave factor for interspersing stream data with data from the first stream. 
            </summary>
            
        </member>
        <member name="T:UMapx.Video.VFW.Win32.OpenFileMode">
            <summary>
            File access modes. 
            </summary>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.mmioFOURCC(System.String)">
            <summary>
            .NET replacement of mmioFOURCC macros. Converts four characters to code.
            </summary>
            
            <param name="str">Four characters string.</param>
            
            <returns>Returns the code created from provided characters.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.decode_mmioFOURCC(System.Int32)">
            <summary>
            Inverse to <see cref="M:UMapx.Video.VFW.Win32.mmioFOURCC(System.String)"/>. Converts code to fout characters string.
            </summary>
            
            <param name="code">Code to convert.</param>
            
            <returns>Returns four characters string.</returns>
            
        </member>
        <member name="M:UMapx.Video.VFW.Win32.AVISaveOptions(System.IntPtr,UMapx.Video.VFW.Win32.AVICOMPRESSOPTIONS@)">
            <summary>
            Version of <see cref="M:UMapx.Video.VFW.Win32.AVISaveOptions(System.IntPtr,System.Int32,System.Int32,System.IntPtr[],System.IntPtr[])"/> for one stream only.
            </summary>
            
            <param name="stream">Stream to configure.</param>
            <param name="options">Stream options.</param>
            
            <returns>Returns TRUE if the user pressed OK, FALSE for CANCEL, or an error otherwise.</returns>
            
        </member>
        <member name="T:UMapx.Video.NewFrameEventHandler">
            <summary>
            Delegate for new frame event handler.
            </summary>
            
            <param name="sender">Sender object.</param>
            <param name="eventArgs">Event arguments.</param>
            
        </member>
        <member name="T:UMapx.Video.VideoSourceErrorEventHandler">
            <summary>
            Delegate for video source error event handler.
            </summary>
            
            <param name="sender">Sender object.</param>
            <param name="eventArgs">Event arguments.</param>
            
        </member>
        <member name="T:UMapx.Video.PlayingFinishedEventHandler">
            <summary>
            Delegate for playing finished event handler.
            </summary>
            
            <param name="sender">Sender object.</param>
            <param name="reason">Reason of finishing video playing.</param>
            
        </member>
        <member name="T:UMapx.Video.ReasonToFinishPlaying">
            <summary>
            Reason of finishing video playing.
            </summary>
            
            <remarks><para>When video source class fire the <see cref="E:UMapx.Video.IVideoSource.PlayingFinished"/> event, they
            need to specify reason of finishing video playing. For example, it may be end of stream reached.</para></remarks>
            
        </member>
        <member name="F:UMapx.Video.ReasonToFinishPlaying.EndOfStreamReached">
            <summary>
            Video playing has finished because it end was reached.
            </summary>
        </member>
        <member name="F:UMapx.Video.ReasonToFinishPlaying.StoppedByUser">
            <summary>
            Video playing has finished because it was stopped by user.
            </summary>
        </member>
        <member name="F:UMapx.Video.ReasonToFinishPlaying.DeviceLost">
            <summary>
            Video playing has finished because the device was lost (unplugged).
            </summary>
        </member>
        <member name="F:UMapx.Video.ReasonToFinishPlaying.VideoSourceError">
            <summary>
            Video playing has finished because of some error happened the video source (camera, stream, file, etc.).
            A error reporting event usually is fired to provide error information.
            </summary>
        </member>
        <member name="T:UMapx.Video.NewFrameEventArgs">
            <summary>
            Arguments for new frame event from video source.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.NewFrameEventArgs.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.NewFrameEventArgs"/> class.
            </summary>
            
            <param name="frame">New frame.</param>
            
        </member>
        <member name="P:UMapx.Video.NewFrameEventArgs.Frame">
            <summary>
            New frame from video source.
            </summary>
            
        </member>
        <member name="T:UMapx.Video.VideoSourceErrorEventArgs">
            <summary>
            Arguments for video source error event from video source.
            </summary>
            
        </member>
        <member name="M:UMapx.Video.VideoSourceErrorEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.VideoSourceErrorEventArgs"/> class.
            </summary>
            <param name="description">Error description.</param>
        </member>
        <member name="M:UMapx.Video.VideoSourceErrorEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:UMapx.Video.VideoSourceErrorEventArgs"/> class.
            </summary>
            
            <param name="description">Error description.</param>
            <param name="exception">Error exception.</param>
            
        </member>
        <member name="P:UMapx.Video.VideoSourceErrorEventArgs.Description">
            <summary>
            Video source error description.
            </summary>
            
        </member>
        <member name="P:UMapx.Video.VideoSourceErrorEventArgs.Exception">
            <summary>
            Video source exception causing the error
            </summary>
        </member>
        <member name="T:UMapx.SystemTools">
            <summary>
            Set of systems tools.
            </summary>
            
            <remarks><para>The class is a container of different system tools, which are used
            across the framework. Some of these tools are platform specific, so their
            implementation is different on different platform, like .NET and Mono.</para>
            </remarks>
            
        </member>
        <member name="M:UMapx.SystemTools.IsRunningOnMono">
            <summary>
            Determines whether the code is running under Mono. 
            </summary>
            
        </member>
        <member name="M:UMapx.SystemTools.CopyUnmanagedMemory(System.IntPtr,System.IntPtr,System.Int32)">
             <summary>
             Copy block of unmanaged memory.
             </summary>
             
             <param name="dst">Destination pointer.</param>
             <param name="src">Source pointer.</param>
             <param name="count">Memory block's length to copy.</param>
             
             <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
             
             <remarks><para>This function is required because of the fact that .NET does
             not provide any way to copy unmanaged blocks, but provides only methods to
             copy from unmanaged memory to managed memory and vise versa.</para></remarks>
            
        </member>
        <member name="M:UMapx.SystemTools.CopyUnmanagedMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Copy block of unmanaged memory.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="src">Source pointer.</param>
            <param name="count">Memory block's length to copy.</param>
            
            <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
            
            <remarks><para>This function is required because of the fact that .NET does
            not provide any way to copy unmanaged blocks, but provides only methods to
            copy from unmanaged memory to managed memory and vise versa.</para></remarks>
            
        </member>
        <member name="M:UMapx.SystemTools.SetUnmanagedMemory(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Fill memory region with specified value.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="filler">Filler byte's value.</param>
            <param name="count">Memory block's length to fill.</param>
            
            <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
            
        </member>
        <member name="M:UMapx.SystemTools.SetUnmanagedMemory(System.Byte*,System.Int32,System.Int32)">
            <summary>
            Fill memory region with specified value.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="filler">Filler byte's value.</param>
            <param name="count">Memory block's length to fill.</param>
            
            <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
            
        </member>
        <member name="T:UMapx.Visualization.Figure">
            <summary>
            Defines the figure to plotting in a Cartesian coordinate system.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.Figure.PlotPanes">
            <summary>
            Plot panes.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.Figure.StemPanes">
            <summary>
            Stem panes.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.Figure.ScatterPanes">
            <summary>
            Scatter panes.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.Figure.ImagePane">
            <summary>
            Image pane.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.Figure.#ctor">
            <summary>
            Initializes the figure.
            </summary> 
        </member>
        <member name="M:UMapx.Visualization.Figure.#ctor(UMapx.Visualization.Style)">
            <summary>
            Initializes the figure.
            </summary>
            <param name="style">Figure style</param>
        </member>
        <member name="P:UMapx.Visualization.Figure.Style">
            <summary>
            Gets or sets figure style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.LabelX">
            <summary>
            Gets or sets X label.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.LabelY">
            <summary>
            Gets or sets Y label.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.Title">
            <summary>
            Gets or sets X title.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.RangeX">
            <summary>
            Gets or sets X range [min, max].
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.RangeY">
            <summary>
            Gets or sets Y range [min, max].
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.Marks">
            <summary>
            Gets or sets the scale of a range of digital elevations along the X and Y axes.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.Scaling">
            <summary>
            Gets or sets the scale factor for the canvas [0.5, 0.8]. 
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.Shapes">
            <summary>
            Gets or sets shapes.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.Grid">
            <summary>
            Gets or sets grid.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Figure.AutoRange">
            <summary>
            Gets or sets property of auto range axes.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.Figure.Draw(System.Drawing.Graphics)">
            <summary>
            Draws figure to graphics object.
            </summary>
            <param name="graphics">Graphics</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Image(System.Drawing.Bitmap)">
            <summary>
            Show image at the figure.
            </summary>
            <param name="bitmap">Bitmap</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Plot(System.Double[],System.Double[],System.Single,System.Drawing.Color,UMapx.Visualization.Symbol)">
            <summary>
            Adds graph pane to continuous plot.
            </summary>
            <param name="x">Argument</param>
            <param name="y">Function</param>
            <param name="depth">Depth</param>
            <param name="color">Color</param>
            <param name="type">Symbol type</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Plot(UMapx.Visualization.GraphPane)">
            <summary>
            Adds graph pane to continuous plot.
            </summary>
            <param name="pane">Graph pane</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Stem(System.Double[],System.Double[],System.Single,System.Drawing.Color,UMapx.Visualization.Symbol)">
            <summary>
            Adds graph pane to stem plot.
            </summary>
            <param name="x">Argument</param>
            <param name="y">Function</param>
            <param name="depth">Depth</param>
            <param name="color">Color</param>
            <param name="type">Symbol type</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Stem(UMapx.Visualization.GraphPane)">
            <summary>
            Adds graph pane to stem plot.
            </summary>
            <param name="pane">Graph pane</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Scatter(System.Double[],System.Double[],System.Single,System.Drawing.Color,UMapx.Visualization.Symbol)">
            <summary>
            Add graph pane to scatter plot.
            </summary>
            <param name="x">Argument</param>
            <param name="y">Function</param>
            <param name="depth">Depth</param>
            <param name="color">Color</param>
            <param name="type">Symbol type</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Scatter(UMapx.Visualization.GraphPane)">
            <summary>
            Adds graph pane to scatter plot.
            </summary>
            <param name="pane">Graph pane</param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Clear">
            <summary>
            Removes all graphs from the figure. 
            </summary>
        </member>
        <member name="M:UMapx.Visualization.Figure.PlotLine(System.Drawing.Graphics,System.Double[],System.Double[],System.Single,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="graphics"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="depth"></param>
            <param name="color"></param>
        </member>
        <member name="M:UMapx.Visualization.Figure.PlotCircle(System.Drawing.Graphics,System.Double[],System.Double[],System.Single,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="graphics"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="depth"></param>
            <param name="color"></param>
            <param name="radius"></param>
            <param name="fill"></param>
        </member>
        <member name="M:UMapx.Visualization.Figure.PlotRectangle(System.Drawing.Graphics,System.Double[],System.Double[],System.Single,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="graphics"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="depth"></param>
            <param name="color"></param>
            <param name="radius"></param>
            <param name="fill"></param>
        </member>
        <member name="M:UMapx.Visualization.Figure.StemLine(System.Drawing.Graphics,System.Double[],System.Double[],System.Single,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="graphics"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="depth"></param>
            <param name="color"></param>
        </member>
        <member name="M:UMapx.Visualization.Figure.StemCircle(System.Drawing.Graphics,System.Double[],System.Double[],System.Single,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="graphics"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="depth"></param>
            <param name="color"></param>
            <param name="radius"></param>
            <param name="fill"></param>
        </member>
        <member name="M:UMapx.Visualization.Figure.StemRectangle(System.Drawing.Graphics,System.Double[],System.Double[],System.Single,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="graphics"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="depth"></param>
            <param name="color"></param>
            <param name="radius"></param>
            <param name="fill"></param>
        </member>
        <member name="M:UMapx.Visualization.Figure.ScatterLine(System.Drawing.Graphics,System.Double[],System.Double[],System.Single,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="graphics"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="depth"></param>
            <param name="color"></param>
        </member>
        <member name="M:UMapx.Visualization.Figure.ScatterCircle(System.Drawing.Graphics,System.Double[],System.Double[],System.Single,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="graphics"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="depth"></param>
            <param name="color"></param>
            <param name="radius"></param>
            <param name="fill"></param>
        </member>
        <member name="M:UMapx.Visualization.Figure.ScatterRectangle(System.Drawing.Graphics,System.Double[],System.Double[],System.Single,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="graphics"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="depth"></param>
            <param name="color"></param>
            <param name="radius"></param>
            <param name="fill"></param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Paint_Title(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="graphics"></param>
            <param name="title"></param>
            <param name="sizeX"></param>
            <param name="sizeY"></param>
            <param name="dw"></param>
            <param name="dh"></param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Paint_LabelX(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="graphics"></param>
            <param name="xlabel"></param>
            <param name="sizeX"></param>
            <param name="sizeY"></param>
            <param name="dw"></param>
            <param name="dh"></param>
        </member>
        <member name="M:UMapx.Visualization.Figure.Paint_LabelY(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="graphics"></param>
            <param name="ylabel"></param>
            <param name="sizeX"></param>
            <param name="sizeY"></param>
            <param name="dw"></param>
            <param name="dh"></param>
        </member>
        <member name="M:UMapx.Visualization.Figure.GetNumString(System.Double)">
            <summary>
            
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Visualization.GraphPane">
            <summary>
            Defines the graph pane.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.GraphPane.#ctor">
            <summary>
            Initializes the graph pane.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.GraphPane.X">
            <summary>
            Gets or sets argument array.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.GraphPane.Y">
            <summary>
            Gets or sets function array.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.GraphPane.Depth">
            <summary>
            Gets or sets depth.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.GraphPane.Color">
            <summary>
            Gets or sets color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.GraphPane.Type">
            <summary>
            Gets or sets type.
            </summary>
        </member>
        <member name="T:UMapx.Visualization.Points">
            <summary>
            Uses for points operations.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.Points.Point2X(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="amin"></param>
            <param name="amax"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Visualization.Points.Point2Y(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="amin"></param>
            <param name="amax"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Visualization.Points.X2Point(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="amin"></param>
            <param name="amax"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Visualization.Points.Y2Point(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="amin"></param>
            <param name="amax"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Visualization.Points.IsSingularPoint(System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Visualization.Points.ClipPoint(System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="amin"></param>
            <param name="amax"></param>
            <returns></returns>
        </member>
        <member name="M:UMapx.Visualization.Points.GetPoints(System.Double,System.Double,System.Int32)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="T:UMapx.Visualization.Style">
            <summary>
            Defines the figure style.
            </summary>
        </member>
        <member name="M:UMapx.Visualization.Style.#ctor">
            <summary>
            Initializes the figure style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.ColorFrame">
            <summary>
            Gets or sets frame color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.ColorBack">
            <summary>
            Gets or sets background color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.ColorGrid">
            <summary>
            Gets or sets grid color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.ColorShapes">
            <summary>
            Gets or sets shapes color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.ColorText">
            <summary>
            Gets or sets text color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.ColorMarks">
            <summary>
            Gets or sets marks color.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.FontMarks">
            <summary>
            Gets or sets marks font.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.FontText">
            <summary>
            Gets or sets text font.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.DepthShapes">
            <summary>
            Gets or sets shapes depth.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.GridX">
            <summary>
            Gets or sets X grid.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.GridY">
            <summary>
            Gets or sets Y grid.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.MATLAB">
            <summary>
            Returns MATLAB style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.MathCad">
            <summary>
            Returns MathCad style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.MicroCap">
            <summary>
            Returns MicroCap style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.Excel">
            <summary>
            Returns Excel style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.Standart">
            <summary>
            Returns standart style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.Beige">
            <summary>
            Returns beige style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.Cyan">
            <summary>
            Returns cyan style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.Rose">
            <summary>
            Returns rose style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.Coral">
            <summary>
            Returns coral style.
            </summary>
        </member>
        <member name="P:UMapx.Visualization.Style.Black">
            <summary>
            Returns black style.
            </summary>
        </member>
        <member name="T:UMapx.Visualization.Symbol">
            <summary>
            Defines the symbol type.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.Symbol.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.Symbol.Circle">
            <summary>
            Circle.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.Symbol.Ball">
            <summary>
            Ball.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.Symbol.Rectangle">
            <summary>
            Rectangle.
            </summary>
        </member>
        <member name="F:UMapx.Visualization.Symbol.Polygon">
            <summary>
            Polygon.
            </summary>
        </member>
        <member name="T:UMapx.Wavelet.ComplexGaussianWavelet">
            <summary>
            Defines the continuous complex Gaussian wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ComplexGaussianWavelet.#ctor(System.Int32)">
            <summary>
            Initializes the continuous complex Gaussian wavelet.
            </summary>
            <param name="derivative">Derivative order [1, 8]</param>
        </member>
        <member name="P:UMapx.Wavelet.ComplexGaussianWavelet.Derivative">
            <summary>
            Gets or sets the derivative order [1, 8].
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ComplexGaussianWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.ComplexGaussianWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.ComplexMorletWavelet">
            <summary>
            Defines the continuous complex Morlet wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ComplexMorletWavelet.#ctor(System.Double,System.Double)">
            <summary>
            Initializes the continuous complex Morlet wavelet.
            </summary>
            <param name="fb">Bandwidth</param>
            <param name="fc">Center frequency</param>
        </member>
        <member name="P:UMapx.Wavelet.ComplexMorletWavelet.Fb">
            <summary>
            Gets or sets the bandwidth.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.ComplexMorletWavelet.Fc">
            <summary>
            Gets or sets the center frequency.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ComplexMorletWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.ComplexMorletWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.FbspWavelet">
            <summary>
            Defines the continuous complex frequency B-spline wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.FbspWavelet.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the continuous complex frequency B-spline wavelet.
            </summary>
            <param name="m">Order</param>
            <param name="fb">Bandwidth</param>
            <param name="fc">Center frequency</param>
        </member>
        <member name="P:UMapx.Wavelet.FbspWavelet.M">
            <summary>
            Gets or sets the value of the wavelet order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.FbspWavelet.Fb">
            <summary>
            Gets or sets the value of the bandwidth parameter.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.FbspWavelet.Fc">
            <summary>
            Gets or sets the center frequency value of the wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.FbspWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.FbspWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.GaborWavelet">
            <summary>
            Defines the continuous complex Gabor wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.GaborWavelet.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes the continuous complex Gabor wavelet.
            </summary>
            <param name="x0">Initial value</param>
            <param name="k0">Modulation factor</param>
            <param name="a">Factor</param>
        </member>
        <member name="P:UMapx.Wavelet.GaborWavelet.X0">
            <summary>
            Gets or sets the initial value.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.GaborWavelet.K0">
            <summary>
            Gets or sets the modulation factor.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.GaborWavelet.A">
            <summary>
            Gets or sets the factor.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.GaborWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.GaborWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.GaborWavelet.WaveletReal(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.GaussianWavelet">
            <summary>
            Defines the continuous Gaussian wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.GaussianWavelet.#ctor(System.Int32)">
            <summary>
            Initializes the continuous Gaussian wavelet.
            </summary>
            <param name="derivative">Derivative order [1, 8]</param>
        </member>
        <member name="P:UMapx.Wavelet.GaussianWavelet.Derivative">
            <summary>
            Gets or sets the derivative order [1, 8].
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.GaussianWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.GaussianWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.HaarWavelet">
            <summary>
            Defines the continuous Haar wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HaarWavelet.#ctor">
            <summary>
            Initializes the continuous Haar wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HaarWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.HaarWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.HermitianHatWavelet">
            <summary>
            Defines the continuous Hermitian hat wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HermitianHatWavelet.#ctor">
            <summary>
            Initializes the continuous Hermitian Hat wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HermitianHatWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.HermitianHatWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.HermitianWavelet">
            <summary>
            Defines the continuous Hermitian wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HermitianWavelet.#ctor(System.Int32)">
            <summary>
            Initializes the continuous Hermitian wavelet.
            </summary>
            <param name="derivative">Derivative order [1, 3]</param>
        </member>
        <member name="P:UMapx.Wavelet.HermitianWavelet.Derivative">
            <summary>
            Gets or sets the derivative order [1, 3].
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.HermitianWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.HermitianWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.IComplexWavelet">
            <summary>
            Defines the interface for continuous complex wavelets.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.IComplexWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.IComplexWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.IDoubleWavelet">
            <summary>
            Defines the interface for continuous wavelets.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.IDoubleWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.IDoubleWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.IWaveletTransform">
            <summary>
            Defines the wavelet transform interface.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.IWaveletTransform.Wavelet">
            <summary>
            Gets or sets the discrete wavelet.
            </summary>
        </member>
        <member name="T:UMapx.Wavelet.MexicanHatWavelet">
            <summary>
            Defines the continuous Mexican hat wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MexicanHatWavelet.#ctor">
            <summary>
            Initializes the continuous Mexican hat wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MexicanHatWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.MexicanHatWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.MeyerWavelet">
            <summary>
            Defines the continuous Meyer wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MeyerWavelet.#ctor">
            <summary>
            Initializes the continuous Meyer wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MeyerWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.MeyerWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.MorletWavelet">
            <summary>
            Defines the continuous Morlet wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MorletWavelet.#ctor">
            <summary>
            Initializes the continuous Morlet wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.MorletWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.MorletWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.PoissonWavelet">
            <summary>
            Defines the continuous Poisson wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.PoissonWavelet.#ctor(System.Int32)">
            <summary>
            Initializes the continuous Poisson wavelet.
            </summary>
            <param name="n">Order [1, +inf)</param>
        </member>
        <member name="P:UMapx.Wavelet.PoissonWavelet.N">
            <summary>
            Gets or sets the order [1, +inf).
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.PoissonWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.PoissonWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.ShannonWavelet">
            <summary>
            Defines the continuous Shannon wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ShannonWavelet.#ctor">
            <summary>
            Initializes the continuous Shannon wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.ShannonWavelet.Scaling(System.Double)">
            <summary>
            Returns the value of the scaling function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="M:UMapx.Wavelet.ShannonWavelet.Wavelet(System.Double)">
            <summary>
            Returns the value of the wavelet function.
            </summary>
            <param name="x">Argument</param>
            <returns>Function</returns>
        </member>
        <member name="T:UMapx.Wavelet.WaveletDecomposition">
            <summary>
            Defines a discrete wavelet decomposition.
            <remarks>
            For the correct wavelet transform of a signal, it is necessary that its dimension be a power of 2.
            
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_wavelet_transform
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.#ctor(UMapx.Wavelet.WaveletTransform)">
            <summary>
            Initializes a discrete wavelet decomposition.
            </summary>
            <param name="waveletTransform">Discrete wavelet transform</param>
        </member>
        <member name="P:UMapx.Wavelet.WaveletDecomposition.WaveletTransform">
            <summary>
            Gets or sets the discrete wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Forward(System.Double[])">
            <summary>
            Forward wavelet decomposition.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Backward(System.Double[][])">
            <summary>
            Backward wavelet decomposition.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Forward(System.Double[0:,0:])">
            <summary>
            Forward wavelet decomposition.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Backward(System.Double[0:,0:][])">
            <summary>
            Backward wavelet decomposition.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward wavelet decomposition.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Backward(UMapx.Core.Complex[][])">
            <summary>
            Backward wavelet decomposition.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward wavelet decomposition.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletDecomposition.Backward(UMapx.Core.Complex[0:,0:][])">
            <summary>
            Backward wavelet decomposition.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Wavelet.WaveletFilter">
            <summary>
            Defines the wavelet filter.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.#ctor(UMapx.Wavelet.WaveletTransform,System.Double,System.Double)">
            <summary>
            Initializes the wavelet filter.
            </summary>
            <param name="dwt">Discrete wavelet transform</param>
            <param name="factor">Factor [-1, 1]</param>
            <param name="accuracy">Accuracy [0, 1]</param>
        </member>
        <member name="P:UMapx.Wavelet.WaveletFilter.DWT">
            <summary>
            Gets or sets the discrete wavelet transform.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletFilter.Accuracy">
            <summary>
            Gets or sets the accuracy of the filter [0, 1].
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletFilter.Factor">
            <summary>
            Gets or sets the factor value [-1, 1].
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.Apply(System.Double[0:,0:])">
            <summary>
            Implements a wavelet filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.Apply(System.Double[])">
            <summary>
            Implements a wavelet filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.Apply(UMapx.Core.Complex[0:,0:])">
            <summary>
            Implements a wavelet filter.
            </summary>
            <param name="data">Matrix</param>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.Apply(UMapx.Core.Complex[])">
            <summary>
            Implements a wavelet filter.
            </summary>
            <param name="data">Array</param>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.GetLength(System.Int32,System.Int32)">
            <summary>
            Returns the length value for transform.
            </summary>
            <param name="n">Length</param>
            <param name="levels">Number of levels</param>
            <returns>Length</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletFilter.GetMaxLevels(System.Int32,System.Int32)">
            <summary>
            Returns max levels of 2^K transform.
            </summary>
            <param name="n">Length</param>
            <param name="levels">Levels</param>
            <returns>New length</returns>
        </member>
        <member name="T:UMapx.Wavelet.WaveletPack">
            <summary>
            Defines the discrete wavelet.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Wavelet
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.#ctor(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Initializes the discrete wavelet.
            </summary>
            <param name="lp">Scaling function of forward transform</param>
            <param name="hp">Wavelet function of forward transform</param>
            <param name="ilp">Scaling function of backward transform</param>
            <param name="ihp">Wavelet function of backward transform</param>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.LowPass">
            <summary>
            Gets or sets the scaling function of forward transform.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.HighPass">
            <summary>
            Gets or sets the wavelet function of forward transform.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.iLowPass">
            <summary>
            Gets or sets the scaling function of backward transform.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.iHighPass">
            <summary>
            Gets or sets the wavelet function of backward transform.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.InvertOdds(System.Double[])">
            <summary>
            Inverts the odd elements of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.InvertEvens(System.Double[])">
            <summary>
            Inverts even elements of a vector.
            </summary>
            <param name="v">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.GetWavelet(System.Double[])">
            <summary>
            Returns the Daubechies wavelet function.
            </summary>
            <param name="scaling">Scaling function</param>
            <returns>Wavelet function</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.Create(System.Double[])">
            <summary>
            Creates the discrete wavelet.
            </summary>
            <param name="scaling">Scaling function</param>
            <returns>Discrete wavelet</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.Create(System.Double[],System.Double[])">
            <summary>
            Creates the discrete wavelet.
            </summary>
            <param name="scaling">Scaling function</param>
            <param name="wavelet">Wavelet function</param>
            <returns>Discrete wavelet</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.System#ICloneable#Clone">
            <summary>
            Creates a copy of the discrete wavelet.
            </summary>
            <returns>Discrete wavelet</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.Clone">
            <summary>
            Creates a copy of the discrete wavelet.
            </summary>
            <returns>Discrete wavelet</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletPack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets information about the object.
            </summary>
            <param name="info">Data needed for serialization and deserialization</param>
            <param name="context">Source and destination of a given stream</param>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior11">
            <summary>
            Returns a biorthogonal wavelet 1.1.
            <remarks>
            Haar wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior13">
            <summary>
            Returns a biorthogonal wavelet 1.3.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior15">
            <summary>
            Returns a biorthogonal wavelet 1.5.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior22">
            <summary>
            Returns a biorthogonal wavelet 2.2.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior24">
            <summary>
            Returns a biorthogonal wavelet 2.4.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior26">
            <summary>
            Returns a biorthogonal wavelet 2.6.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior28">
            <summary>
            Returns a biorthogonal wavelet 2.8.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior31">
            <summary>
            Returns a biorthogonal wavelet 3.1.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior33">
            <summary>
            Returns a biorthogonal wavelet 3.3.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior35">
            <summary>
            Returns a biorthogonal wavelet 3.5.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Bior37">
            <summary>
            Returns a biorthogonal wavelet 3.7.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D1">
            <summary>
            Returns Daubechies wavelet of 1 order.
            <remarks>
            Haar wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D2">
            <summary>
            Returns Daubechies wavelet of 2 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D3">
            <summary>
            Returns Daubechies wavelet of 3 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D4">
            <summary>
            Returns Daubechies wavelet of 4 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D5">
            <summary>
            Returns Daubechies wavelet of 5 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D6">
            <summary>
            Returns Daubechies wavelet of 6 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D7">
            <summary>
            Returns Daubechies wavelet of 7 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D8">
            <summary>
            Returns Daubechies wavelet of 8 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D9">
            <summary>
            Returns Daubechies wavelet of 9 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D10">
            <summary>
            Returns Daubechies wavelet of 10 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D11">
            <summary>
            Returns Daubechies wavelet of 11 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D12">
            <summary>
            Returns Daubechies wavelet of 12 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D13">
            <summary>
            Returns Daubechies wavelet of 13 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D14">
            <summary>
            Returns Daubechies wavelet of 14 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D15">
            <summary>
            Returns Daubechies wavelet of 15 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D16">
            <summary>
            Returns Daubechies wavelet of 16 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D17">
            <summary>
            Returns Daubechies wavelet of 17 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D18">
            <summary>
            Returns Daubechies wavelet of 18 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D19">
            <summary>
            Returns Daubechies wavelet of 19 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D20">
            <summary>
            Returns Daubechies wavelet of 20 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D21">
            <summary>
            Returns Daubechies wavelet of 21 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D22">
            <summary>
            Returns Daubechies wavelet of 22 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D23">
            <summary>
            Returns Daubechies wavelet of 23 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D24">
            <summary>
            Returns Daubechies wavelet of 24 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D25">
            <summary>
            Returns Daubechies wavelet of 25 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D26">
            <summary>
            Returns Daubechies wavelet of 26 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D27">
            <summary>
            Returns Daubechies wavelet of 27 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D28">
            <summary>
            Returns Daubechies wavelet of 28 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D29">
            <summary>
            Returns Daubechies wavelet of 29 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D30">
            <summary>
            Returns Daubechies wavelet of 30 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D31">
            <summary>
            Returns Daubechies wavelet of 31 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D32">
            <summary>
            Returns Daubechies wavelet of 32 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D33">
            <summary>
            Returns Daubechies wavelet of 33 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D34">
            <summary>
            Returns Daubechies wavelet of 34 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D35">
            <summary>
            Returns Daubechies wavelet of 35 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D36">
            <summary>
            Returns Daubechies wavelet of 36 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D37">
            <summary>
            Returns Daubechies wavelet of 37 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.D38">
            <summary>
            Returns Daubechies wavelet of 38 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C1">
            <summary>
            Returns wavelet coiflet of 1 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C2">
            <summary>
            Returns wavelet coiflet of 2 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C3">
            <summary>
            Returns wavelet coiflet of 3 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C4">
            <summary>
            Returns wavelet coiflet of 4 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.C5">
            <summary>
            Returns wavelet coiflet of 5 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S1">
            <summary>
            Returns wavelet symlet of 1 order.
            <remarks>
            Haar wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S2">
            <summary>
            Returns wavelet symlet of 2 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S3">
            <summary>
            Returns wavelet symlet of 3 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S4">
            <summary>
            Returns wavelet symlet of 4 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S5">
            <summary>
            Returns wavelet symlet of 5 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S6">
            <summary>
            Returns wavelet symlet of 6 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S7">
            <summary>
            Returns wavelet symlet of 7 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S8">
            <summary>
            Returns wavelet symlet of 8 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S9">
            <summary>
            Returns wavelet symlet of 9 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S10">
            <summary>
            Returns wavelet symlet of 10 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S11">
            <summary>
            Returns wavelet symlet of 11 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S12">
            <summary>
            Returns wavelet symlet of 12 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S13">
            <summary>
            Returns wavelet symlet of 13 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S14">
            <summary>
            Returns wavelet symlet of 14 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S15">
            <summary>
            Returns wavelet symlet of 15 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S16">
            <summary>
            Returns wavelet symlet of 16 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S17">
            <summary>
            Returns wavelet symlet of 17 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S18">
            <summary>
            Returns wavelet symlet of 18 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S19">
            <summary>
            Returns wavelet symlet of 19 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.S20">
            <summary>
            Returns wavelet symlet of 20 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Meyer">
            <summary>
            Returns the Meyer wavelet.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.F4">
            <summary>
            Returns the Fejer-Korovkin wavelet of 4 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.F6">
            <summary>
            Returns the Fejer-Korovkin wavelet of 6 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.F8">
            <summary>
            Returns the Fejer-Korovkin wavelet of 8 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.F14">
            <summary>
            Returns the Fejer-Korovkin wavelet of 14 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.F22">
            <summary>
            Returns the Fejer-Korovkin wavelet of 22 order.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L1">
            <summary>
            Returns Legendre wavelet of 1 order.
            <remarks>
            Haar wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L2">
            <summary>
            Returns Legendre wavelet of 2 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L3">
            <summary>
            Returns Legendre wavelet of 3 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L4">
            <summary>
            Returns Legendre wavelet of 4 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L5">
            <summary>
            Returns Legendre wavelet of 5 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L6">
            <summary>
            Returns Legendre wavelet of 6 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L7">
            <summary>
            Returns Legendre wavelet of 7 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L8">
            <summary>
            Returns Legendre wavelet of 8 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.L9">
            <summary>
            Returns Legendre wavelet of 9 order.
            <remarks>
            Nonorthogonal wavelet.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Fbsp100">
            <summary>
            Returns B-spline wavelet 1-0-0.
            <remarks>
            Haar wavelet (delayed).
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Fbsp103">
            <summary>
            Returns B-spline wavelet 1-0-3.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Fbsp105">
            <summary>
            Returns B-spline wavelet 1-0-5.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Haar">
            <summary>
            Returns Haar wavelet.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF11">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 1/1).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF13">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 1/3).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF15">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 1/5).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF31">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 3/1).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF51">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 5/1).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF53">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 5/3).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF55">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 5/5).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF22">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 2/2).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF24">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 2/4).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF26">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 2/6).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF42">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 4/2).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF44">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 4/4).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF46">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 4/6).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF62">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 6/2).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF64">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 6/4).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF66">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 6/6).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.CDF97">
            <summary>
            Returns Cohen-Daubechies-Feaveau wavelet (CDF 9/7).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Kravchenko">
            <summary>
            Returns Kravchenko wavelet.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.BL2">
            <summary>
            Returns Battle-Lemarie wavelet (2).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.BL4">
            <summary>
            Returns Battle-Lemarie wavelet (4).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.BL6">
            <summary>
            Returns Battle-Lemarie wavelet (6).
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Beylkin">
            <summary>
            Returns Beylkin wavelet.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletPack.Vaidyanathan">
            <summary>
            Returns Vaidyanathan wavelet.
            </summary>
        </member>
        <member name="T:UMapx.Wavelet.WaveletTransform">
            <summary>
            Defines a discrete wavelet transform.
            <remarks>
            For the correct wavelet transform of a signal, it is necessary that its dimension be a power of 2.
            
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Discrete_wavelet_transform
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.#ctor(UMapx.Wavelet.WaveletPack,System.Int32,System.Boolean)">
            <summary>
            Initializes a discrete wavelet transform.
            </summary>
            <param name="wavelet">Discrete wavelet</param>
            <param name="levels">Number of levels</param>
            <param name="normalized">Normalized transform or not</param>
        </member>
        <member name="P:UMapx.Wavelet.WaveletTransform.Levels">
            <summary>
            Gets or sets the number of transform levels.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Wavelet.WaveletTransform.Wavelet">
            <summary>
            Gets or sets the discrete wavelet.
            </summary>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Forward(System.Double[])">
            <summary>
            Forward wavelet transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Backward(System.Double[])">
            <summary>
            Backward wavelet transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward wavelet transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward wavelet transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward wavelet transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward wavelet transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward wavelet transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward wavelet transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.dwt(System.Double[],System.Int32)">
            <summary>
            Forward discrete wavelet transform.
            </summary>
            <param name="input">Input signal</param>
            <param name="level">Current level of transform</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.idwt(System.Double[],System.Int32)">
            <summary>
            Backward discrete wavelet transform.
            </summary>
            <param name="input">Input signal</param>
            <param name="level">Current level of transform</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.dwt(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Forward discrete wavelet transform.
            </summary>
            <param name="input">Input signal</param>
            <param name="level">Current level of transform</param>
            <returns>Output data</returns>
        </member>
        <member name="M:UMapx.Wavelet.WaveletTransform.idwt(UMapx.Core.Complex[],System.Int32)">
            <summary>
            Backward discrete wavelet transform.
            </summary>
            <param name="input">Input signal</param>
            <param name="level">Current level of transform</param>
            <returns>Output data</returns>
        </member>
        <member name="T:UMapx.Window.BarlettHann">
            <summary>
            Defines the Barlett-Hann window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.BarlettHann.#ctor(System.Int32)">
            <summary>
            Initializes the Barlett-Hann window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.BarlettHann.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.BarlettHann.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Blackman">
            <summary>
            Defines the Blackman window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Blackman.#ctor(System.Int32)">
            <summary>
            Initializes the Blackman window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Blackman.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Blackman.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.BlackmanHarris">
            <summary>
            Defines the Blackman-Harris window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.BlackmanHarris.#ctor(System.Int32)">
            <summary>
            Initializes the Blackman-Harris window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.BlackmanHarris.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.BlackmanHarris.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.BlackmanNuttall">
            <summary>
            Defines the Blackman-Nuttall window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.BlackmanNuttall.#ctor(System.Int32)">
            <summary>
            Initializes the Blackman-Nuttall window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.BlackmanNuttall.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.BlackmanNuttall.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Confined">
            <summary>
            Defines the closed Gaussian window.
            </summary>
        </member>
        <member name="M:UMapx.Window.Confined.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the closed Gaussian window.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="sigma">Standard deviation (0.14 * N)</param>
        </member>
        <member name="M:UMapx.Window.Confined.#ctor(System.Int32)">
            <summary>
            Initializes a Gaussian window function closed.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="P:UMapx.Window.Confined.Sigma">
            <summary>
            Gets or sets the standard deviation (>0).
            </summary>
        </member>
        <member name="M:UMapx.Window.Confined.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Confined.G(System.Double)">
            <summary>
            Функция G(x).
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Confined.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Cosine">
            <summary>
            Defines the cosine window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Cosine.#ctor(System.Int32)">
            <summary>
            Initializes the cosine window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Cosine.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Cosine.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.Cosine.cosinefunc(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Factor</returns>
        </member>
        <member name="T:UMapx.Window.FastShortTimeFourierTransform">
            <summary>
            Defines fast short-time Fourier transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Short-time_Fourier_transform
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.#ctor(UMapx.Window.IWindow,System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes fast short-time Fourier transform.
            </summary>
            <param name="function">Windows function</param>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Window.FastShortTimeFourierTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Window.FastShortTimeFourierTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="P:UMapx.Window.FastShortTimeFourierTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Forward(System.Double[])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Backward(System.Double[])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastShortTimeFourierTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Window.FastWeylHeisenbergTransform">
            <summary>
            Defines fast Weyl-Heisenberg transform.
            <remarks>
            The class represents a computationally efficient implementation of one-dimensional and two-dimensional discrete orthogonal
            Weyl-Heisenberg transforms.
            More information can be found on the website:
            https://ieeexplore.ieee.org/document/9117707/
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.#ctor(UMapx.Window.IWindow,System.Int32,UMapx.Core.Direction)">
            <summary>
            Initializes fast Weyl-Heisenberg transform.
            </summary>
            <param name="window">Windows function</param>
            <param name="m">Number of frequency shifts [4, N]</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Window.FastWeylHeisenbergTransform.M">
            <summary>
            Gets or sets number of frequency shifts [4, N].
            <remarks>
            Even number.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Window.FastWeylHeisenbergTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="P:UMapx.Window.FastWeylHeisenbergTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Forward(System.Double[])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Backward(System.Double[])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.WHT(UMapx.Core.Complex[],System.Double[],System.Int32)">
            <summary>
            Fast forward Weyl-Heisenberg transform.
            </summary>
            <param name="input">Array</param>
            <param name="g0">Function</param>
            <param name="M">Number of frequency shifts</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.IWHT(UMapx.Core.Complex[],System.Double[],System.Int32)">
            <summary>
            Fast backward Weyl-Heisenberg transform.
            </summary>
            <param name="input">Array</param>
            <param name="g0">Function</param>
            <param name="M">Number of frequency shifts</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.FastWeylHeisenbergTransform.GetRotation(System.Int32)">
            <summary>
            Returns an array of phase rotations.
            </summary>
            <param name="M">Number of frequency shifts</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.FlatTop">
            <summary>
            Defines the "Flat-Top" window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.FlatTop.#ctor(System.Int32)">
            <summary>
            Initializes the "Flat-Top" window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.FlatTop.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.FlatTop.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Gabor">
            <summary>
            Defines the Gabor window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Gabor.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the Gabor window function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="sigma">Scale parameter</param>
        </member>
        <member name="P:UMapx.Window.Gabor.Sigma">
            <summary>
            Gets or sets the standard deviation (>0).
            </summary>
        </member>
        <member name="M:UMapx.Window.Gabor.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Gabor.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Hamming">
            <summary>
            Defines the Hamming window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Hamming.#ctor(System.Int32)">
            <summary>
            Initializes the Hamming window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Hamming.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Hamming.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Hann">
            <summary>
            Defines the Hann window function (Hanning).
            </summary>
        </member>
        <member name="M:UMapx.Window.Hann.#ctor(System.Int32)">
            <summary>
            Initializes the Hann window function (Hanning).
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Hann.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Hann.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.IWindow">
            <summary>
            Defines the interface of window functions.
            </summary>
        </member>
        <member name="P:UMapx.Window.IWindow.FrameSize">
            <summary>
            Gets or sets the window size.
            </summary>
        </member>
        <member name="M:UMapx.Window.IWindow.Function(System.Double)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.IWindow.GetWindow">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.IWindow.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.IWindow.Function(System.Double[],System.Int32)">
            <summary>
            Returns an array of window function values.
            </summary>
            <param name="x">Array</param>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.IWindow.Function(System.Double[])">
            <summary>
            Returns an array of window function values.
            </summary>
            <param name="x">Array</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.IWindowTransform">
            <summary>
            Defines the general window transform interface.
            </summary>
        </member>
        <member name="P:UMapx.Window.IWindowTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
        <member name="T:UMapx.Window.Kaiser">
            <summary>
            Defines the Kaiser window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Kaiser.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the Kaiser window function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="a">Form parameter</param>
        </member>
        <member name="P:UMapx.Window.Kaiser.A">
            <summary>
            Gets or sets the value of the form parameter.
            </summary>
        </member>
        <member name="M:UMapx.Window.Kaiser.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Kaiser.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Lanzcos">
            <summary>
            Defines the Lanczos window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Lanzcos.#ctor(System.Int32)">
            <summary>
            Initializes the Lanczos window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Lanzcos.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Lanzcos.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Normal">
            <summary>
            Defines a generalized window normal function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Normal.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            Initializes a generalized window normal function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="sigma">Standard deviation (>0)</param>
            <param name="pow">Power<remarks>For p = 2 - Gaussian window</remarks></param>
        </member>
        <member name="P:UMapx.Window.Normal.Sigma">
            <summary>
            Gets or sets the standard deviation (>0).
            </summary>
        </member>
        <member name="P:UMapx.Window.Normal.Pow">
            <summary>
            Power.
            </summary>
        </member>
        <member name="M:UMapx.Window.Normal.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Normal.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Nuttall">
            <summary>
            Defines the Nuttall window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Nuttall.#ctor(System.Int32)">
            <summary>
            Initializes the Nuttall window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Nuttall.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Nuttall.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Parzen">
            <summary>
            Defines the Parzen window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Parzen.#ctor(System.Int32)">
            <summary>
            Initializes the Parzen window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Parzen.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Parzen.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Planck">
            <summary>
            Defines the window function of Planck.
            </summary>
        </member>
        <member name="M:UMapx.Window.Planck.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the Planck window function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="a">Form parameter [0, 0.5]</param>
        </member>
        <member name="P:UMapx.Window.Planck.A">
            <summary>
            Gets or sets the value of the form parameter [0, 0.5].
            </summary>
        </member>
        <member name="M:UMapx.Window.Planck.Z(System.Double,System.Boolean,System.Int32)">
            <summary>
            Function Z+-(x, a).
            </summary>
            <param name="x">Argument</param>
            <param name="p">Sign</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Planck.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Planck.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.ShortTimeFourierTransform">
            <summary>
            Defines short-time Fourier transform.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Short-time_Fourier_transform
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.#ctor(UMapx.Window.IWindow,System.Boolean,UMapx.Core.Direction)">
            <summary>
            Initializes short-time Fourier transform.
            </summary>
            <param name="function">Windows function</param>
            <param name="normalized">Normalized transform or not</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Window.ShortTimeFourierTransform.Normalized">
            <summary>
            Normalized transform or not.
            </summary>
        </member>
        <member name="P:UMapx.Window.ShortTimeFourierTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="P:UMapx.Window.ShortTimeFourierTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Forward(System.Double[])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Backward(System.Double[])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward short-time Fourier Transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.ShortTimeFourierTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward short-time Fourier Transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Window.Sine">
            <summary>
            Defines the sine window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Sine.#ctor(System.Int32)">
            <summary>
            Initializes the sine window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Sine.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Sine.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.Sine.sinefunc(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="T:UMapx.Window.Tukey">
            <summary>
            Defines the window function of Tukey.
            </summary>
        </member>
        <member name="M:UMapx.Window.Tukey.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes the Tukey window function.
            </summary>
            <param name="frameSize">Window size</param>
            <param name="a">Form parameter [0, 1]</param>
        </member>
        <member name="P:UMapx.Window.Tukey.A">
            <summary>
            Gets or sets the value of the form parameter [0, 1].
            </summary>
        </member>
        <member name="M:UMapx.Window.Tukey.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Tukey.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.Welch">
            <summary>
            Defines the Welch window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.Welch.#ctor(System.Int32)">
            <summary>
            Initializes the Welch window function.
            </summary>
            <param name="frameSize">Window size</param>
        </member>
        <member name="M:UMapx.Window.Welch.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.Welch.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.WeylHeisenbergTransform">
            <summary>
            Defines a group of orthogonal bases and discrete Weyl-Heisenberg transforms.
            <remarks>
            More information can be found on the website:
            https://ieeexplore.ieee.org/document/9117707/
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Window.WeylHeisenbergTransform.window">
            <summary>
            Windows function.
            </summary>
        </member>
        <member name="F:UMapx.Window.WeylHeisenbergTransform.m">
            <summary>
            Number of frequency shifts.
            </summary>
        </member>
        <member name="F:UMapx.Window.WeylHeisenbergTransform.direction">
            <summary>
            Processing direction.
            </summary>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.#ctor(UMapx.Window.IWindow,System.Int32,UMapx.Core.Direction)">
            <summary>
            Initializes a group of orthogonal bases and Weyl-Heisenberg transformations.
            </summary>
            <param name="window">Windows function</param>
            <param name="m">Number of frequency shifts [4, N]</param>
            <param name="direction">Processing direction</param>
        </member>
        <member name="P:UMapx.Window.WeylHeisenbergTransform.M">
            <summary>
            Gets or sets number of frequency shifts [4, N].
            <remarks>
            Even number.
            </remarks>
            </summary>
        </member>
        <member name="P:UMapx.Window.WeylHeisenbergTransform.Direction">
            <summary>
            Gets or sets the processing direction.
            </summary>
        </member>
        <member name="P:UMapx.Window.WeylHeisenbergTransform.Window">
            <summary>
            Gets or sets the window function.
            </summary>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Matrix(System.Double[],System.Int32)">
            <summary>
            Returns the complex Weyl-Heisenberg basis matrix.
            <remarks>
            Matrix dimension[N, N], where N = M * L.
            </remarks>
            </summary>
            <param name="g0">Function</param>
            <param name="M">Number of frequency shifts</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Matrix(UMapx.Window.IWindow,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns the complex Weyl-Heisenberg basis matrix.
            <remarks>
            Matrix dimension[N, N], where N = M * L.
            </remarks>
            </summary>
            <param name="window">Windows function</param>
            <param name="N">Number of samples</param>
            <param name="M">Number of frequency shifts</param>
            <param name="orthogonalize">Orthogonalized matrix or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Matrix(System.Double[],System.Int32,System.Boolean)">
            <summary>
            Returns the complex Weyl-Heisenberg basis matrix.
            <remarks>
            Matrix dimension[N, N], where N = M * L.
            </remarks>
            </summary>
            <param name="g0">Function</param>
            <param name="M">Number of frequency shifts</param>
            <param name="orthogonalize">Orthogonalized matrix or not</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.GetPacket(UMapx.Window.IWindow,System.Int32)">
            <summary>
            Returns a vector of window function values.
            </summary>
            <param name="window">Windows function</param>
            <param name="length">Number of samples</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.nSymmetry(UMapx.Window.IWindow,System.Int32)">
            <summary>
            Returns a vector of values of a window function that satisfies the N-1 symmetry condition.
            </summary>
            <param name="window">Windows function</param>
            <param name="length">Number of samples</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Forward(System.Double[])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Backward(System.Double[])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Weyl-Heisenberg transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.WeylHeisenbergTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Weyl-Heisenberg transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="T:UMapx.Window.WindowBase">
            <summary>
            Defines the class for window functions.
            <remarks>
            More information can be found on the website:
            https://en.wikipedia.org/wiki/Window_function
            </remarks>
            </summary>
        </member>
        <member name="F:UMapx.Window.WindowBase.frameSize">
            <summary>
            Window size.
            </summary>
        </member>
        <member name="P:UMapx.Window.WindowBase.FrameSize">
            <summary>
            Gets or sets the window size.
            </summary>
        </member>
        <member name="M:UMapx.Window.WindowBase.Function(System.Double)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.GetWindow">
            <summary>
            Returns the window function.
            </summary>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.Function(System.Double[],System.Int32)">
            <summary>
            Returns an array of window function values.
            </summary>
            <param name="x">Array</param>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.Function(System.Double[])">
            <summary>
            Returns an array of window function values.
            </summary>
            <param name="x">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.Function(System.Double,System.Int32)">
            <summary>
            Returns the value of a window function.
            </summary>
            <param name="x">Argument</param>
            <param name="frameSize">Window size</param>
            <returns>Double precision floating point number</returns>
        </member>
        <member name="M:UMapx.Window.WindowBase.GetWindow(System.Int32)">
            <summary>
            Returns the window function.
            </summary>
            <param name="frameSize">Window size</param>
            <returns>Array</returns>
        </member>
        <member name="T:UMapx.Window.ZakTransform">
            <summary>
            Defines the Zak transform.
            </summary>
        </member>
        <member name="M:UMapx.Window.ZakTransform.#ctor(System.Int32)">
            <summary>
            Initializes the Zak transform.
            </summary>
            <param name="m">Number of frequency shifts [4, N]</param>
        </member>
        <member name="P:UMapx.Window.ZakTransform.M">
            <summary>
            Gets or sets number of frequency shifts [4, N].
            <remarks>
            Even number.
            </remarks>
            </summary>
        </member>
        <member name="M:UMapx.Window.ZakTransform.Forward(System.Double[])">
            <summary>
            Forward Zak transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ZakTransform.Forward(UMapx.Core.Complex[])">
            <summary>
            Forward Zak transform.
            </summary>
            <param name="A">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ZakTransform.Forward(System.Double[0:,0:])">
            <summary>
            Forward Zak transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.ZakTransform.Forward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Forward Zak transform.
            </summary>
            <param name="A">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.ZakTransform.Backward(System.Double[])">
            <summary>
            Backward Zak transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ZakTransform.Backward(UMapx.Core.Complex[])">
            <summary>
            Backward Zak transform.
            </summary>
            <param name="B">Array</param>
            <returns>Array</returns>
        </member>
        <member name="M:UMapx.Window.ZakTransform.Backward(System.Double[0:,0:])">
            <summary>
            Backward Zak transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:UMapx.Window.ZakTransform.Backward(UMapx.Core.Complex[0:,0:])">
            <summary>
            Backward Zak transform.
            </summary>
            <param name="B">Matrix</param>
            <returns>Matrix</returns>
        </member>
    </members>
</doc>
